"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_gsap_all_js"],{

/***/ "(app-pages-browser)/./node_modules/gsap/CSSRulePlugin.js":
/*!********************************************!*\
  !*** ./node_modules/gsap/CSSRulePlugin.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CSSRulePlugin: function() { return /* binding */ CSSRulePlugin; },\n/* harmony export */   \"default\": function() { return /* binding */ CSSRulePlugin; }\n/* harmony export */ });\n/*!\n * CSSRulePlugin 3.12.7\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar gsap,\n    _coreInitted,\n    _win,\n    _doc,\n    CSSPlugin,\n    _windowExists = function _windowExists() {\n  return typeof window !== \"undefined\";\n},\n    _getGSAP = function _getGSAP() {\n  return gsap || _windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _checkRegister = function _checkRegister() {\n  if (!_coreInitted) {\n    _initCore();\n\n    if (!CSSPlugin) {\n      console.warn(\"Please gsap.registerPlugin(CSSPlugin, CSSRulePlugin)\");\n    }\n  }\n\n  return _coreInitted;\n},\n    _initCore = function _initCore(core) {\n  gsap = core || _getGSAP();\n\n  if (_windowExists()) {\n    _win = window;\n    _doc = document;\n  }\n\n  if (gsap) {\n    CSSPlugin = gsap.plugins.css;\n\n    if (CSSPlugin) {\n      _coreInitted = 1;\n    }\n  }\n};\n\nvar CSSRulePlugin = {\n  version: \"3.12.7\",\n  name: \"cssRule\",\n  init: function init(target, value, tween, index, targets) {\n    if (!_checkRegister() || typeof target.cssText === \"undefined\") {\n      return false;\n    }\n\n    var div = target._gsProxy = target._gsProxy || _doc.createElement(\"div\");\n\n    this.ss = target;\n    this.style = div.style;\n    div.style.cssText = target.cssText;\n    CSSPlugin.prototype.init.call(this, div, value, tween, index, targets); //we just offload all the work to the regular CSSPlugin and then copy the cssText back over to the rule in the render() method. This allows us to have all of the updates to CSSPlugin automatically flow through to CSSRulePlugin instead of having to maintain both\n  },\n  render: function render(ratio, data) {\n    var pt = data._pt,\n        style = data.style,\n        ss = data.ss,\n        i;\n\n    while (pt) {\n      pt.r(ratio, pt.d);\n      pt = pt._next;\n    }\n\n    i = style.length;\n\n    while (--i > -1) {\n      ss[style[i]] = style[style[i]];\n    }\n  },\n  getRule: function getRule(selector) {\n    _checkRegister();\n\n    var ruleProp = _doc.all ? \"rules\" : \"cssRules\",\n        styleSheets = _doc.styleSheets,\n        i = styleSheets.length,\n        pseudo = selector.charAt(0) === \":\",\n        j,\n        curSS,\n        cs,\n        a;\n    selector = (pseudo ? \"\" : \",\") + selector.split(\"::\").join(\":\").toLowerCase() + \",\"; //note: old versions of IE report tag name selectors as upper case, so we just change everything to lowercase.\n\n    if (pseudo) {\n      a = [];\n    }\n\n    while (i--) {\n      //Firefox may throw insecure operation errors when css is loaded from other domains, so try/catch.\n      try {\n        curSS = styleSheets[i][ruleProp];\n\n        if (!curSS) {\n          continue;\n        }\n\n        j = curSS.length;\n      } catch (e) {\n        console.warn(e);\n        continue;\n      }\n\n      while (--j > -1) {\n        cs = curSS[j];\n\n        if (cs.selectorText && (\",\" + cs.selectorText.split(\"::\").join(\":\").toLowerCase() + \",\").indexOf(selector) !== -1) {\n          //note: IE adds an extra \":\" to pseudo selectors, so .myClass:after becomes .myClass::after, so we need to strip the extra one out.\n          if (pseudo) {\n            a.push(cs.style);\n          } else {\n            return cs.style;\n          }\n        }\n      }\n    }\n\n    return a;\n  },\n  register: _initCore\n};\n_getGSAP() && gsap.registerPlugin(CSSRulePlugin);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nc2FwL0NTU1J1bGVQbHVnaW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7QUFDRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw0RUFBNEU7QUFDNUUsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlGQUF5Rjs7QUFFekY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZ3NhcC9DU1NSdWxlUGx1Z2luLmpzPzBhMjQiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDU1NSdWxlUGx1Z2luIDMuMTIuN1xuICogaHR0cHM6Ly9nc2FwLmNvbVxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAyMDA4LTIwMjUsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3NhcC5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR1NBUCBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbnZhciBnc2FwLFxuICAgIF9jb3JlSW5pdHRlZCxcbiAgICBfd2luLFxuICAgIF9kb2MsXG4gICAgQ1NTUGx1Z2luLFxuICAgIF93aW5kb3dFeGlzdHMgPSBmdW5jdGlvbiBfd2luZG93RXhpc3RzKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX2dldEdTQVAgPSBmdW5jdGlvbiBfZ2V0R1NBUCgpIHtcbiAgcmV0dXJuIGdzYXAgfHwgX3dpbmRvd0V4aXN0cygpICYmIChnc2FwID0gd2luZG93LmdzYXApICYmIGdzYXAucmVnaXN0ZXJQbHVnaW4gJiYgZ3NhcDtcbn0sXG4gICAgX2NoZWNrUmVnaXN0ZXIgPSBmdW5jdGlvbiBfY2hlY2tSZWdpc3RlcigpIHtcbiAgaWYgKCFfY29yZUluaXR0ZWQpIHtcbiAgICBfaW5pdENvcmUoKTtcblxuICAgIGlmICghQ1NTUGx1Z2luKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJQbGVhc2UgZ3NhcC5yZWdpc3RlclBsdWdpbihDU1NQbHVnaW4sIENTU1J1bGVQbHVnaW4pXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfY29yZUluaXR0ZWQ7XG59LFxuICAgIF9pbml0Q29yZSA9IGZ1bmN0aW9uIF9pbml0Q29yZShjb3JlKSB7XG4gIGdzYXAgPSBjb3JlIHx8IF9nZXRHU0FQKCk7XG5cbiAgaWYgKF93aW5kb3dFeGlzdHMoKSkge1xuICAgIF93aW4gPSB3aW5kb3c7XG4gICAgX2RvYyA9IGRvY3VtZW50O1xuICB9XG5cbiAgaWYgKGdzYXApIHtcbiAgICBDU1NQbHVnaW4gPSBnc2FwLnBsdWdpbnMuY3NzO1xuXG4gICAgaWYgKENTU1BsdWdpbikge1xuICAgICAgX2NvcmVJbml0dGVkID0gMTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCB2YXIgQ1NTUnVsZVBsdWdpbiA9IHtcbiAgdmVyc2lvbjogXCIzLjEyLjdcIixcbiAgbmFtZTogXCJjc3NSdWxlXCIsXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YWx1ZSwgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSB7XG4gICAgaWYgKCFfY2hlY2tSZWdpc3RlcigpIHx8IHR5cGVvZiB0YXJnZXQuY3NzVGV4dCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBkaXYgPSB0YXJnZXQuX2dzUHJveHkgPSB0YXJnZXQuX2dzUHJveHkgfHwgX2RvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG4gICAgdGhpcy5zcyA9IHRhcmdldDtcbiAgICB0aGlzLnN0eWxlID0gZGl2LnN0eWxlO1xuICAgIGRpdi5zdHlsZS5jc3NUZXh0ID0gdGFyZ2V0LmNzc1RleHQ7XG4gICAgQ1NTUGx1Z2luLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcywgZGl2LCB2YWx1ZSwgdHdlZW4sIGluZGV4LCB0YXJnZXRzKTsgLy93ZSBqdXN0IG9mZmxvYWQgYWxsIHRoZSB3b3JrIHRvIHRoZSByZWd1bGFyIENTU1BsdWdpbiBhbmQgdGhlbiBjb3B5IHRoZSBjc3NUZXh0IGJhY2sgb3ZlciB0byB0aGUgcnVsZSBpbiB0aGUgcmVuZGVyKCkgbWV0aG9kLiBUaGlzIGFsbG93cyB1cyB0byBoYXZlIGFsbCBvZiB0aGUgdXBkYXRlcyB0byBDU1NQbHVnaW4gYXV0b21hdGljYWxseSBmbG93IHRocm91Z2ggdG8gQ1NTUnVsZVBsdWdpbiBpbnN0ZWFkIG9mIGhhdmluZyB0byBtYWludGFpbiBib3RoXG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJhdGlvLCBkYXRhKSB7XG4gICAgdmFyIHB0ID0gZGF0YS5fcHQsXG4gICAgICAgIHN0eWxlID0gZGF0YS5zdHlsZSxcbiAgICAgICAgc3MgPSBkYXRhLnNzLFxuICAgICAgICBpO1xuXG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuXG4gICAgaSA9IHN0eWxlLmxlbmd0aDtcblxuICAgIHdoaWxlICgtLWkgPiAtMSkge1xuICAgICAgc3Nbc3R5bGVbaV1dID0gc3R5bGVbc3R5bGVbaV1dO1xuICAgIH1cbiAgfSxcbiAgZ2V0UnVsZTogZnVuY3Rpb24gZ2V0UnVsZShzZWxlY3Rvcikge1xuICAgIF9jaGVja1JlZ2lzdGVyKCk7XG5cbiAgICB2YXIgcnVsZVByb3AgPSBfZG9jLmFsbCA/IFwicnVsZXNcIiA6IFwiY3NzUnVsZXNcIixcbiAgICAgICAgc3R5bGVTaGVldHMgPSBfZG9jLnN0eWxlU2hlZXRzLFxuICAgICAgICBpID0gc3R5bGVTaGVldHMubGVuZ3RoLFxuICAgICAgICBwc2V1ZG8gPSBzZWxlY3Rvci5jaGFyQXQoMCkgPT09IFwiOlwiLFxuICAgICAgICBqLFxuICAgICAgICBjdXJTUyxcbiAgICAgICAgY3MsXG4gICAgICAgIGE7XG4gICAgc2VsZWN0b3IgPSAocHNldWRvID8gXCJcIiA6IFwiLFwiKSArIHNlbGVjdG9yLnNwbGl0KFwiOjpcIikuam9pbihcIjpcIikudG9Mb3dlckNhc2UoKSArIFwiLFwiOyAvL25vdGU6IG9sZCB2ZXJzaW9ucyBvZiBJRSByZXBvcnQgdGFnIG5hbWUgc2VsZWN0b3JzIGFzIHVwcGVyIGNhc2UsIHNvIHdlIGp1c3QgY2hhbmdlIGV2ZXJ5dGhpbmcgdG8gbG93ZXJjYXNlLlxuXG4gICAgaWYgKHBzZXVkbykge1xuICAgICAgYSA9IFtdO1xuICAgIH1cblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIC8vRmlyZWZveCBtYXkgdGhyb3cgaW5zZWN1cmUgb3BlcmF0aW9uIGVycm9ycyB3aGVuIGNzcyBpcyBsb2FkZWQgZnJvbSBvdGhlciBkb21haW5zLCBzbyB0cnkvY2F0Y2guXG4gICAgICB0cnkge1xuICAgICAgICBjdXJTUyA9IHN0eWxlU2hlZXRzW2ldW3J1bGVQcm9wXTtcblxuICAgICAgICBpZiAoIWN1clNTKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBqID0gY3VyU1MubGVuZ3RoO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoLS1qID4gLTEpIHtcbiAgICAgICAgY3MgPSBjdXJTU1tqXTtcblxuICAgICAgICBpZiAoY3Muc2VsZWN0b3JUZXh0ICYmIChcIixcIiArIGNzLnNlbGVjdG9yVGV4dC5zcGxpdChcIjo6XCIpLmpvaW4oXCI6XCIpLnRvTG93ZXJDYXNlKCkgKyBcIixcIikuaW5kZXhPZihzZWxlY3RvcikgIT09IC0xKSB7XG4gICAgICAgICAgLy9ub3RlOiBJRSBhZGRzIGFuIGV4dHJhIFwiOlwiIHRvIHBzZXVkbyBzZWxlY3RvcnMsIHNvIC5teUNsYXNzOmFmdGVyIGJlY29tZXMgLm15Q2xhc3M6OmFmdGVyLCBzbyB3ZSBuZWVkIHRvIHN0cmlwIHRoZSBleHRyYSBvbmUgb3V0LlxuICAgICAgICAgIGlmIChwc2V1ZG8pIHtcbiAgICAgICAgICAgIGEucHVzaChjcy5zdHlsZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjcy5zdHlsZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfSxcbiAgcmVnaXN0ZXI6IF9pbml0Q29yZVxufTtcbl9nZXRHU0FQKCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbihDU1NSdWxlUGx1Z2luKTtcbmV4cG9ydCB7IENTU1J1bGVQbHVnaW4gYXMgZGVmYXVsdCB9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gsap/CSSRulePlugin.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gsap/CustomEase.js":
/*!*****************************************!*\
  !*** ./node_modules/gsap/CustomEase.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CustomEase: function() { return /* binding */ CustomEase; },\n/* harmony export */   \"default\": function() { return /* binding */ CustomEase; }\n/* harmony export */ });\n/* harmony import */ var _utils_paths_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/paths.js */ \"(app-pages-browser)/./node_modules/gsap/utils/paths.js\");\n/*!\n * CustomEase 3.12.7\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\n\n\nvar gsap,\n    _coreInitted,\n    _getGSAP = function _getGSAP() {\n  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _initCore = function _initCore() {\n  gsap = _getGSAP();\n\n  if (gsap) {\n    gsap.registerEase(\"_CE\", CustomEase.create);\n    _coreInitted = 1;\n  } else {\n    console.warn(\"Please gsap.registerPlugin(CustomEase)\");\n  }\n},\n    _bigNum = 1e20,\n    _round = function _round(value) {\n  return ~~(value * 1000 + (value < 0 ? -.5 : .5)) / 1000;\n},\n    _bonusValidated = 1,\n    //<name>CustomEase</name>\n_numExp = /[-+=.]*\\d+[.e\\-+]*\\d*[e\\-+]*\\d*/gi,\n    //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.\n_needsParsingExp = /[cLlsSaAhHvVtTqQ]/g,\n    _findMinimum = function _findMinimum(values) {\n  var l = values.length,\n      min = _bigNum,\n      i;\n\n  for (i = 1; i < l; i += 6) {\n    +values[i] < min && (min = +values[i]);\n  }\n\n  return min;\n},\n    //takes all the points and translates/scales them so that the x starts at 0 and ends at 1.\n_normalize = function _normalize(values, height, originY) {\n  if (!originY && originY !== 0) {\n    originY = Math.max(+values[values.length - 1], +values[1]);\n  }\n\n  var tx = +values[0] * -1,\n      ty = -originY,\n      l = values.length,\n      sx = 1 / (+values[l - 2] + tx),\n      sy = -height || (Math.abs(+values[l - 1] - +values[1]) < 0.01 * (+values[l - 2] - +values[0]) ? _findMinimum(values) + ty : +values[l - 1] + ty),\n      i;\n\n  if (sy) {\n    //typically y ends at 1 (so that the end values are reached)\n    sy = 1 / sy;\n  } else {\n    //in case the ease returns to its beginning value, scale everything proportionally\n    sy = -sx;\n  }\n\n  for (i = 0; i < l; i += 2) {\n    values[i] = (+values[i] + tx) * sx;\n    values[i + 1] = (+values[i + 1] + ty) * sy;\n  }\n},\n    //note that this function returns point objects like {x, y} rather than working with segments which are arrays with alternating x, y values as in the similar function in paths.js\n_bezierToPoints = function _bezierToPoints(x1, y1, x2, y2, x3, y3, x4, y4, threshold, points, index) {\n  var x12 = (x1 + x2) / 2,\n      y12 = (y1 + y2) / 2,\n      x23 = (x2 + x3) / 2,\n      y23 = (y2 + y3) / 2,\n      x34 = (x3 + x4) / 2,\n      y34 = (y3 + y4) / 2,\n      x123 = (x12 + x23) / 2,\n      y123 = (y12 + y23) / 2,\n      x234 = (x23 + x34) / 2,\n      y234 = (y23 + y34) / 2,\n      x1234 = (x123 + x234) / 2,\n      y1234 = (y123 + y234) / 2,\n      dx = x4 - x1,\n      dy = y4 - y1,\n      d2 = Math.abs((x2 - x4) * dy - (y2 - y4) * dx),\n      d3 = Math.abs((x3 - x4) * dy - (y3 - y4) * dx),\n      length;\n\n  if (!points) {\n    points = [{\n      x: x1,\n      y: y1\n    }, {\n      x: x4,\n      y: y4\n    }];\n    index = 1;\n  }\n\n  points.splice(index || points.length - 1, 0, {\n    x: x1234,\n    y: y1234\n  });\n\n  if ((d2 + d3) * (d2 + d3) > threshold * (dx * dx + dy * dy)) {\n    length = points.length;\n\n    _bezierToPoints(x1, y1, x12, y12, x123, y123, x1234, y1234, threshold, points, index);\n\n    _bezierToPoints(x1234, y1234, x234, y234, x34, y34, x4, y4, threshold, points, index + 1 + (points.length - length));\n  }\n\n  return points;\n};\n\nvar CustomEase = /*#__PURE__*/function () {\n  function CustomEase(id, data, config) {\n    _coreInitted || _initCore();\n    this.id = id;\n    _bonusValidated && this.setData(data, config);\n  }\n\n  var _proto = CustomEase.prototype;\n\n  _proto.setData = function setData(data, config) {\n    config = config || {};\n    data = data || \"0,0,1,1\";\n    var values = data.match(_numExp),\n        closest = 1,\n        points = [],\n        lookup = [],\n        precision = config.precision || 1,\n        fast = precision <= 1,\n        l,\n        a1,\n        a2,\n        i,\n        inc,\n        j,\n        point,\n        prevPoint,\n        p;\n    this.data = data;\n\n    if (_needsParsingExp.test(data) || ~data.indexOf(\"M\") && data.indexOf(\"C\") < 0) {\n      values = (0,_utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.stringToRawPath)(data)[0];\n    }\n\n    l = values.length;\n\n    if (l === 4) {\n      values.unshift(0, 0);\n      values.push(1, 1);\n      l = 8;\n    } else if ((l - 2) % 6) {\n      throw \"Invalid CustomEase\";\n    }\n\n    if (+values[0] !== 0 || +values[l - 2] !== 1) {\n      _normalize(values, config.height, config.originY);\n    }\n\n    this.segment = values;\n\n    for (i = 2; i < l; i += 6) {\n      a1 = {\n        x: +values[i - 2],\n        y: +values[i - 1]\n      };\n      a2 = {\n        x: +values[i + 4],\n        y: +values[i + 5]\n      };\n      points.push(a1, a2);\n\n      _bezierToPoints(a1.x, a1.y, +values[i], +values[i + 1], +values[i + 2], +values[i + 3], a2.x, a2.y, 1 / (precision * 200000), points, points.length - 1);\n    }\n\n    l = points.length;\n\n    for (i = 0; i < l; i++) {\n      point = points[i];\n      prevPoint = points[i - 1] || point;\n\n      if ((point.x > prevPoint.x || prevPoint.y !== point.y && prevPoint.x === point.x || point === prevPoint) && point.x <= 1) {\n        //if a point goes BACKWARD in time or is a duplicate, just drop it. Also it shouldn't go past 1 on the x axis, as could happen in a string like \"M0,0 C0,0 0.12,0.68 0.18,0.788 0.195,0.845 0.308,1 0.32,1 0.403,1.005 0.398,1 0.5,1 0.602,1 0.816,1.005 0.9,1 0.91,1 0.948,0.69 0.962,0.615 1.003,0.376 1,0 1,0\".\n        prevPoint.cx = point.x - prevPoint.x; //change in x between this point and the next point (performance optimization)\n\n        prevPoint.cy = point.y - prevPoint.y;\n        prevPoint.n = point;\n        prevPoint.nx = point.x; //next point's x value (performance optimization, making lookups faster in getRatio()). Remember, the lookup will always land on a spot where it's either this point or the very next one (never beyond that)\n\n        if (fast && i > 1 && Math.abs(prevPoint.cy / prevPoint.cx - points[i - 2].cy / points[i - 2].cx) > 2) {\n          //if there's a sudden change in direction, prioritize accuracy over speed. Like a bounce ease - you don't want to risk the sampling chunks landing on each side of the bounce anchor and having it clipped off.\n          fast = 0;\n        }\n\n        if (prevPoint.cx < closest) {\n          if (!prevPoint.cx) {\n            prevPoint.cx = 0.001; //avoids math problems in getRatio() (dividing by zero)\n\n            if (i === l - 1) {\n              //in case the final segment goes vertical RIGHT at the end, make sure we end at the end.\n              prevPoint.x -= 0.001;\n              closest = Math.min(closest, 0.001);\n              fast = 0;\n            }\n          } else {\n            closest = prevPoint.cx;\n          }\n        }\n      } else {\n        points.splice(i--, 1);\n        l--;\n      }\n    }\n\n    l = 1 / closest + 1 | 0;\n    inc = 1 / l;\n    j = 0;\n    point = points[0];\n\n    if (fast) {\n      for (i = 0; i < l; i++) {\n        //for fastest lookups, we just sample along the path at equal x (time) distance. Uses more memory and is slightly less accurate for anchors that don't land on the sampling points, but for the vast majority of eases it's excellent (and fast).\n        p = i * inc;\n\n        if (point.nx < p) {\n          point = points[++j];\n        }\n\n        a1 = point.y + (p - point.x) / point.cx * point.cy;\n        lookup[i] = {\n          x: p,\n          cx: inc,\n          y: a1,\n          cy: 0,\n          nx: 9\n        };\n\n        if (i) {\n          lookup[i - 1].cy = a1 - lookup[i - 1].y;\n        }\n      }\n\n      j = points[points.length - 1];\n      lookup[l - 1].cy = j.y - a1;\n      lookup[l - 1].cx = j.x - lookup[lookup.length - 1].x; //make sure it lands EXACTLY where it should. Otherwise, it might be something like 0.9999999999 instead of 1.\n    } else {\n      //this option is more accurate, ensuring that EVERY anchor is hit perfectly. Clipping across a bounce, for example, would never happen.\n      for (i = 0; i < l; i++) {\n        //build a lookup table based on the smallest distance so that we can instantly find the appropriate point (well, it'll either be that point or the very next one). We'll look up based on the linear progress. So it's it's 0.5 and the lookup table has 100 elements, it'd be like lookup[Math.floor(0.5 * 100)]\n        if (point.nx < i * inc) {\n          point = points[++j];\n        }\n\n        lookup[i] = point;\n      }\n\n      if (j < points.length - 1) {\n        lookup[i - 1] = points[points.length - 2];\n      }\n    } //this._calcEnd = (points[points.length-1].y !== 1 || points[0].y !== 0); //ensures that we don't run into floating point errors. As long as we're starting at 0 and ending at 1, tell GSAP to skip the final calculation and use 0/1 as the factor.\n\n\n    this.ease = function (p) {\n      var point = lookup[p * l | 0] || lookup[l - 1];\n\n      if (point.nx < p) {\n        point = point.n;\n      }\n\n      return point.y + (p - point.x) / point.cx * point.cy;\n    };\n\n    this.ease.custom = this;\n    this.id && gsap && gsap.registerEase(this.id, this.ease);\n    return this;\n  };\n\n  _proto.getSVGData = function getSVGData(config) {\n    return CustomEase.getSVGData(this, config);\n  };\n\n  CustomEase.create = function create(id, data, config) {\n    return new CustomEase(id, data, config).ease;\n  };\n\n  CustomEase.register = function register(core) {\n    gsap = core;\n\n    _initCore();\n  };\n\n  CustomEase.get = function get(id) {\n    return gsap.parseEase(id);\n  };\n\n  CustomEase.getSVGData = function getSVGData(ease, config) {\n    config = config || {};\n    var width = config.width || 100,\n        height = config.height || 100,\n        x = config.x || 0,\n        y = (config.y || 0) + height,\n        e = gsap.utils.toArray(config.path)[0],\n        a,\n        slope,\n        i,\n        inc,\n        tx,\n        ty,\n        precision,\n        threshold,\n        prevX,\n        prevY;\n\n    if (config.invert) {\n      height = -height;\n      y = 0;\n    }\n\n    if (typeof ease === \"string\") {\n      ease = gsap.parseEase(ease);\n    }\n\n    if (ease.custom) {\n      ease = ease.custom;\n    }\n\n    if (ease instanceof CustomEase) {\n      a = (0,_utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.rawPathToString)((0,_utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.transformRawPath)([ease.segment], width, 0, 0, -height, x, y));\n    } else {\n      a = [x, y];\n      precision = Math.max(5, (config.precision || 1) * 200);\n      inc = 1 / precision;\n      precision += 2;\n      threshold = 5 / precision;\n      prevX = _round(x + inc * width);\n      prevY = _round(y + ease(inc) * -height);\n      slope = (prevY - y) / (prevX - x);\n\n      for (i = 2; i < precision; i++) {\n        tx = _round(x + i * inc * width);\n        ty = _round(y + ease(i * inc) * -height);\n\n        if (Math.abs((ty - prevY) / (tx - prevX) - slope) > threshold || i === precision - 1) {\n          //only add points when the slope changes beyond the threshold\n          a.push(prevX, prevY);\n          slope = (ty - prevY) / (tx - prevX);\n        }\n\n        prevX = tx;\n        prevY = ty;\n      }\n\n      a = \"M\" + a.join(\",\");\n    }\n\n    e && e.setAttribute(\"d\", a);\n    return a;\n  };\n\n  return CustomEase;\n}();\nCustomEase.version = \"3.12.7\";\nCustomEase.headless = true;\n_getGSAP() && gsap.registerPlugin(CustomEase);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gsap/CustomEase.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gsap/Draggable.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/Draggable.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Draggable: function() { return /* binding */ Draggable; },\n/* harmony export */   \"default\": function() { return /* binding */ Draggable; }\n/* harmony export */ });\n/* harmony import */ var _utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/matrix.js */ \"(app-pages-browser)/./node_modules/gsap/utils/matrix.js\");\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n/*!\n * Draggable 3.12.7\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n */\n\n/* eslint-disable */\n\n\nvar gsap,\n    _win,\n    _doc,\n    _docElement,\n    _body,\n    _tempDiv,\n    _placeholderDiv,\n    _coreInitted,\n    _checkPrefix,\n    _toArray,\n    _supportsPassive,\n    _isTouchDevice,\n    _touchEventLookup,\n    _isMultiTouching,\n    _isAndroid,\n    InertiaPlugin,\n    _defaultCursor,\n    _supportsPointer,\n    _context,\n    _getStyleSaver,\n    _dragCount = 0,\n    _windowExists = function _windowExists() {\n  return typeof window !== \"undefined\";\n},\n    _getGSAP = function _getGSAP() {\n  return gsap || _windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _isFunction = function _isFunction(value) {\n  return typeof value === \"function\";\n},\n    _isObject = function _isObject(value) {\n  return typeof value === \"object\";\n},\n    _isUndefined = function _isUndefined(value) {\n  return typeof value === \"undefined\";\n},\n    _emptyFunc = function _emptyFunc() {\n  return false;\n},\n    _transformProp = \"transform\",\n    _transformOriginProp = \"transformOrigin\",\n    _round = function _round(value) {\n  return Math.round(value * 10000) / 10000;\n},\n    _isArray = Array.isArray,\n    _createElement = function _createElement(type, ns) {\n  var e = _doc.createElementNS ? _doc.createElementNS((ns || \"http://www.w3.org/1999/xhtml\").replace(/^https/, \"http\"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making \"style\" inaccessible.\n\n  return e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://gsap.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).\n},\n    _RAD2DEG = 180 / Math.PI,\n    _bigNum = 1e20,\n    _identityMatrix = new _utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.Matrix2D(),\n    _getTime = Date.now || function () {\n  return new Date().getTime();\n},\n    _renderQueue = [],\n    _lookup = {},\n    //when a Draggable is created, the target gets a unique _gsDragID property that allows gets associated with the Draggable instance for quick lookups in Draggable.get(). This avoids circular references that could cause gc problems.\n_lookupCount = 0,\n    _clickableTagExp = /^(?:a|input|textarea|button|select)$/i,\n    _lastDragTime = 0,\n    _temp1 = {},\n    // a simple object we reuse and populate (usually x/y properties) to conserve memory and improve performance.\n_windowProxy = {},\n    //memory/performance optimization - we reuse this object during autoScroll to store window-related bounds/offsets.\n_copy = function _copy(obj, factor) {\n  var copy = {},\n      p;\n\n  for (p in obj) {\n    copy[p] = factor ? obj[p] * factor : obj[p];\n  }\n\n  return copy;\n},\n    _extend = function _extend(obj, defaults) {\n  for (var p in defaults) {\n    if (!(p in obj)) {\n      obj[p] = defaults[p];\n    }\n  }\n\n  return obj;\n},\n    _setTouchActionForAllDescendants = function _setTouchActionForAllDescendants(elements, value) {\n  var i = elements.length,\n      children;\n\n  while (i--) {\n    value ? elements[i].style.touchAction = value : elements[i].style.removeProperty(\"touch-action\");\n    children = elements[i].children;\n    children && children.length && _setTouchActionForAllDescendants(children, value);\n  }\n},\n    _renderQueueTick = function _renderQueueTick() {\n  return _renderQueue.forEach(function (func) {\n    return func();\n  });\n},\n    _addToRenderQueue = function _addToRenderQueue(func) {\n  _renderQueue.push(func);\n\n  if (_renderQueue.length === 1) {\n    gsap.ticker.add(_renderQueueTick);\n  }\n},\n    _renderQueueTimeout = function _renderQueueTimeout() {\n  return !_renderQueue.length && gsap.ticker.remove(_renderQueueTick);\n},\n    _removeFromRenderQueue = function _removeFromRenderQueue(func) {\n  var i = _renderQueue.length;\n\n  while (i--) {\n    if (_renderQueue[i] === func) {\n      _renderQueue.splice(i, 1);\n    }\n  }\n\n  gsap.to(_renderQueueTimeout, {\n    overwrite: true,\n    delay: 15,\n    duration: 0,\n    onComplete: _renderQueueTimeout,\n    data: \"_draggable\"\n  }); //remove the \"tick\" listener only after the render queue is empty for 15 seconds (to improve performance). Adding/removing it constantly for every click/touch wouldn't deliver optimal speed, and we also don't want the ticker to keep calling the render method when things are idle for long periods of time (we want to improve battery life on mobile devices).\n},\n    _setDefaults = function _setDefaults(obj, defaults) {\n  for (var p in defaults) {\n    if (!(p in obj)) {\n      obj[p] = defaults[p];\n    }\n  }\n\n  return obj;\n},\n    _addListener = function _addListener(element, type, func, capture) {\n  if (element.addEventListener) {\n    var touchType = _touchEventLookup[type];\n    capture = capture || (_supportsPassive ? {\n      passive: false\n    } : null);\n    element.addEventListener(touchType || type, func, capture);\n    touchType && type !== touchType && element.addEventListener(type, func, capture); //some browsers actually support both, so must we. But pointer events cover all.\n  }\n},\n    _removeListener = function _removeListener(element, type, func, capture) {\n  if (element.removeEventListener) {\n    var touchType = _touchEventLookup[type];\n    element.removeEventListener(touchType || type, func, capture);\n    touchType && type !== touchType && element.removeEventListener(type, func, capture);\n  }\n},\n    _preventDefault = function _preventDefault(event) {\n  event.preventDefault && event.preventDefault();\n  event.preventManipulation && event.preventManipulation(); //for some Microsoft browsers\n},\n    _hasTouchID = function _hasTouchID(list, ID) {\n  var i = list.length;\n\n  while (i--) {\n    if (list[i].identifier === ID) {\n      return true;\n    }\n  }\n},\n    _onMultiTouchDocumentEnd = function _onMultiTouchDocumentEnd(event) {\n  _isMultiTouching = event.touches && _dragCount < event.touches.length;\n\n  _removeListener(event.target, \"touchend\", _onMultiTouchDocumentEnd);\n},\n    _onMultiTouchDocument = function _onMultiTouchDocument(event) {\n  _isMultiTouching = event.touches && _dragCount < event.touches.length;\n\n  _addListener(event.target, \"touchend\", _onMultiTouchDocumentEnd);\n},\n    _getDocScrollTop = function _getDocScrollTop(doc) {\n  return _win.pageYOffset || doc.scrollTop || doc.documentElement.scrollTop || doc.body.scrollTop || 0;\n},\n    _getDocScrollLeft = function _getDocScrollLeft(doc) {\n  return _win.pageXOffset || doc.scrollLeft || doc.documentElement.scrollLeft || doc.body.scrollLeft || 0;\n},\n    _addScrollListener = function _addScrollListener(e, callback) {\n  _addListener(e, \"scroll\", callback);\n\n  if (!_isRoot(e.parentNode)) {\n    _addScrollListener(e.parentNode, callback);\n  }\n},\n    _removeScrollListener = function _removeScrollListener(e, callback) {\n  _removeListener(e, \"scroll\", callback);\n\n  if (!_isRoot(e.parentNode)) {\n    _removeScrollListener(e.parentNode, callback);\n  }\n},\n    _isRoot = function _isRoot(e) {\n  return !!(!e || e === _docElement || e.nodeType === 9 || e === _doc.body || e === _win || !e.nodeType || !e.parentNode);\n},\n    _getMaxScroll = function _getMaxScroll(element, axis) {\n  var dim = axis === \"x\" ? \"Width\" : \"Height\",\n      scroll = \"scroll\" + dim,\n      client = \"client\" + dim;\n  return Math.max(0, _isRoot(element) ? Math.max(_docElement[scroll], _body[scroll]) - (_win[\"inner\" + dim] || _docElement[client] || _body[client]) : element[scroll] - element[client]);\n},\n    _recordMaxScrolls = function _recordMaxScrolls(e, skipCurrent) {\n  //records _gsMaxScrollX and _gsMaxScrollY properties for the element and all ancestors up the chain so that we can cap it, otherwise dragging beyond the edges with autoScroll on can endlessly scroll.\n  var x = _getMaxScroll(e, \"x\"),\n      y = _getMaxScroll(e, \"y\");\n\n  if (_isRoot(e)) {\n    e = _windowProxy;\n  } else {\n    _recordMaxScrolls(e.parentNode, skipCurrent);\n  }\n\n  e._gsMaxScrollX = x;\n  e._gsMaxScrollY = y;\n\n  if (!skipCurrent) {\n    e._gsScrollX = e.scrollLeft || 0;\n    e._gsScrollY = e.scrollTop || 0;\n  }\n},\n    _setStyle = function _setStyle(element, property, value) {\n  var style = element.style;\n\n  if (!style) {\n    return;\n  }\n\n  if (_isUndefined(style[property])) {\n    property = _checkPrefix(property, element) || property;\n  }\n\n  if (value == null) {\n    style.removeProperty && style.removeProperty(property.replace(/([A-Z])/g, \"-$1\").toLowerCase());\n  } else {\n    style[property] = value;\n  }\n},\n    _getComputedStyle = function _getComputedStyle(element) {\n  return _win.getComputedStyle(element instanceof Element ? element : element.host || (element.parentNode || {}).host || element);\n},\n    //the \"host\" stuff helps to accommodate ShadowDom objects.\n_tempRect = {},\n    //reuse to reduce garbage collection tasks\n_parseRect = function _parseRect(e) {\n  //accepts a DOM element, a mouse event, or a rectangle object and returns the corresponding rectangle with left, right, width, height, top, and bottom properties\n  if (e === _win) {\n    _tempRect.left = _tempRect.top = 0;\n    _tempRect.width = _tempRect.right = _docElement.clientWidth || e.innerWidth || _body.clientWidth || 0;\n    _tempRect.height = _tempRect.bottom = (e.innerHeight || 0) - 20 < _docElement.clientHeight ? _docElement.clientHeight : e.innerHeight || _body.clientHeight || 0;\n    return _tempRect;\n  }\n\n  var doc = e.ownerDocument || _doc,\n      r = !_isUndefined(e.pageX) ? {\n    left: e.pageX - _getDocScrollLeft(doc),\n    top: e.pageY - _getDocScrollTop(doc),\n    right: e.pageX - _getDocScrollLeft(doc) + 1,\n    bottom: e.pageY - _getDocScrollTop(doc) + 1\n  } : !e.nodeType && !_isUndefined(e.left) && !_isUndefined(e.top) ? e : _toArray(e)[0].getBoundingClientRect();\n\n  if (_isUndefined(r.right) && !_isUndefined(r.width)) {\n    r.right = r.left + r.width;\n    r.bottom = r.top + r.height;\n  } else if (_isUndefined(r.width)) {\n    //some browsers don't include width and height properties. We can't just set them directly on r because some browsers throw errors, so create a new generic object.\n    r = {\n      width: r.right - r.left,\n      height: r.bottom - r.top,\n      right: r.right,\n      left: r.left,\n      bottom: r.bottom,\n      top: r.top\n    };\n  }\n\n  return r;\n},\n    _dispatchEvent = function _dispatchEvent(target, type, callbackName) {\n  var vars = target.vars,\n      callback = vars[callbackName],\n      listeners = target._listeners[type],\n      result;\n\n  if (_isFunction(callback)) {\n    result = callback.apply(vars.callbackScope || target, vars[callbackName + \"Params\"] || [target.pointerEvent]);\n  }\n\n  if (listeners && target.dispatchEvent(type) === false) {\n    result = false;\n  }\n\n  return result;\n},\n    _getBounds = function _getBounds(target, context) {\n  //accepts any of the following: a DOM element, jQuery object, selector text, or an object defining bounds as {top, left, width, height} or {minX, maxX, minY, maxY}. Returns an object with left, top, width, and height properties.\n  var e = _toArray(target)[0],\n      top,\n      left,\n      offset;\n\n  if (!e.nodeType && e !== _win) {\n    if (!_isUndefined(target.left)) {\n      offset = {\n        x: 0,\n        y: 0\n      }; //_getOffsetTransformOrigin(context); //the bounds should be relative to the origin\n\n      return {\n        left: target.left - offset.x,\n        top: target.top - offset.y,\n        width: target.width,\n        height: target.height\n      };\n    }\n\n    left = target.min || target.minX || target.minRotation || 0;\n    top = target.min || target.minY || 0;\n    return {\n      left: left,\n      top: top,\n      width: (target.max || target.maxX || target.maxRotation || 0) - left,\n      height: (target.max || target.maxY || 0) - top\n    };\n  }\n\n  return _getElementBounds(e, context);\n},\n    _point1 = {},\n    //we reuse to minimize garbage collection tasks.\n_getElementBounds = function _getElementBounds(element, context) {\n  context = _toArray(context)[0];\n  var isSVG = element.getBBox && element.ownerSVGElement,\n      doc = element.ownerDocument || _doc,\n      left,\n      right,\n      top,\n      bottom,\n      matrix,\n      p1,\n      p2,\n      p3,\n      p4,\n      bbox,\n      width,\n      height,\n      cs;\n\n  if (element === _win) {\n    top = _getDocScrollTop(doc);\n    left = _getDocScrollLeft(doc);\n    right = left + (doc.documentElement.clientWidth || element.innerWidth || doc.body.clientWidth || 0);\n    bottom = top + ((element.innerHeight || 0) - 20 < doc.documentElement.clientHeight ? doc.documentElement.clientHeight : element.innerHeight || doc.body.clientHeight || 0); //some browsers (like Firefox) ignore absolutely positioned elements, and collapse the height of the documentElement, so it could be 8px, for example, if you have just an absolutely positioned div. In that case, we use the innerHeight to resolve this.\n  } else if (context === _win || _isUndefined(context)) {\n    return element.getBoundingClientRect();\n  } else {\n    left = top = 0;\n\n    if (isSVG) {\n      bbox = element.getBBox();\n      width = bbox.width;\n      height = bbox.height;\n    } else {\n      if (element.viewBox && (bbox = element.viewBox.baseVal)) {\n        left = bbox.x || 0;\n        top = bbox.y || 0;\n        width = bbox.width;\n        height = bbox.height;\n      }\n\n      if (!width) {\n        cs = _getComputedStyle(element);\n        bbox = cs.boxSizing === \"border-box\";\n        width = (parseFloat(cs.width) || element.clientWidth || 0) + (bbox ? 0 : parseFloat(cs.borderLeftWidth) + parseFloat(cs.borderRightWidth));\n        height = (parseFloat(cs.height) || element.clientHeight || 0) + (bbox ? 0 : parseFloat(cs.borderTopWidth) + parseFloat(cs.borderBottomWidth));\n      }\n    }\n\n    right = width;\n    bottom = height;\n  }\n\n  if (element === context) {\n    return {\n      left: left,\n      top: top,\n      width: right - left,\n      height: bottom - top\n    };\n  }\n\n  matrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(context, true).multiply((0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(element));\n  p1 = matrix.apply({\n    x: left,\n    y: top\n  });\n  p2 = matrix.apply({\n    x: right,\n    y: top\n  });\n  p3 = matrix.apply({\n    x: right,\n    y: bottom\n  });\n  p4 = matrix.apply({\n    x: left,\n    y: bottom\n  });\n  left = Math.min(p1.x, p2.x, p3.x, p4.x);\n  top = Math.min(p1.y, p2.y, p3.y, p4.y);\n  return {\n    left: left,\n    top: top,\n    width: Math.max(p1.x, p2.x, p3.x, p4.x) - left,\n    height: Math.max(p1.y, p2.y, p3.y, p4.y) - top\n  };\n},\n    _parseInertia = function _parseInertia(draggable, snap, max, min, factor, forceZeroVelocity) {\n  var vars = {},\n      a,\n      i,\n      l;\n\n  if (snap) {\n    if (factor !== 1 && snap instanceof Array) {\n      //some data must be altered to make sense, like if the user passes in an array of rotational values in degrees, we must convert it to radians. Or for scrollLeft and scrollTop, we invert the values.\n      vars.end = a = [];\n      l = snap.length;\n\n      if (_isObject(snap[0])) {\n        //if the array is populated with objects, like points ({x:100, y:200}), make copies before multiplying by the factor, otherwise we'll mess up the originals and the user may reuse it elsewhere.\n        for (i = 0; i < l; i++) {\n          a[i] = _copy(snap[i], factor);\n        }\n      } else {\n        for (i = 0; i < l; i++) {\n          a[i] = snap[i] * factor;\n        }\n      }\n\n      max += 1.1; //allow 1.1 pixels of wiggle room when snapping in order to work around some browser inconsistencies in the way bounds are reported which can make them roughly a pixel off. For example, if \"snap:[-$('#menu').width(), 0]\" was defined and #menu had a wrapper that was used as the bounds, some browsers would be one pixel off, making the minimum -752 for example when snap was [-753,0], thus instead of snapping to -753, it would snap to 0 since -753 was below the minimum.\n\n      min -= 1.1;\n    } else if (_isFunction(snap)) {\n      vars.end = function (value) {\n        var result = snap.call(draggable, value),\n            copy,\n            p;\n\n        if (factor !== 1) {\n          if (_isObject(result)) {\n            copy = {};\n\n            for (p in result) {\n              copy[p] = result[p] * factor;\n            }\n\n            result = copy;\n          } else {\n            result *= factor;\n          }\n        }\n\n        return result; //we need to ensure that we can scope the function call to the Draggable instance itself so that users can access important values like maxX, minX, maxY, minY, x, and y from within that function.\n      };\n    } else {\n      vars.end = snap;\n    }\n  }\n\n  if (max || max === 0) {\n    vars.max = max;\n  }\n\n  if (min || min === 0) {\n    vars.min = min;\n  }\n\n  if (forceZeroVelocity) {\n    vars.velocity = 0;\n  }\n\n  return vars;\n},\n    _isClickable = function _isClickable(element) {\n  //sometimes it's convenient to mark an element as clickable by adding a data-clickable=\"true\" attribute (in which case we won't preventDefault() the mouse/touch event). This method checks if the element is an <a>, <input>, or <button> or has the data-clickable or contentEditable attribute set to true (or any of its parent elements).\n  var data;\n  return !element || !element.getAttribute || element === _body ? false : (data = element.getAttribute(\"data-clickable\")) === \"true\" || data !== \"false\" && (_clickableTagExp.test(element.nodeName + \"\") || element.getAttribute(\"contentEditable\") === \"true\") ? true : _isClickable(element.parentNode);\n},\n    _setSelectable = function _setSelectable(elements, selectable) {\n  var i = elements.length,\n      e;\n\n  while (i--) {\n    e = elements[i];\n    e.ondragstart = e.onselectstart = selectable ? null : _emptyFunc;\n    gsap.set(e, {\n      lazy: true,\n      userSelect: selectable ? \"text\" : \"none\"\n    });\n  }\n},\n    _isFixed = function _isFixed(element) {\n  if (_getComputedStyle(element).position === \"fixed\") {\n    return true;\n  }\n\n  element = element.parentNode;\n\n  if (element && element.nodeType === 1) {\n    // avoid document fragments which will throw an error.\n    return _isFixed(element);\n  }\n},\n    _supports3D,\n    _addPaddingBR,\n    //The ScrollProxy class wraps an element's contents into another div (we call it \"content\") that we either add padding when necessary or apply a translate3d() transform in order to overscroll (scroll past the boundaries). This allows us to simply set the scrollTop/scrollLeft (or top/left for easier reverse-axis orientation, which is what we do in Draggable) and it'll do all the work for us. For example, if we tried setting scrollTop to -100 on a normal DOM element, it wouldn't work - it'd look the same as setting it to 0, but if we set scrollTop of a ScrollProxy to -100, it'll give the correct appearance by either setting paddingTop of the wrapper to 100 or applying a 100-pixel translateY.\nScrollProxy = function ScrollProxy(element, vars) {\n  element = gsap.utils.toArray(element)[0];\n  vars = vars || {};\n  var content = document.createElement(\"div\"),\n      style = content.style,\n      node = element.firstChild,\n      offsetTop = 0,\n      offsetLeft = 0,\n      prevTop = element.scrollTop,\n      prevLeft = element.scrollLeft,\n      scrollWidth = element.scrollWidth,\n      scrollHeight = element.scrollHeight,\n      extraPadRight = 0,\n      maxLeft = 0,\n      maxTop = 0,\n      elementWidth,\n      elementHeight,\n      contentHeight,\n      nextNode,\n      transformStart,\n      transformEnd;\n\n  if (_supports3D && vars.force3D !== false) {\n    transformStart = \"translate3d(\";\n    transformEnd = \"px,0px)\";\n  } else if (_transformProp) {\n    transformStart = \"translate(\";\n    transformEnd = \"px)\";\n  }\n\n  this.scrollTop = function (value, force) {\n    if (!arguments.length) {\n      return -this.top();\n    }\n\n    this.top(-value, force);\n  };\n\n  this.scrollLeft = function (value, force) {\n    if (!arguments.length) {\n      return -this.left();\n    }\n\n    this.left(-value, force);\n  };\n\n  this.left = function (value, force) {\n    if (!arguments.length) {\n      return -(element.scrollLeft + offsetLeft);\n    }\n\n    var dif = element.scrollLeft - prevLeft,\n        oldOffset = offsetLeft;\n\n    if ((dif > 2 || dif < -2) && !force) {\n      //if the user interacts with the scrollbar (or something else scrolls it, like the mouse wheel), we should kill any tweens of the ScrollProxy.\n      prevLeft = element.scrollLeft;\n      gsap.killTweensOf(this, {\n        left: 1,\n        scrollLeft: 1\n      });\n      this.left(-prevLeft);\n\n      if (vars.onKill) {\n        vars.onKill();\n      }\n\n      return;\n    }\n\n    value = -value; //invert because scrolling works in the opposite direction\n\n    if (value < 0) {\n      offsetLeft = value - 0.5 | 0;\n      value = 0;\n    } else if (value > maxLeft) {\n      offsetLeft = value - maxLeft | 0;\n      value = maxLeft;\n    } else {\n      offsetLeft = 0;\n    }\n\n    if (offsetLeft || oldOffset) {\n      if (!this._skip) {\n        style[_transformProp] = transformStart + -offsetLeft + \"px,\" + -offsetTop + transformEnd;\n      }\n\n      if (offsetLeft + extraPadRight >= 0) {\n        style.paddingRight = offsetLeft + extraPadRight + \"px\";\n      }\n    }\n\n    element.scrollLeft = value | 0;\n    prevLeft = element.scrollLeft; //don't merge this with the line above because some browsers adjust the scrollLeft after it's set, so in order to be 100% accurate in tracking it, we need to ask the browser to report it.\n  };\n\n  this.top = function (value, force) {\n    if (!arguments.length) {\n      return -(element.scrollTop + offsetTop);\n    }\n\n    var dif = element.scrollTop - prevTop,\n        oldOffset = offsetTop;\n\n    if ((dif > 2 || dif < -2) && !force) {\n      //if the user interacts with the scrollbar (or something else scrolls it, like the mouse wheel), we should kill any tweens of the ScrollProxy.\n      prevTop = element.scrollTop;\n      gsap.killTweensOf(this, {\n        top: 1,\n        scrollTop: 1\n      });\n      this.top(-prevTop);\n\n      if (vars.onKill) {\n        vars.onKill();\n      }\n\n      return;\n    }\n\n    value = -value; //invert because scrolling works in the opposite direction\n\n    if (value < 0) {\n      offsetTop = value - 0.5 | 0;\n      value = 0;\n    } else if (value > maxTop) {\n      offsetTop = value - maxTop | 0;\n      value = maxTop;\n    } else {\n      offsetTop = 0;\n    }\n\n    if (offsetTop || oldOffset) {\n      if (!this._skip) {\n        style[_transformProp] = transformStart + -offsetLeft + \"px,\" + -offsetTop + transformEnd;\n      }\n    }\n\n    element.scrollTop = value | 0;\n    prevTop = element.scrollTop;\n  };\n\n  this.maxScrollTop = function () {\n    return maxTop;\n  };\n\n  this.maxScrollLeft = function () {\n    return maxLeft;\n  };\n\n  this.disable = function () {\n    node = content.firstChild;\n\n    while (node) {\n      nextNode = node.nextSibling;\n      element.appendChild(node);\n      node = nextNode;\n    }\n\n    if (element === content.parentNode) {\n      //in case disable() is called when it's already disabled.\n      element.removeChild(content);\n    }\n  };\n\n  this.enable = function () {\n    node = element.firstChild;\n\n    if (node === content) {\n      return;\n    }\n\n    while (node) {\n      nextNode = node.nextSibling;\n      content.appendChild(node);\n      node = nextNode;\n    }\n\n    element.appendChild(content);\n    this.calibrate();\n  };\n\n  this.calibrate = function (force) {\n    var widthMatches = element.clientWidth === elementWidth,\n        cs,\n        x,\n        y;\n    prevTop = element.scrollTop;\n    prevLeft = element.scrollLeft;\n\n    if (widthMatches && element.clientHeight === elementHeight && content.offsetHeight === contentHeight && scrollWidth === element.scrollWidth && scrollHeight === element.scrollHeight && !force) {\n      return; //no need to recalculate things if the width and height haven't changed.\n    }\n\n    if (offsetTop || offsetLeft) {\n      x = this.left();\n      y = this.top();\n      this.left(-element.scrollLeft);\n      this.top(-element.scrollTop);\n    }\n\n    cs = _getComputedStyle(element); //first, we need to remove any width constraints to see how the content naturally flows so that we can see if it's wider than the containing element. If so, we've got to record the amount of overage so that we can apply that as padding in order for browsers to correctly handle things. Then we switch back to a width of 100% (without that, some browsers don't flow the content correctly)\n\n    if (!widthMatches || force) {\n      style.display = \"block\";\n      style.width = \"auto\";\n      style.paddingRight = \"0px\";\n      extraPadRight = Math.max(0, element.scrollWidth - element.clientWidth); //if the content is wider than the container, we need to add the paddingLeft and paddingRight in order for things to behave correctly.\n\n      if (extraPadRight) {\n        extraPadRight += parseFloat(cs.paddingLeft) + (_addPaddingBR ? parseFloat(cs.paddingRight) : 0);\n      }\n    }\n\n    style.display = \"inline-block\";\n    style.position = \"relative\";\n    style.overflow = \"visible\";\n    style.verticalAlign = \"top\";\n    style.boxSizing = \"content-box\";\n    style.width = \"100%\";\n    style.paddingRight = extraPadRight + \"px\"; //some browsers neglect to factor in the bottom padding when calculating the scrollHeight, so we need to add that padding to the content when that happens. Allow a 2px margin for error\n\n    if (_addPaddingBR) {\n      style.paddingBottom = cs.paddingBottom;\n    }\n\n    elementWidth = element.clientWidth;\n    elementHeight = element.clientHeight;\n    scrollWidth = element.scrollWidth;\n    scrollHeight = element.scrollHeight;\n    maxLeft = element.scrollWidth - elementWidth;\n    maxTop = element.scrollHeight - elementHeight;\n    contentHeight = content.offsetHeight;\n    style.display = \"block\";\n\n    if (x || y) {\n      this.left(x);\n      this.top(y);\n    }\n  };\n\n  this.content = content;\n  this.element = element;\n  this._skip = false;\n  this.enable();\n},\n    _initCore = function _initCore(required) {\n  if (_windowExists() && document.body) {\n    var nav = window && window.navigator;\n    _win = window;\n    _doc = document;\n    _docElement = _doc.documentElement;\n    _body = _doc.body;\n    _tempDiv = _createElement(\"div\");\n    _supportsPointer = !!window.PointerEvent;\n    _placeholderDiv = _createElement(\"div\");\n    _placeholderDiv.style.cssText = \"visibility:hidden;height:1px;top:-1px;pointer-events:none;position:relative;clear:both;cursor:grab\";\n    _defaultCursor = _placeholderDiv.style.cursor === \"grab\" ? \"grab\" : \"move\";\n    _isAndroid = nav && nav.userAgent.toLowerCase().indexOf(\"android\") !== -1; //Android handles touch events in an odd way and it's virtually impossible to \"feature test\" so we resort to UA sniffing\n\n    _isTouchDevice = \"ontouchstart\" in _docElement && \"orientation\" in _win || nav && (nav.MaxTouchPoints > 0 || nav.msMaxTouchPoints > 0);\n\n    _addPaddingBR = function () {\n      //this function is in charge of analyzing browser behavior related to padding. It sets the _addPaddingBR to true if the browser doesn't normally factor in the bottom or right padding on the element inside the scrolling area, and it sets _addPaddingLeft to true if it's a browser that requires the extra offset (offsetLeft) to be added to the paddingRight (like Opera).\n      var div = _createElement(\"div\"),\n          child = _createElement(\"div\"),\n          childStyle = child.style,\n          parent = _body,\n          val;\n\n      childStyle.display = \"inline-block\";\n      childStyle.position = \"relative\";\n      div.style.cssText = \"width:90px;height:40px;padding:10px;overflow:auto;visibility:hidden\";\n      div.appendChild(child);\n      parent.appendChild(div);\n      val = child.offsetHeight + 18 > div.scrollHeight; //div.scrollHeight should be child.offsetHeight + 20 because of the 10px of padding on each side, but some browsers ignore one side. We allow a 2px margin of error.\n\n      parent.removeChild(div);\n      return val;\n    }();\n\n    _touchEventLookup = function (types) {\n      //we create an object that makes it easy to translate touch event types into their \"pointer\" counterparts if we're in a browser that uses those instead. Like IE10 uses \"MSPointerDown\" instead of \"touchstart\", for example.\n      var standard = types.split(\",\"),\n          converted = (\"onpointerdown\" in _tempDiv ? \"pointerdown,pointermove,pointerup,pointercancel\" : \"onmspointerdown\" in _tempDiv ? \"MSPointerDown,MSPointerMove,MSPointerUp,MSPointerCancel\" : types).split(\",\"),\n          obj = {},\n          i = 4;\n\n      while (--i > -1) {\n        obj[standard[i]] = converted[i];\n        obj[converted[i]] = standard[i];\n      } //to avoid problems in iOS 9, test to see if the browser supports the \"passive\" option on addEventListener().\n\n\n      try {\n        _docElement.addEventListener(\"test\", null, Object.defineProperty({}, \"passive\", {\n          get: function get() {\n            _supportsPassive = 1;\n          }\n        }));\n      } catch (e) {}\n\n      return obj;\n    }(\"touchstart,touchmove,touchend,touchcancel\");\n\n    _addListener(_doc, \"touchcancel\", _emptyFunc); //some older Android devices intermittently stop dispatching \"touchmove\" events if we don't listen for \"touchcancel\" on the document. Very strange indeed.\n\n\n    _addListener(_win, \"touchmove\", _emptyFunc); //works around Safari bugs that still allow the page to scroll even when we preventDefault() on the touchmove event.\n\n\n    _body && _body.addEventListener(\"touchstart\", _emptyFunc); //works around Safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/\n\n    _addListener(_doc, \"contextmenu\", function () {\n      for (var p in _lookup) {\n        if (_lookup[p].isPressed) {\n          _lookup[p].endDrag();\n        }\n      }\n    });\n\n    gsap = _coreInitted = _getGSAP();\n  }\n\n  if (gsap) {\n    InertiaPlugin = gsap.plugins.inertia;\n\n    _context = gsap.core.context || function () {};\n\n    _checkPrefix = gsap.utils.checkPrefix;\n    _transformProp = _checkPrefix(_transformProp);\n    _transformOriginProp = _checkPrefix(_transformOriginProp);\n    _toArray = gsap.utils.toArray;\n    _getStyleSaver = gsap.core.getStyleSaver;\n    _supports3D = !!_checkPrefix(\"perspective\");\n  } else if (required) {\n    console.warn(\"Please gsap.registerPlugin(Draggable)\");\n  }\n};\n\nvar EventDispatcher = /*#__PURE__*/function () {\n  function EventDispatcher(target) {\n    this._listeners = {};\n    this.target = target || this;\n  }\n\n  var _proto = EventDispatcher.prototype;\n\n  _proto.addEventListener = function addEventListener(type, callback) {\n    var list = this._listeners[type] || (this._listeners[type] = []);\n\n    if (!~list.indexOf(callback)) {\n      list.push(callback);\n    }\n  };\n\n  _proto.removeEventListener = function removeEventListener(type, callback) {\n    var list = this._listeners[type],\n        i = list && list.indexOf(callback);\n    i >= 0 && list.splice(i, 1);\n  };\n\n  _proto.dispatchEvent = function dispatchEvent(type) {\n    var _this = this;\n\n    var result;\n    (this._listeners[type] || []).forEach(function (callback) {\n      return callback.call(_this, {\n        type: type,\n        target: _this.target\n      }) === false && (result = false);\n    });\n    return result; //if any of the callbacks return false, pass that along.\n  };\n\n  return EventDispatcher;\n}();\n\nvar Draggable = /*#__PURE__*/function (_EventDispatcher) {\n  _inheritsLoose(Draggable, _EventDispatcher);\n\n  function Draggable(target, vars) {\n    var _this2;\n\n    _this2 = _EventDispatcher.call(this) || this;\n    _coreInitted || _initCore(1);\n    target = _toArray(target)[0]; //in case the target is a selector object or selector text\n\n    _this2.styles = _getStyleSaver && _getStyleSaver(target, \"transform,left,top\");\n\n    if (!InertiaPlugin) {\n      InertiaPlugin = gsap.plugins.inertia;\n    }\n\n    _this2.vars = vars = _copy(vars || {});\n    _this2.target = target;\n    _this2.x = _this2.y = _this2.rotation = 0;\n    _this2.dragResistance = parseFloat(vars.dragResistance) || 0;\n    _this2.edgeResistance = isNaN(vars.edgeResistance) ? 1 : parseFloat(vars.edgeResistance) || 0;\n    _this2.lockAxis = vars.lockAxis;\n    _this2.autoScroll = vars.autoScroll || 0;\n    _this2.lockedAxis = null;\n    _this2.allowEventDefault = !!vars.allowEventDefault;\n    gsap.getProperty(target, \"x\"); // to ensure that transforms are instantiated.\n\n    var type = (vars.type || \"x,y\").toLowerCase(),\n        xyMode = ~type.indexOf(\"x\") || ~type.indexOf(\"y\"),\n        rotationMode = type.indexOf(\"rotation\") !== -1,\n        xProp = rotationMode ? \"rotation\" : xyMode ? \"x\" : \"left\",\n        yProp = xyMode ? \"y\" : \"top\",\n        allowX = !!(~type.indexOf(\"x\") || ~type.indexOf(\"left\") || type === \"scroll\"),\n        allowY = !!(~type.indexOf(\"y\") || ~type.indexOf(\"top\") || type === \"scroll\"),\n        minimumMovement = vars.minimumMovement || 2,\n        self = _assertThisInitialized(_this2),\n        triggers = _toArray(vars.trigger || vars.handle || target),\n        killProps = {},\n        dragEndTime = 0,\n        checkAutoScrollBounds = false,\n        autoScrollMarginTop = vars.autoScrollMarginTop || 40,\n        autoScrollMarginRight = vars.autoScrollMarginRight || 40,\n        autoScrollMarginBottom = vars.autoScrollMarginBottom || 40,\n        autoScrollMarginLeft = vars.autoScrollMarginLeft || 40,\n        isClickable = vars.clickableTest || _isClickable,\n        clickTime = 0,\n        gsCache = target._gsap || gsap.core.getCache(target),\n        isFixed = _isFixed(target),\n        getPropAsNum = function getPropAsNum(property, unit) {\n      return parseFloat(gsCache.get(target, property, unit));\n    },\n        ownerDoc = target.ownerDocument || _doc,\n        enabled,\n        scrollProxy,\n        startPointerX,\n        startPointerY,\n        startElementX,\n        startElementY,\n        hasBounds,\n        hasDragCallback,\n        hasMoveCallback,\n        maxX,\n        minX,\n        maxY,\n        minY,\n        touch,\n        touchID,\n        rotationOrigin,\n        dirty,\n        old,\n        snapX,\n        snapY,\n        snapXY,\n        isClicking,\n        touchEventTarget,\n        matrix,\n        interrupted,\n        allowNativeTouchScrolling,\n        touchDragAxis,\n        isDispatching,\n        clickDispatch,\n        trustedClickDispatch,\n        isPreventingDefault,\n        innerMatrix,\n        dragged,\n        onContextMenu = function onContextMenu(e) {\n      //used to prevent long-touch from triggering a context menu.\n      // (self.isPressed && e.which < 2) && self.endDrag() // previously ended drag when context menu was triggered, but instead we should just stop propagation and prevent the default event behavior.\n      _preventDefault(e);\n\n      e.stopImmediatePropagation && e.stopImmediatePropagation();\n      return false;\n    },\n        //this method gets called on every tick of TweenLite.ticker which allows us to synchronize the renders to the core engine (which is typically synchronized with the display refresh via requestAnimationFrame). This is an optimization - it's better than applying the values inside the \"mousemove\" or \"touchmove\" event handler which may get called many times inbetween refreshes.\n    render = function render(suppressEvents) {\n      if (self.autoScroll && self.isDragging && (checkAutoScrollBounds || dirty)) {\n        var e = target,\n            autoScrollFactor = self.autoScroll * 15,\n            //multiplying by 15 just gives us a better \"feel\" speed-wise.\n        parent,\n            isRoot,\n            rect,\n            pointerX,\n            pointerY,\n            changeX,\n            changeY,\n            gap;\n        checkAutoScrollBounds = false;\n        _windowProxy.scrollTop = _win.pageYOffset != null ? _win.pageYOffset : ownerDoc.documentElement.scrollTop != null ? ownerDoc.documentElement.scrollTop : ownerDoc.body.scrollTop;\n        _windowProxy.scrollLeft = _win.pageXOffset != null ? _win.pageXOffset : ownerDoc.documentElement.scrollLeft != null ? ownerDoc.documentElement.scrollLeft : ownerDoc.body.scrollLeft;\n        pointerX = self.pointerX - _windowProxy.scrollLeft;\n        pointerY = self.pointerY - _windowProxy.scrollTop;\n\n        while (e && !isRoot) {\n          //walk up the chain and sense wherever the pointer is within 40px of an edge that's scrollable.\n          isRoot = _isRoot(e.parentNode);\n          parent = isRoot ? _windowProxy : e.parentNode;\n          rect = isRoot ? {\n            bottom: Math.max(_docElement.clientHeight, _win.innerHeight || 0),\n            right: Math.max(_docElement.clientWidth, _win.innerWidth || 0),\n            left: 0,\n            top: 0\n          } : parent.getBoundingClientRect();\n          changeX = changeY = 0;\n\n          if (allowY) {\n            gap = parent._gsMaxScrollY - parent.scrollTop;\n\n            if (gap < 0) {\n              changeY = gap;\n            } else if (pointerY > rect.bottom - autoScrollMarginBottom && gap) {\n              checkAutoScrollBounds = true;\n              changeY = Math.min(gap, autoScrollFactor * (1 - Math.max(0, rect.bottom - pointerY) / autoScrollMarginBottom) | 0);\n            } else if (pointerY < rect.top + autoScrollMarginTop && parent.scrollTop) {\n              checkAutoScrollBounds = true;\n              changeY = -Math.min(parent.scrollTop, autoScrollFactor * (1 - Math.max(0, pointerY - rect.top) / autoScrollMarginTop) | 0);\n            }\n\n            if (changeY) {\n              parent.scrollTop += changeY;\n            }\n          }\n\n          if (allowX) {\n            gap = parent._gsMaxScrollX - parent.scrollLeft;\n\n            if (gap < 0) {\n              changeX = gap;\n            } else if (pointerX > rect.right - autoScrollMarginRight && gap) {\n              checkAutoScrollBounds = true;\n              changeX = Math.min(gap, autoScrollFactor * (1 - Math.max(0, rect.right - pointerX) / autoScrollMarginRight) | 0);\n            } else if (pointerX < rect.left + autoScrollMarginLeft && parent.scrollLeft) {\n              checkAutoScrollBounds = true;\n              changeX = -Math.min(parent.scrollLeft, autoScrollFactor * (1 - Math.max(0, pointerX - rect.left) / autoScrollMarginLeft) | 0);\n            }\n\n            if (changeX) {\n              parent.scrollLeft += changeX;\n            }\n          }\n\n          if (isRoot && (changeX || changeY)) {\n            _win.scrollTo(parent.scrollLeft, parent.scrollTop);\n\n            setPointerPosition(self.pointerX + changeX, self.pointerY + changeY);\n          }\n\n          e = parent;\n        }\n      }\n\n      if (dirty) {\n        var x = self.x,\n            y = self.y;\n\n        if (rotationMode) {\n          self.deltaX = x - parseFloat(gsCache.rotation);\n          self.rotation = x;\n          gsCache.rotation = x + \"deg\";\n          gsCache.renderTransform(1, gsCache);\n        } else {\n          if (scrollProxy) {\n            if (allowY) {\n              self.deltaY = y - scrollProxy.top();\n              scrollProxy.top(y);\n            }\n\n            if (allowX) {\n              self.deltaX = x - scrollProxy.left();\n              scrollProxy.left(x);\n            }\n          } else if (xyMode) {\n            if (allowY) {\n              self.deltaY = y - parseFloat(gsCache.y);\n              gsCache.y = y + \"px\";\n            }\n\n            if (allowX) {\n              self.deltaX = x - parseFloat(gsCache.x);\n              gsCache.x = x + \"px\";\n            }\n\n            gsCache.renderTransform(1, gsCache);\n          } else {\n            if (allowY) {\n              self.deltaY = y - parseFloat(target.style.top || 0);\n              target.style.top = y + \"px\";\n            }\n\n            if (allowX) {\n              self.deltaX = x - parseFloat(target.style.left || 0);\n              target.style.left = x + \"px\";\n            }\n          }\n        }\n\n        if (hasDragCallback && !suppressEvents && !isDispatching) {\n          isDispatching = true; //in case onDrag has an update() call (avoid endless loop)\n\n          if (_dispatchEvent(self, \"drag\", \"onDrag\") === false) {\n            if (allowX) {\n              self.x -= self.deltaX;\n            }\n\n            if (allowY) {\n              self.y -= self.deltaY;\n            }\n\n            render(true);\n          }\n\n          isDispatching = false;\n        }\n      }\n\n      dirty = false;\n    },\n        //copies the x/y from the element (whether that be transforms, top/left, or ScrollProxy's top/left) to the Draggable's x and y (and rotation if necessary) properties so that they reflect reality and it also (optionally) applies any snapping necessary. This is used by the InertiaPlugin tween in an onUpdate to ensure things are synced and snapped.\n    syncXY = function syncXY(skipOnUpdate, skipSnap) {\n      var x = self.x,\n          y = self.y,\n          snappedValue,\n          cs;\n\n      if (!target._gsap) {\n        //just in case the _gsap cache got wiped, like if the user called clearProps on the transform or something (very rare).\n        gsCache = gsap.core.getCache(target);\n      }\n\n      gsCache.uncache && gsap.getProperty(target, \"x\"); // trigger a re-cache\n\n      if (xyMode) {\n        self.x = parseFloat(gsCache.x);\n        self.y = parseFloat(gsCache.y);\n      } else if (rotationMode) {\n        self.x = self.rotation = parseFloat(gsCache.rotation);\n      } else if (scrollProxy) {\n        self.y = scrollProxy.top();\n        self.x = scrollProxy.left();\n      } else {\n        self.y = parseFloat(target.style.top || (cs = _getComputedStyle(target)) && cs.top) || 0;\n        self.x = parseFloat(target.style.left || (cs || {}).left) || 0;\n      }\n\n      if ((snapX || snapY || snapXY) && !skipSnap && (self.isDragging || self.isThrowing)) {\n        if (snapXY) {\n          _temp1.x = self.x;\n          _temp1.y = self.y;\n          snappedValue = snapXY(_temp1);\n\n          if (snappedValue.x !== self.x) {\n            self.x = snappedValue.x;\n            dirty = true;\n          }\n\n          if (snappedValue.y !== self.y) {\n            self.y = snappedValue.y;\n            dirty = true;\n          }\n        }\n\n        if (snapX) {\n          snappedValue = snapX(self.x);\n\n          if (snappedValue !== self.x) {\n            self.x = snappedValue;\n\n            if (rotationMode) {\n              self.rotation = snappedValue;\n            }\n\n            dirty = true;\n          }\n        }\n\n        if (snapY) {\n          snappedValue = snapY(self.y);\n\n          if (snappedValue !== self.y) {\n            self.y = snappedValue;\n          }\n\n          dirty = true;\n        }\n      }\n\n      dirty && render(true);\n\n      if (!skipOnUpdate) {\n        self.deltaX = self.x - x;\n        self.deltaY = self.y - y;\n\n        _dispatchEvent(self, \"throwupdate\", \"onThrowUpdate\");\n      }\n    },\n        buildSnapFunc = function buildSnapFunc(snap, min, max, factor) {\n      if (min == null) {\n        min = -_bigNum;\n      }\n\n      if (max == null) {\n        max = _bigNum;\n      }\n\n      if (_isFunction(snap)) {\n        return function (n) {\n          var edgeTolerance = !self.isPressed ? 1 : 1 - self.edgeResistance; //if we're tweening, disable the edgeTolerance because it's already factored into the tweening values (we don't want to apply it multiple times)\n\n          return snap.call(self, (n > max ? max + (n - max) * edgeTolerance : n < min ? min + (n - min) * edgeTolerance : n) * factor) * factor;\n        };\n      }\n\n      if (_isArray(snap)) {\n        return function (n) {\n          var i = snap.length,\n              closest = 0,\n              absDif = _bigNum,\n              val,\n              dif;\n\n          while (--i > -1) {\n            val = snap[i];\n            dif = val - n;\n\n            if (dif < 0) {\n              dif = -dif;\n            }\n\n            if (dif < absDif && val >= min && val <= max) {\n              closest = i;\n              absDif = dif;\n            }\n          }\n\n          return snap[closest];\n        };\n      }\n\n      return isNaN(snap) ? function (n) {\n        return n;\n      } : function () {\n        return snap * factor;\n      };\n    },\n        buildPointSnapFunc = function buildPointSnapFunc(snap, minX, maxX, minY, maxY, radius, factor) {\n      radius = radius && radius < _bigNum ? radius * radius : _bigNum; //so we don't have to Math.sqrt() in the functions. Performance optimization.\n\n      if (_isFunction(snap)) {\n        return function (point) {\n          var edgeTolerance = !self.isPressed ? 1 : 1 - self.edgeResistance,\n              x = point.x,\n              y = point.y,\n              result,\n              dx,\n              dy; //if we're tweening, disable the edgeTolerance because it's already factored into the tweening values (we don't want to apply it multiple times)\n\n          point.x = x = x > maxX ? maxX + (x - maxX) * edgeTolerance : x < minX ? minX + (x - minX) * edgeTolerance : x;\n          point.y = y = y > maxY ? maxY + (y - maxY) * edgeTolerance : y < minY ? minY + (y - minY) * edgeTolerance : y;\n          result = snap.call(self, point);\n\n          if (result !== point) {\n            point.x = result.x;\n            point.y = result.y;\n          }\n\n          if (factor !== 1) {\n            point.x *= factor;\n            point.y *= factor;\n          }\n\n          if (radius < _bigNum) {\n            dx = point.x - x;\n            dy = point.y - y;\n\n            if (dx * dx + dy * dy > radius) {\n              point.x = x;\n              point.y = y;\n            }\n          }\n\n          return point;\n        };\n      }\n\n      if (_isArray(snap)) {\n        return function (p) {\n          var i = snap.length,\n              closest = 0,\n              minDist = _bigNum,\n              x,\n              y,\n              point,\n              dist;\n\n          while (--i > -1) {\n            point = snap[i];\n            x = point.x - p.x;\n            y = point.y - p.y;\n            dist = x * x + y * y;\n\n            if (dist < minDist) {\n              closest = i;\n              minDist = dist;\n            }\n          }\n\n          return minDist <= radius ? snap[closest] : p;\n        };\n      }\n\n      return function (n) {\n        return n;\n      };\n    },\n        calculateBounds = function calculateBounds() {\n      var bounds, targetBounds, snap, snapIsRaw;\n      hasBounds = false;\n\n      if (scrollProxy) {\n        scrollProxy.calibrate();\n        self.minX = minX = -scrollProxy.maxScrollLeft();\n        self.minY = minY = -scrollProxy.maxScrollTop();\n        self.maxX = maxX = self.maxY = maxY = 0;\n        hasBounds = true;\n      } else if (!!vars.bounds) {\n        bounds = _getBounds(vars.bounds, target.parentNode); //could be a selector/jQuery object or a DOM element or a generic object like {top:0, left:100, width:1000, height:800} or {minX:100, maxX:1100, minY:0, maxY:800}\n\n        if (rotationMode) {\n          self.minX = minX = bounds.left;\n          self.maxX = maxX = bounds.left + bounds.width;\n          self.minY = minY = self.maxY = maxY = 0;\n        } else if (!_isUndefined(vars.bounds.maxX) || !_isUndefined(vars.bounds.maxY)) {\n          bounds = vars.bounds;\n          self.minX = minX = bounds.minX;\n          self.minY = minY = bounds.minY;\n          self.maxX = maxX = bounds.maxX;\n          self.maxY = maxY = bounds.maxY;\n        } else {\n          targetBounds = _getBounds(target, target.parentNode);\n          self.minX = minX = Math.round(getPropAsNum(xProp, \"px\") + bounds.left - targetBounds.left);\n          self.minY = minY = Math.round(getPropAsNum(yProp, \"px\") + bounds.top - targetBounds.top);\n          self.maxX = maxX = Math.round(minX + (bounds.width - targetBounds.width));\n          self.maxY = maxY = Math.round(minY + (bounds.height - targetBounds.height));\n        }\n\n        if (minX > maxX) {\n          self.minX = maxX;\n          self.maxX = maxX = minX;\n          minX = self.minX;\n        }\n\n        if (minY > maxY) {\n          self.minY = maxY;\n          self.maxY = maxY = minY;\n          minY = self.minY;\n        }\n\n        if (rotationMode) {\n          self.minRotation = minX;\n          self.maxRotation = maxX;\n        }\n\n        hasBounds = true;\n      }\n\n      if (vars.liveSnap) {\n        snap = vars.liveSnap === true ? vars.snap || {} : vars.liveSnap;\n        snapIsRaw = _isArray(snap) || _isFunction(snap);\n\n        if (rotationMode) {\n          snapX = buildSnapFunc(snapIsRaw ? snap : snap.rotation, minX, maxX, 1);\n          snapY = null;\n        } else {\n          if (snap.points) {\n            snapXY = buildPointSnapFunc(snapIsRaw ? snap : snap.points, minX, maxX, minY, maxY, snap.radius, scrollProxy ? -1 : 1);\n          } else {\n            if (allowX) {\n              snapX = buildSnapFunc(snapIsRaw ? snap : snap.x || snap.left || snap.scrollLeft, minX, maxX, scrollProxy ? -1 : 1);\n            }\n\n            if (allowY) {\n              snapY = buildSnapFunc(snapIsRaw ? snap : snap.y || snap.top || snap.scrollTop, minY, maxY, scrollProxy ? -1 : 1);\n            }\n          }\n        }\n      }\n    },\n        onThrowComplete = function onThrowComplete() {\n      self.isThrowing = false;\n\n      _dispatchEvent(self, \"throwcomplete\", \"onThrowComplete\");\n    },\n        onThrowInterrupt = function onThrowInterrupt() {\n      self.isThrowing = false;\n    },\n        animate = function animate(inertia, forceZeroVelocity) {\n      var snap, snapIsRaw, tween, overshootTolerance;\n\n      if (inertia && InertiaPlugin) {\n        if (inertia === true) {\n          snap = vars.snap || vars.liveSnap || {};\n          snapIsRaw = _isArray(snap) || _isFunction(snap);\n          inertia = {\n            resistance: (vars.throwResistance || vars.resistance || 1000) / (rotationMode ? 10 : 1)\n          };\n\n          if (rotationMode) {\n            inertia.rotation = _parseInertia(self, snapIsRaw ? snap : snap.rotation, maxX, minX, 1, forceZeroVelocity);\n          } else {\n            if (allowX) {\n              inertia[xProp] = _parseInertia(self, snapIsRaw ? snap : snap.points || snap.x || snap.left, maxX, minX, scrollProxy ? -1 : 1, forceZeroVelocity || self.lockedAxis === \"x\");\n            }\n\n            if (allowY) {\n              inertia[yProp] = _parseInertia(self, snapIsRaw ? snap : snap.points || snap.y || snap.top, maxY, minY, scrollProxy ? -1 : 1, forceZeroVelocity || self.lockedAxis === \"y\");\n            }\n\n            if (snap.points || _isArray(snap) && _isObject(snap[0])) {\n              inertia.linkedProps = xProp + \",\" + yProp;\n              inertia.radius = snap.radius; //note: we also disable liveSnapping while throwing if there's a \"radius\" defined, otherwise it looks weird to have the item thrown past a snapping point but live-snapping mid-tween. We do this by altering the onUpdateParams so that \"skipSnap\" parameter is true for syncXY.\n            }\n          }\n        }\n\n        self.isThrowing = true;\n        overshootTolerance = !isNaN(vars.overshootTolerance) ? vars.overshootTolerance : vars.edgeResistance === 1 ? 0 : 1 - self.edgeResistance + 0.2;\n\n        if (!inertia.duration) {\n          inertia.duration = {\n            max: Math.max(vars.minDuration || 0, \"maxDuration\" in vars ? vars.maxDuration : 2),\n            min: !isNaN(vars.minDuration) ? vars.minDuration : overshootTolerance === 0 || _isObject(inertia) && inertia.resistance > 1000 ? 0 : 0.5,\n            overshoot: overshootTolerance\n          };\n        }\n\n        self.tween = tween = gsap.to(scrollProxy || target, {\n          inertia: inertia,\n          data: \"_draggable\",\n          inherit: false,\n          onComplete: onThrowComplete,\n          onInterrupt: onThrowInterrupt,\n          onUpdate: vars.fastMode ? _dispatchEvent : syncXY,\n          onUpdateParams: vars.fastMode ? [self, \"onthrowupdate\", \"onThrowUpdate\"] : snap && snap.radius ? [false, true] : []\n        });\n\n        if (!vars.fastMode) {\n          if (scrollProxy) {\n            scrollProxy._skip = true; // Microsoft browsers have a bug that causes them to briefly render the position incorrectly (it flashes to the end state when we seek() the tween even though we jump right back to the current position, and this only seems to happen when we're affecting both top and left), so we set a _suspendTransforms flag to prevent it from actually applying the values in the ScrollProxy.\n          }\n\n          tween.render(1e9, true, true); // force to the end. Remember, the duration will likely change upon initting because that's when InertiaPlugin calculates it.\n\n          syncXY(true, true);\n          self.endX = self.x;\n          self.endY = self.y;\n\n          if (rotationMode) {\n            self.endRotation = self.x;\n          }\n\n          tween.play(0);\n          syncXY(true, true);\n\n          if (scrollProxy) {\n            scrollProxy._skip = false; //Microsoft browsers have a bug that causes them to briefly render the position incorrectly (it flashes to the end state when we seek() the tween even though we jump right back to the current position, and this only seems to happen when we're affecting both top and left), so we set a _suspendTransforms flag to prevent it from actually applying the values in the ScrollProxy.\n          }\n        }\n      } else if (hasBounds) {\n        self.applyBounds();\n      }\n    },\n        updateMatrix = function updateMatrix(shiftStart) {\n      var start = matrix,\n          p;\n      matrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(target.parentNode, true);\n\n      if (shiftStart && self.isPressed && !matrix.equals(start || new _utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.Matrix2D())) {\n        //if the matrix changes WHILE the element is pressed, we must adjust the startPointerX and startPointerY accordingly, so we invert the original matrix and figure out where the pointerX and pointerY were in the global space, then apply the new matrix to get the updated coordinates.\n        p = start.inverse().apply({\n          x: startPointerX,\n          y: startPointerY\n        });\n        matrix.apply(p, p);\n        startPointerX = p.x;\n        startPointerY = p.y;\n      }\n\n      if (matrix.equals(_identityMatrix)) {\n        //if there are no transforms, we can optimize performance by not factoring in the matrix\n        matrix = null;\n      }\n    },\n        recordStartPositions = function recordStartPositions() {\n      var edgeTolerance = 1 - self.edgeResistance,\n          offsetX = isFixed ? _getDocScrollLeft(ownerDoc) : 0,\n          offsetY = isFixed ? _getDocScrollTop(ownerDoc) : 0,\n          parsedOrigin,\n          x,\n          y;\n\n      if (xyMode) {\n        // in case the user set it as a different unit, like animating the x to \"100%\". We must convert it back to px!\n        gsCache.x = getPropAsNum(xProp, \"px\") + \"px\";\n        gsCache.y = getPropAsNum(yProp, \"px\") + \"px\";\n        gsCache.renderTransform();\n      }\n\n      updateMatrix(false);\n      _point1.x = self.pointerX - offsetX;\n      _point1.y = self.pointerY - offsetY;\n      matrix && matrix.apply(_point1, _point1);\n      startPointerX = _point1.x; //translate to local coordinate system\n\n      startPointerY = _point1.y;\n\n      if (dirty) {\n        setPointerPosition(self.pointerX, self.pointerY);\n        render(true);\n      }\n\n      innerMatrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(target);\n\n      if (scrollProxy) {\n        calculateBounds();\n        startElementY = scrollProxy.top();\n        startElementX = scrollProxy.left();\n      } else {\n        //if the element is in the process of tweening, don't force snapping to occur because it could make it jump. Imagine the user throwing, then before it's done, clicking on the element in its inbetween state.\n        if (isTweening()) {\n          syncXY(true, true);\n          calculateBounds();\n        } else {\n          self.applyBounds();\n        }\n\n        if (rotationMode) {\n          parsedOrigin = target.ownerSVGElement ? [gsCache.xOrigin - target.getBBox().x, gsCache.yOrigin - target.getBBox().y] : (_getComputedStyle(target)[_transformOriginProp] || \"0 0\").split(\" \");\n          rotationOrigin = self.rotationOrigin = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(target).apply({\n            x: parseFloat(parsedOrigin[0]) || 0,\n            y: parseFloat(parsedOrigin[1]) || 0\n          });\n          syncXY(true, true);\n          x = self.pointerX - rotationOrigin.x - offsetX;\n          y = rotationOrigin.y - self.pointerY + offsetY;\n          startElementX = self.x; //starting rotation (x always refers to rotation in type:\"rotation\", measured in degrees)\n\n          startElementY = self.y = Math.atan2(y, x) * _RAD2DEG;\n        } else {\n          //parent = !isFixed && target.parentNode;\n          //startScrollTop = parent ? parent.scrollTop || 0 : 0;\n          //startScrollLeft = parent ? parent.scrollLeft || 0 : 0;\n          startElementY = getPropAsNum(yProp, \"px\"); //record the starting top and left values so that we can just add the mouse's movement to them later.\n\n          startElementX = getPropAsNum(xProp, \"px\");\n        }\n      }\n\n      if (hasBounds && edgeTolerance) {\n        if (startElementX > maxX) {\n          startElementX = maxX + (startElementX - maxX) / edgeTolerance;\n        } else if (startElementX < minX) {\n          startElementX = minX - (minX - startElementX) / edgeTolerance;\n        }\n\n        if (!rotationMode) {\n          if (startElementY > maxY) {\n            startElementY = maxY + (startElementY - maxY) / edgeTolerance;\n          } else if (startElementY < minY) {\n            startElementY = minY - (minY - startElementY) / edgeTolerance;\n          }\n        }\n      }\n\n      self.startX = startElementX = _round(startElementX);\n      self.startY = startElementY = _round(startElementY);\n    },\n        isTweening = function isTweening() {\n      return self.tween && self.tween.isActive();\n    },\n        removePlaceholder = function removePlaceholder() {\n      if (_placeholderDiv.parentNode && !isTweening() && !self.isDragging) {\n        //_placeholderDiv just props open auto-scrolling containers so they don't collapse as the user drags left/up. We remove it after dragging (and throwing, if necessary) finishes.\n        _placeholderDiv.parentNode.removeChild(_placeholderDiv);\n      }\n    },\n        //called when the mouse is pressed (or touch starts)\n    onPress = function onPress(e, force) {\n      var i;\n\n      if (!enabled || self.isPressed || !e || (e.type === \"mousedown\" || e.type === \"pointerdown\") && !force && _getTime() - clickTime < 30 && _touchEventLookup[self.pointerEvent.type]) {\n        //when we DON'T preventDefault() in order to accommodate touch-scrolling and the user just taps, many browsers also fire a mousedown/mouseup sequence AFTER the touchstart/touchend sequence, thus it'd result in two quick \"click\" events being dispatched. This line senses that condition and halts it on the subsequent mousedown.\n        isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchstart, pointerdown, mousedown. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.\n\n        return;\n      }\n\n      interrupted = isTweening();\n      dragged = false; // we need to track whether or not it was dragged in this interaction so that if, for example, the user calls .endDrag() to FORCE it to stop and then they keep the mouse pressed down and eventually release, that would normally cause an onClick but we have to skip it in that case if there was dragging that occurred.\n\n      self.pointerEvent = e;\n\n      if (_touchEventLookup[e.type]) {\n        //note: on iOS, BOTH touchmove and mousemove are dispatched, but the mousemove has pageY and pageX of 0 which would mess up the calculations and needlessly hurt performance.\n        touchEventTarget = ~e.type.indexOf(\"touch\") ? e.currentTarget || e.target : ownerDoc; //pointer-based touches (for Microsoft browsers) don't remain locked to the original target like other browsers, so we must use the document instead. The event type would be \"MSPointerDown\" or \"pointerdown\".\n\n        _addListener(touchEventTarget, \"touchend\", onRelease);\n\n        _addListener(touchEventTarget, \"touchmove\", onMove); // possible future change if PointerEvents are more standardized: https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture\n\n\n        _addListener(touchEventTarget, \"touchcancel\", onRelease);\n\n        _addListener(ownerDoc, \"touchstart\", _onMultiTouchDocument);\n      } else {\n        touchEventTarget = null;\n\n        _addListener(ownerDoc, \"mousemove\", onMove); //attach these to the document instead of the box itself so that if the user's mouse moves too quickly (and off of the box), things still work.\n\n      }\n\n      touchDragAxis = null;\n\n      if (!_supportsPointer || !touchEventTarget) {\n        _addListener(ownerDoc, \"mouseup\", onRelease);\n\n        e && e.target && _addListener(e.target, \"mouseup\", onRelease); //we also have to listen directly on the element because some browsers don't bubble up the event to the _doc on elements with contentEditable=\"true\"\n      }\n\n      isClicking = isClickable.call(self, e.target) && vars.dragClickables === false && !force;\n\n      if (isClicking) {\n        _addListener(e.target, \"change\", onRelease); //in some browsers, when you mousedown on a <select> element, no mouseup gets dispatched! So we listen for a \"change\" event instead.\n\n\n        _dispatchEvent(self, \"pressInit\", \"onPressInit\");\n\n        _dispatchEvent(self, \"press\", \"onPress\");\n\n        _setSelectable(triggers, true); //accommodates things like inputs and elements with contentEditable=\"true\" (otherwise user couldn't drag to select text)\n\n\n        isPreventingDefault = false;\n        return;\n      }\n\n      allowNativeTouchScrolling = !touchEventTarget || allowX === allowY || self.vars.allowNativeTouchScrolling === false || self.vars.allowContextMenu && e && (e.ctrlKey || e.which > 2) ? false : allowX ? \"y\" : \"x\"; //note: in Chrome, right-clicking (for a context menu) fires onPress and it doesn't have the event.which set properly, so we must look for event.ctrlKey. If the user wants to allow context menus we should of course sense it here and not allow native touch scrolling.\n\n      isPreventingDefault = !allowNativeTouchScrolling && !self.allowEventDefault;\n\n      if (isPreventingDefault) {\n        _preventDefault(e);\n\n        _addListener(_win, \"touchforcechange\", _preventDefault); //works around safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/\n\n      }\n\n      if (e.changedTouches) {\n        //touch events store the data slightly differently\n        e = touch = e.changedTouches[0];\n        touchID = e.identifier;\n      } else if (e.pointerId) {\n        touchID = e.pointerId; //for some Microsoft browsers\n      } else {\n        touch = touchID = null;\n      }\n\n      _dragCount++;\n\n      _addToRenderQueue(render); //causes the Draggable to render on each \"tick\" of gsap.ticker (performance optimization - updating values in a mousemove can cause them to happen too frequently, like multiple times between frame redraws which is wasteful, and it also prevents values from updating properly in IE8)\n\n\n      startPointerY = self.pointerY = e.pageY; //record the starting x and y so that we can calculate the movement from the original in _onMouseMove\n\n      startPointerX = self.pointerX = e.pageX;\n\n      _dispatchEvent(self, \"pressInit\", \"onPressInit\");\n\n      if (allowNativeTouchScrolling || self.autoScroll) {\n        _recordMaxScrolls(target.parentNode);\n      }\n\n      if (target.parentNode && self.autoScroll && !scrollProxy && !rotationMode && target.parentNode._gsMaxScrollX && !_placeholderDiv.parentNode && !target.getBBox) {\n        //add a placeholder div to prevent the parent container from collapsing when the user drags the element left.\n        _placeholderDiv.style.width = target.parentNode.scrollWidth + \"px\";\n        target.parentNode.appendChild(_placeholderDiv);\n      }\n\n      recordStartPositions();\n      self.tween && self.tween.kill();\n      self.isThrowing = false;\n      gsap.killTweensOf(scrollProxy || target, killProps, true); //in case the user tries to drag it before the last tween is done.\n\n      scrollProxy && gsap.killTweensOf(target, {\n        scrollTo: 1\n      }, true); //just in case the original target's scroll position is being tweened somewhere else.\n\n      self.tween = self.lockedAxis = null;\n\n      if (vars.zIndexBoost || !rotationMode && !scrollProxy && vars.zIndexBoost !== false) {\n        target.style.zIndex = Draggable.zIndex++;\n      }\n\n      self.isPressed = true;\n      hasDragCallback = !!(vars.onDrag || self._listeners.drag);\n      hasMoveCallback = !!(vars.onMove || self._listeners.move);\n\n      if (vars.cursor !== false || vars.activeCursor) {\n        i = triggers.length;\n\n        while (--i > -1) {\n          gsap.set(triggers[i], {\n            cursor: vars.activeCursor || vars.cursor || (_defaultCursor === \"grab\" ? \"grabbing\" : _defaultCursor)\n          });\n        }\n      }\n\n      _dispatchEvent(self, \"press\", \"onPress\");\n    },\n        //called every time the mouse/touch moves\n    onMove = function onMove(e) {\n      var originalEvent = e,\n          touches,\n          pointerX,\n          pointerY,\n          i,\n          dx,\n          dy;\n\n      if (!enabled || _isMultiTouching || !self.isPressed || !e) {\n        isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchmove, pointermove, mousemove. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.\n\n        return;\n      }\n\n      self.pointerEvent = e;\n      touches = e.changedTouches;\n\n      if (touches) {\n        //touch events store the data slightly differently\n        e = touches[0];\n\n        if (e !== touch && e.identifier !== touchID) {\n          //Usually changedTouches[0] will be what we're looking for, but in case it's not, look through the rest of the array...(and Android browsers don't reuse the event like iOS)\n          i = touches.length;\n\n          while (--i > -1 && (e = touches[i]).identifier !== touchID && e.target !== target) {} // Some Android devices dispatch a touchstart AND pointerdown initially, and then only pointermove thus the touchID may not match because it was grabbed from the touchstart event whereas the pointer event is the one that the browser dispatches for move, so if the event target matches this Draggable's target, let it through.\n\n\n          if (i < 0) {\n            return;\n          }\n        }\n      } else if (e.pointerId && touchID && e.pointerId !== touchID) {\n        //for some Microsoft browsers, we must attach the listener to the doc rather than the trigger so that when the finger moves outside the bounds of the trigger, things still work. So if the event we're receiving has a pointerId that doesn't match the touchID, ignore it (for multi-touch)\n        return;\n      }\n\n      if (touchEventTarget && allowNativeTouchScrolling && !touchDragAxis) {\n        //Android browsers force us to decide on the first \"touchmove\" event if we should allow the default (scrolling) behavior or preventDefault(). Otherwise, a \"touchcancel\" will be fired and then no \"touchmove\" or \"touchend\" will fire during the scrolling (no good).\n        _point1.x = e.pageX - (isFixed ? _getDocScrollLeft(ownerDoc) : 0);\n        _point1.y = e.pageY - (isFixed ? _getDocScrollTop(ownerDoc) : 0);\n        matrix && matrix.apply(_point1, _point1);\n        pointerX = _point1.x;\n        pointerY = _point1.y;\n        dx = Math.abs(pointerX - startPointerX);\n        dy = Math.abs(pointerY - startPointerY);\n\n        if (dx !== dy && (dx > minimumMovement || dy > minimumMovement) || _isAndroid && allowNativeTouchScrolling === touchDragAxis) {\n          touchDragAxis = dx > dy && allowX ? \"x\" : \"y\";\n\n          if (allowNativeTouchScrolling && touchDragAxis !== allowNativeTouchScrolling) {\n            _addListener(_win, \"touchforcechange\", _preventDefault); // prevents native touch scrolling from taking over if the user started dragging in the other direction in iOS Safari\n\n          }\n\n          if (self.vars.lockAxisOnTouchScroll !== false && allowX && allowY) {\n            self.lockedAxis = touchDragAxis === \"x\" ? \"y\" : \"x\";\n            _isFunction(self.vars.onLockAxis) && self.vars.onLockAxis.call(self, originalEvent);\n          }\n\n          if (_isAndroid && allowNativeTouchScrolling === touchDragAxis) {\n            onRelease(originalEvent);\n            return;\n          }\n        }\n      }\n\n      if (!self.allowEventDefault && (!allowNativeTouchScrolling || touchDragAxis && allowNativeTouchScrolling !== touchDragAxis) && originalEvent.cancelable !== false) {\n        _preventDefault(originalEvent);\n\n        isPreventingDefault = true;\n      } else if (isPreventingDefault) {\n        isPreventingDefault = false;\n      }\n\n      if (self.autoScroll) {\n        checkAutoScrollBounds = true;\n      }\n\n      setPointerPosition(e.pageX, e.pageY, hasMoveCallback);\n    },\n        setPointerPosition = function setPointerPosition(pointerX, pointerY, invokeOnMove) {\n      var dragTolerance = 1 - self.dragResistance,\n          edgeTolerance = 1 - self.edgeResistance,\n          prevPointerX = self.pointerX,\n          prevPointerY = self.pointerY,\n          prevStartElementY = startElementY,\n          prevX = self.x,\n          prevY = self.y,\n          prevEndX = self.endX,\n          prevEndY = self.endY,\n          prevEndRotation = self.endRotation,\n          prevDirty = dirty,\n          xChange,\n          yChange,\n          x,\n          y,\n          dif,\n          temp;\n      self.pointerX = pointerX;\n      self.pointerY = pointerY;\n\n      if (isFixed) {\n        pointerX -= _getDocScrollLeft(ownerDoc);\n        pointerY -= _getDocScrollTop(ownerDoc);\n      }\n\n      if (rotationMode) {\n        y = Math.atan2(rotationOrigin.y - pointerY, pointerX - rotationOrigin.x) * _RAD2DEG;\n        dif = self.y - y;\n\n        if (dif > 180) {\n          startElementY -= 360;\n          self.y = y;\n        } else if (dif < -180) {\n          startElementY += 360;\n          self.y = y;\n        }\n\n        if (self.x !== startElementX || Math.max(Math.abs(startPointerX - pointerX), Math.abs(startPointerY - pointerY)) > minimumMovement) {\n          self.y = y;\n          x = startElementX + (startElementY - y) * dragTolerance;\n        } else {\n          x = startElementX;\n        }\n      } else {\n        if (matrix) {\n          temp = pointerX * matrix.a + pointerY * matrix.c + matrix.e;\n          pointerY = pointerX * matrix.b + pointerY * matrix.d + matrix.f;\n          pointerX = temp;\n        }\n\n        yChange = pointerY - startPointerY;\n        xChange = pointerX - startPointerX;\n\n        if (yChange < minimumMovement && yChange > -minimumMovement) {\n          yChange = 0;\n        }\n\n        if (xChange < minimumMovement && xChange > -minimumMovement) {\n          xChange = 0;\n        }\n\n        if ((self.lockAxis || self.lockedAxis) && (xChange || yChange)) {\n          temp = self.lockedAxis;\n\n          if (!temp) {\n            self.lockedAxis = temp = allowX && Math.abs(xChange) > Math.abs(yChange) ? \"y\" : allowY ? \"x\" : null;\n\n            if (temp && _isFunction(self.vars.onLockAxis)) {\n              self.vars.onLockAxis.call(self, self.pointerEvent);\n            }\n          }\n\n          if (temp === \"y\") {\n            yChange = 0;\n          } else if (temp === \"x\") {\n            xChange = 0;\n          }\n        }\n\n        x = _round(startElementX + xChange * dragTolerance);\n        y = _round(startElementY + yChange * dragTolerance);\n      }\n\n      if ((snapX || snapY || snapXY) && (self.x !== x || self.y !== y && !rotationMode)) {\n        if (snapXY) {\n          _temp1.x = x;\n          _temp1.y = y;\n          temp = snapXY(_temp1);\n          x = _round(temp.x);\n          y = _round(temp.y);\n        }\n\n        if (snapX) {\n          x = _round(snapX(x));\n        }\n\n        if (snapY) {\n          y = _round(snapY(y));\n        }\n      }\n\n      if (hasBounds) {\n        if (x > maxX) {\n          x = maxX + Math.round((x - maxX) * edgeTolerance);\n        } else if (x < minX) {\n          x = minX + Math.round((x - minX) * edgeTolerance);\n        }\n\n        if (!rotationMode) {\n          if (y > maxY) {\n            y = Math.round(maxY + (y - maxY) * edgeTolerance);\n          } else if (y < minY) {\n            y = Math.round(minY + (y - minY) * edgeTolerance);\n          }\n        }\n      }\n\n      if (self.x !== x || self.y !== y && !rotationMode) {\n        if (rotationMode) {\n          self.endRotation = self.x = self.endX = x;\n          dirty = true;\n        } else {\n          if (allowY) {\n            self.y = self.endY = y;\n            dirty = true; //a flag that indicates we need to render the target next time the TweenLite.ticker dispatches a \"tick\" event (typically on a requestAnimationFrame) - this is a performance optimization (we shouldn't render on every move because sometimes many move events can get dispatched between screen refreshes, and that'd be wasteful to render every time)\n          }\n\n          if (allowX) {\n            self.x = self.endX = x;\n            dirty = true;\n          }\n        }\n\n        if (!invokeOnMove || _dispatchEvent(self, \"move\", \"onMove\") !== false) {\n          if (!self.isDragging && self.isPressed) {\n            self.isDragging = dragged = true;\n\n            _dispatchEvent(self, \"dragstart\", \"onDragStart\");\n          }\n        } else {\n          //revert because the onMove returned false!\n          self.pointerX = prevPointerX;\n          self.pointerY = prevPointerY;\n          startElementY = prevStartElementY;\n          self.x = prevX;\n          self.y = prevY;\n          self.endX = prevEndX;\n          self.endY = prevEndY;\n          self.endRotation = prevEndRotation;\n          dirty = prevDirty;\n        }\n      }\n    },\n        //called when the mouse/touch is released\n    onRelease = function onRelease(e, force) {\n      if (!enabled || !self.isPressed || e && touchID != null && !force && (e.pointerId && e.pointerId !== touchID && e.target !== target || e.changedTouches && !_hasTouchID(e.changedTouches, touchID))) {\n        //for some Microsoft browsers, we must attach the listener to the doc rather than the trigger so that when the finger moves outside the bounds of the trigger, things still work. So if the event we're receiving has a pointerId that doesn't match the touchID, ignore it (for multi-touch)\n        isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchend, pointerup, mouseup. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.\n\n        return;\n      }\n\n      self.isPressed = false;\n      var originalEvent = e,\n          wasDragging = self.isDragging,\n          isContextMenuRelease = self.vars.allowContextMenu && e && (e.ctrlKey || e.which > 2),\n          placeholderDelayedCall = gsap.delayedCall(0.001, removePlaceholder),\n          touches,\n          i,\n          syntheticEvent,\n          eventTarget,\n          syntheticClick;\n\n      if (touchEventTarget) {\n        _removeListener(touchEventTarget, \"touchend\", onRelease);\n\n        _removeListener(touchEventTarget, \"touchmove\", onMove);\n\n        _removeListener(touchEventTarget, \"touchcancel\", onRelease);\n\n        _removeListener(ownerDoc, \"touchstart\", _onMultiTouchDocument);\n      } else {\n        _removeListener(ownerDoc, \"mousemove\", onMove);\n      }\n\n      _removeListener(_win, \"touchforcechange\", _preventDefault);\n\n      if (!_supportsPointer || !touchEventTarget) {\n        _removeListener(ownerDoc, \"mouseup\", onRelease);\n\n        e && e.target && _removeListener(e.target, \"mouseup\", onRelease);\n      }\n\n      dirty = false;\n\n      if (wasDragging) {\n        dragEndTime = _lastDragTime = _getTime();\n        self.isDragging = false;\n      }\n\n      _removeFromRenderQueue(render);\n\n      if (isClicking && !isContextMenuRelease) {\n        if (e) {\n          _removeListener(e.target, \"change\", onRelease);\n\n          self.pointerEvent = originalEvent;\n        }\n\n        _setSelectable(triggers, false);\n\n        _dispatchEvent(self, \"release\", \"onRelease\");\n\n        _dispatchEvent(self, \"click\", \"onClick\");\n\n        isClicking = false;\n        return;\n      }\n\n      i = triggers.length;\n\n      while (--i > -1) {\n        _setStyle(triggers[i], \"cursor\", vars.cursor || (vars.cursor !== false ? _defaultCursor : null));\n      }\n\n      _dragCount--;\n\n      if (e) {\n        touches = e.changedTouches;\n\n        if (touches) {\n          //touch events store the data slightly differently\n          e = touches[0];\n\n          if (e !== touch && e.identifier !== touchID) {\n            //Usually changedTouches[0] will be what we're looking for, but in case it's not, look through the rest of the array...(and Android browsers don't reuse the event like iOS)\n            i = touches.length;\n\n            while (--i > -1 && (e = touches[i]).identifier !== touchID && e.target !== target) {}\n\n            if (i < 0 && !force) {\n              return;\n            }\n          }\n        }\n\n        self.pointerEvent = originalEvent;\n        self.pointerX = e.pageX;\n        self.pointerY = e.pageY;\n      }\n\n      if (isContextMenuRelease && originalEvent) {\n        _preventDefault(originalEvent);\n\n        isPreventingDefault = true;\n\n        _dispatchEvent(self, \"release\", \"onRelease\");\n      } else if (originalEvent && !wasDragging) {\n        isPreventingDefault = false;\n\n        if (interrupted && (vars.snap || vars.bounds)) {\n          //otherwise, if the user clicks on the object while it's animating to a snapped position, and then releases without moving 3 pixels, it will just stay there (it should animate/snap)\n          animate(vars.inertia || vars.throwProps);\n        }\n\n        _dispatchEvent(self, \"release\", \"onRelease\");\n\n        if ((!_isAndroid || originalEvent.type !== \"touchmove\") && originalEvent.type.indexOf(\"cancel\") === -1) {\n          //to accommodate native scrolling on Android devices, we have to immediately call onRelease() on the first touchmove event, but that shouldn't trigger a \"click\".\n          _dispatchEvent(self, \"click\", \"onClick\");\n\n          if (_getTime() - clickTime < 300) {\n            _dispatchEvent(self, \"doubleclick\", \"onDoubleClick\");\n          }\n\n          eventTarget = originalEvent.target || target; //old IE uses srcElement\n\n          clickTime = _getTime();\n\n          syntheticClick = function syntheticClick() {\n            // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular \"click\" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the \"real\"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the \"real\" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.\n            if (clickTime !== clickDispatch && self.enabled() && !self.isPressed && !originalEvent.defaultPrevented) {\n              if (eventTarget.click) {\n                //some browsers (like mobile Safari) don't properly trigger the click event\n                eventTarget.click();\n              } else if (ownerDoc.createEvent) {\n                syntheticEvent = ownerDoc.createEvent(\"MouseEvents\");\n                syntheticEvent.initMouseEvent(\"click\", true, true, _win, 1, self.pointerEvent.screenX, self.pointerEvent.screenY, self.pointerX, self.pointerY, false, false, false, false, 0, null);\n                eventTarget.dispatchEvent(syntheticEvent);\n              }\n            }\n          };\n\n          if (!_isAndroid && !originalEvent.defaultPrevented) {\n            //iOS Safari requires the synthetic click to happen immediately or else it simply won't work, but Android doesn't play nice.\n            gsap.delayedCall(0.05, syntheticClick); //in addition to the iOS bug workaround, there's a Firefox issue with clicking on things like a video to play, so we must fake a click event in a slightly delayed fashion. Previously, we listened for the \"click\" event with \"capture\" false which solved the video-click-to-play issue, but it would allow the \"click\" event to be dispatched twice like if you were using a jQuery.click() because that was handled in the capture phase, thus we had to switch to the capture phase to avoid the double-dispatching, but do the delayed synthetic click. Don't fire it too fast (like 0.00001) because we want to give the native event a chance to fire first as it's \"trusted\".\n          }\n        }\n      } else {\n        animate(vars.inertia || vars.throwProps); //will skip if inertia/throwProps isn't defined or InertiaPlugin isn't loaded.\n\n        if (!self.allowEventDefault && originalEvent && (vars.dragClickables !== false || !isClickable.call(self, originalEvent.target)) && wasDragging && (!allowNativeTouchScrolling || touchDragAxis && allowNativeTouchScrolling === touchDragAxis) && originalEvent.cancelable !== false) {\n          isPreventingDefault = true;\n\n          _preventDefault(originalEvent);\n        } else {\n          isPreventingDefault = false;\n        }\n\n        _dispatchEvent(self, \"release\", \"onRelease\");\n      }\n\n      isTweening() && placeholderDelayedCall.duration(self.tween.duration()); //sync the timing so that the placeholder DIV gets\n\n      wasDragging && _dispatchEvent(self, \"dragend\", \"onDragEnd\");\n      return true;\n    },\n        updateScroll = function updateScroll(e) {\n      if (e && self.isDragging && !scrollProxy) {\n        var parent = e.target || target.parentNode,\n            deltaX = parent.scrollLeft - parent._gsScrollX,\n            deltaY = parent.scrollTop - parent._gsScrollY;\n\n        if (deltaX || deltaY) {\n          if (matrix) {\n            startPointerX -= deltaX * matrix.a + deltaY * matrix.c;\n            startPointerY -= deltaY * matrix.d + deltaX * matrix.b;\n          } else {\n            startPointerX -= deltaX;\n            startPointerY -= deltaY;\n          }\n\n          parent._gsScrollX += deltaX;\n          parent._gsScrollY += deltaY;\n          setPointerPosition(self.pointerX, self.pointerY);\n        }\n      }\n    },\n        onClick = function onClick(e) {\n      //this was a huge pain in the neck to align all the various browsers and their behaviors. Chrome, Firefox, Safari, Opera, Android, and Microsoft Edge all handle events differently! Some will only trigger native behavior (like checkbox toggling) from trusted events. Others don't even support isTrusted, but require 2 events to flow through before triggering native behavior. Edge treats everything as trusted but also mandates that 2 flow through to trigger the correct native behavior.\n      var time = _getTime(),\n          recentlyClicked = time - clickTime < 100,\n          recentlyDragged = time - dragEndTime < 50,\n          alreadyDispatched = recentlyClicked && clickDispatch === clickTime,\n          defaultPrevented = self.pointerEvent && self.pointerEvent.defaultPrevented,\n          alreadyDispatchedTrusted = recentlyClicked && trustedClickDispatch === clickTime,\n          trusted = e.isTrusted || e.isTrusted == null && recentlyClicked && alreadyDispatched; //note: Safari doesn't support isTrusted, and it won't properly execute native behavior (like toggling checkboxes) on the first synthetic \"click\" event - we must wait for the 2nd and treat it as trusted (but stop propagation at that point). Confusing, I know. Don't you love cross-browser compatibility challenges?\n\n\n      if ((alreadyDispatched || recentlyDragged && self.vars.suppressClickOnDrag !== false) && e.stopImmediatePropagation) {\n        e.stopImmediatePropagation();\n      }\n\n      if (recentlyClicked && !(self.pointerEvent && self.pointerEvent.defaultPrevented) && (!alreadyDispatched || trusted && !alreadyDispatchedTrusted)) {\n        //let the first click pass through unhindered. Let the next one only if it's trusted, then no more (stop quick-succession ones)\n        if (trusted && alreadyDispatched) {\n          trustedClickDispatch = clickTime;\n        }\n\n        clickDispatch = clickTime;\n        return;\n      }\n\n      if (self.isPressed || recentlyDragged || recentlyClicked) {\n        if (!trusted || !e.detail || !recentlyClicked || defaultPrevented) {\n          _preventDefault(e);\n        }\n      }\n\n      if (!recentlyClicked && !recentlyDragged && !dragged) {\n        // for script-triggered event dispatches, like element.click()\n        e && e.target && (self.pointerEvent = e);\n\n        _dispatchEvent(self, \"click\", \"onClick\");\n      }\n    },\n        localizePoint = function localizePoint(p) {\n      return matrix ? {\n        x: p.x * matrix.a + p.y * matrix.c + matrix.e,\n        y: p.x * matrix.b + p.y * matrix.d + matrix.f\n      } : {\n        x: p.x,\n        y: p.y\n      };\n    };\n\n    old = Draggable.get(target);\n    old && old.kill(); // avoids duplicates (an element can only be controlled by one Draggable)\n    //give the user access to start/stop dragging...\n\n    _this2.startDrag = function (event, align) {\n      var r1, r2, p1, p2;\n      onPress(event || self.pointerEvent, true); //if the pointer isn't on top of the element, adjust things accordingly\n\n      if (align && !self.hitTest(event || self.pointerEvent)) {\n        r1 = _parseRect(event || self.pointerEvent);\n        r2 = _parseRect(target);\n        p1 = localizePoint({\n          x: r1.left + r1.width / 2,\n          y: r1.top + r1.height / 2\n        });\n        p2 = localizePoint({\n          x: r2.left + r2.width / 2,\n          y: r2.top + r2.height / 2\n        });\n        startPointerX -= p1.x - p2.x;\n        startPointerY -= p1.y - p2.y;\n      }\n\n      if (!self.isDragging) {\n        self.isDragging = dragged = true;\n\n        _dispatchEvent(self, \"dragstart\", \"onDragStart\");\n      }\n    };\n\n    _this2.drag = onMove;\n\n    _this2.endDrag = function (e) {\n      return onRelease(e || self.pointerEvent, true);\n    };\n\n    _this2.timeSinceDrag = function () {\n      return self.isDragging ? 0 : (_getTime() - dragEndTime) / 1000;\n    };\n\n    _this2.timeSinceClick = function () {\n      return (_getTime() - clickTime) / 1000;\n    };\n\n    _this2.hitTest = function (target, threshold) {\n      return Draggable.hitTest(self.target, target, threshold);\n    };\n\n    _this2.getDirection = function (from, diagonalThreshold) {\n      //from can be \"start\" (default), \"velocity\", or an element\n      var mode = from === \"velocity\" && InertiaPlugin ? from : _isObject(from) && !rotationMode ? \"element\" : \"start\",\n          xChange,\n          yChange,\n          ratio,\n          direction,\n          r1,\n          r2;\n\n      if (mode === \"element\") {\n        r1 = _parseRect(self.target);\n        r2 = _parseRect(from);\n      }\n\n      xChange = mode === \"start\" ? self.x - startElementX : mode === \"velocity\" ? InertiaPlugin.getVelocity(target, xProp) : r1.left + r1.width / 2 - (r2.left + r2.width / 2);\n\n      if (rotationMode) {\n        return xChange < 0 ? \"counter-clockwise\" : \"clockwise\";\n      } else {\n        diagonalThreshold = diagonalThreshold || 2;\n        yChange = mode === \"start\" ? self.y - startElementY : mode === \"velocity\" ? InertiaPlugin.getVelocity(target, yProp) : r1.top + r1.height / 2 - (r2.top + r2.height / 2);\n        ratio = Math.abs(xChange / yChange);\n        direction = ratio < 1 / diagonalThreshold ? \"\" : xChange < 0 ? \"left\" : \"right\";\n\n        if (ratio < diagonalThreshold) {\n          if (direction !== \"\") {\n            direction += \"-\";\n          }\n\n          direction += yChange < 0 ? \"up\" : \"down\";\n        }\n      }\n\n      return direction;\n    };\n\n    _this2.applyBounds = function (newBounds, sticky) {\n      var x, y, forceZeroVelocity, e, parent, isRoot;\n\n      if (newBounds && vars.bounds !== newBounds) {\n        vars.bounds = newBounds;\n        return self.update(true, sticky);\n      }\n\n      syncXY(true);\n      calculateBounds();\n\n      if (hasBounds && !isTweening()) {\n        x = self.x;\n        y = self.y;\n\n        if (x > maxX) {\n          x = maxX;\n        } else if (x < minX) {\n          x = minX;\n        }\n\n        if (y > maxY) {\n          y = maxY;\n        } else if (y < minY) {\n          y = minY;\n        }\n\n        if (self.x !== x || self.y !== y) {\n          forceZeroVelocity = true;\n          self.x = self.endX = x;\n\n          if (rotationMode) {\n            self.endRotation = x;\n          } else {\n            self.y = self.endY = y;\n          }\n\n          dirty = true;\n          render(true);\n\n          if (self.autoScroll && !self.isDragging) {\n            _recordMaxScrolls(target.parentNode);\n\n            e = target;\n            _windowProxy.scrollTop = _win.pageYOffset != null ? _win.pageYOffset : ownerDoc.documentElement.scrollTop != null ? ownerDoc.documentElement.scrollTop : ownerDoc.body.scrollTop;\n            _windowProxy.scrollLeft = _win.pageXOffset != null ? _win.pageXOffset : ownerDoc.documentElement.scrollLeft != null ? ownerDoc.documentElement.scrollLeft : ownerDoc.body.scrollLeft;\n\n            while (e && !isRoot) {\n              //walk up the chain and sense wherever the scrollTop/scrollLeft exceeds the maximum.\n              isRoot = _isRoot(e.parentNode);\n              parent = isRoot ? _windowProxy : e.parentNode;\n\n              if (allowY && parent.scrollTop > parent._gsMaxScrollY) {\n                parent.scrollTop = parent._gsMaxScrollY;\n              }\n\n              if (allowX && parent.scrollLeft > parent._gsMaxScrollX) {\n                parent.scrollLeft = parent._gsMaxScrollX;\n              }\n\n              e = parent;\n            }\n          }\n        }\n\n        if (self.isThrowing && (forceZeroVelocity || self.endX > maxX || self.endX < minX || self.endY > maxY || self.endY < minY)) {\n          animate(vars.inertia || vars.throwProps, forceZeroVelocity);\n        }\n      }\n\n      return self;\n    };\n\n    _this2.update = function (applyBounds, sticky, ignoreExternalChanges) {\n      if (sticky && self.isPressed) {\n        // in case the element was repositioned in the document flow, thus its x/y may be identical but its position is actually quite different.\n        var m = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(target),\n            p = innerMatrix.apply({\n          x: self.x - startElementX,\n          y: self.y - startElementY\n        }),\n            m2 = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(target.parentNode, true);\n        m2.apply({\n          x: m.e - p.x,\n          y: m.f - p.y\n        }, p);\n        self.x -= p.x - m2.e;\n        self.y -= p.y - m2.f;\n        render(true);\n        recordStartPositions();\n      }\n\n      var x = self.x,\n          y = self.y;\n      updateMatrix(!sticky);\n\n      if (applyBounds) {\n        self.applyBounds();\n      } else {\n        dirty && ignoreExternalChanges && render(true);\n        syncXY(true);\n      }\n\n      if (sticky) {\n        setPointerPosition(self.pointerX, self.pointerY);\n        dirty && render(true);\n      }\n\n      if (self.isPressed && !sticky && (allowX && Math.abs(x - self.x) > 0.01 || allowY && Math.abs(y - self.y) > 0.01 && !rotationMode)) {\n        recordStartPositions();\n      }\n\n      if (self.autoScroll) {\n        _recordMaxScrolls(target.parentNode, self.isDragging);\n\n        checkAutoScrollBounds = self.isDragging;\n        render(true); //in case reparenting occurred.\n\n        _removeScrollListener(target, updateScroll);\n\n        _addScrollListener(target, updateScroll);\n      }\n\n      return self;\n    };\n\n    _this2.enable = function (type) {\n      var setVars = {\n        lazy: true\n      },\n          id,\n          i,\n          trigger;\n\n      if (vars.cursor !== false) {\n        setVars.cursor = vars.cursor || _defaultCursor;\n      }\n\n      if (gsap.utils.checkPrefix(\"touchCallout\")) {\n        setVars.touchCallout = \"none\";\n      }\n\n      if (type !== \"soft\") {\n        _setTouchActionForAllDescendants(triggers, allowX === allowY ? \"none\" : vars.allowNativeTouchScrolling && target.scrollHeight === target.clientHeight === (target.scrollWidth === target.clientHeight) || vars.allowEventDefault ? \"manipulation\" : allowX ? \"pan-y\" : \"pan-x\"); // Some browsers like Internet Explorer will fire a pointercancel event when the user attempts to drag when touchAction is \"manipulate\" because it's perceived as a pan. If the element has scrollable content in only one direction, we should use pan-x or pan-y accordingly so that the pointercancel doesn't prevent dragging.\n\n\n        i = triggers.length;\n\n        while (--i > -1) {\n          trigger = triggers[i];\n          _supportsPointer || _addListener(trigger, \"mousedown\", onPress);\n\n          _addListener(trigger, \"touchstart\", onPress);\n\n          _addListener(trigger, \"click\", onClick, true); // note: used to pass true for capture but it prevented click-to-play-video functionality in Firefox.\n\n\n          gsap.set(trigger, setVars);\n\n          if (trigger.getBBox && trigger.ownerSVGElement && allowX !== allowY) {\n            // a bug in chrome doesn't respect touch-action on SVG elements - it only works if we set it on the parent SVG.\n            gsap.set(trigger.ownerSVGElement, {\n              touchAction: vars.allowNativeTouchScrolling || vars.allowEventDefault ? \"manipulation\" : allowX ? \"pan-y\" : \"pan-x\"\n            });\n          }\n\n          vars.allowContextMenu || _addListener(trigger, \"contextmenu\", onContextMenu);\n        }\n\n        _setSelectable(triggers, false);\n      }\n\n      _addScrollListener(target, updateScroll);\n\n      enabled = true;\n\n      if (InertiaPlugin && type !== \"soft\") {\n        InertiaPlugin.track(scrollProxy || target, xyMode ? \"x,y\" : rotationMode ? \"rotation\" : \"top,left\");\n      }\n\n      target._gsDragID = id = target._gsDragID || \"d\" + _lookupCount++;\n      _lookup[id] = self;\n\n      if (scrollProxy) {\n        scrollProxy.enable();\n        scrollProxy.element._gsDragID = id;\n      }\n\n      (vars.bounds || rotationMode) && recordStartPositions();\n      vars.bounds && self.applyBounds();\n      return self;\n    };\n\n    _this2.disable = function (type) {\n      var dragging = self.isDragging,\n          i = triggers.length,\n          trigger;\n\n      while (--i > -1) {\n        _setStyle(triggers[i], \"cursor\", null);\n      }\n\n      if (type !== \"soft\") {\n        _setTouchActionForAllDescendants(triggers, null);\n\n        i = triggers.length;\n\n        while (--i > -1) {\n          trigger = triggers[i];\n\n          _setStyle(trigger, \"touchCallout\", null);\n\n          _removeListener(trigger, \"mousedown\", onPress);\n\n          _removeListener(trigger, \"touchstart\", onPress);\n\n          _removeListener(trigger, \"click\", onClick, true);\n\n          _removeListener(trigger, \"contextmenu\", onContextMenu);\n        }\n\n        _setSelectable(triggers, true);\n\n        if (touchEventTarget) {\n          _removeListener(touchEventTarget, \"touchcancel\", onRelease);\n\n          _removeListener(touchEventTarget, \"touchend\", onRelease);\n\n          _removeListener(touchEventTarget, \"touchmove\", onMove);\n        }\n\n        _removeListener(ownerDoc, \"mouseup\", onRelease);\n\n        _removeListener(ownerDoc, \"mousemove\", onMove);\n      }\n\n      _removeScrollListener(target, updateScroll);\n\n      enabled = false;\n\n      if (InertiaPlugin && type !== \"soft\") {\n        InertiaPlugin.untrack(scrollProxy || target, xyMode ? \"x,y\" : rotationMode ? \"rotation\" : \"top,left\");\n        self.tween && self.tween.kill();\n      }\n\n      scrollProxy && scrollProxy.disable();\n\n      _removeFromRenderQueue(render);\n\n      self.isDragging = self.isPressed = isClicking = false;\n      dragging && _dispatchEvent(self, \"dragend\", \"onDragEnd\");\n      return self;\n    };\n\n    _this2.enabled = function (value, type) {\n      return arguments.length ? value ? self.enable(type) : self.disable(type) : enabled;\n    };\n\n    _this2.kill = function () {\n      self.isThrowing = false;\n      self.tween && self.tween.kill();\n      self.disable();\n      gsap.set(triggers, {\n        clearProps: \"userSelect\"\n      });\n      delete _lookup[target._gsDragID];\n      return self;\n    };\n\n    _this2.revert = function () {\n      this.kill();\n      this.styles && this.styles.revert();\n    };\n\n    if (~type.indexOf(\"scroll\")) {\n      scrollProxy = _this2.scrollProxy = new ScrollProxy(target, _extend({\n        onKill: function onKill() {\n          //ScrollProxy's onKill() gets called if/when the ScrollProxy senses that the user interacted with the scroll position manually (like using the scrollbar). IE9 doesn't fire the \"mouseup\" properly when users drag the scrollbar of an element, so this works around that issue.\n          self.isPressed && onRelease(null);\n        }\n      }, vars)); //a bug in many Android devices' stock browser causes scrollTop to get forced back to 0 after it is altered via JS, so we set overflow to \"hidden\" on mobile/touch devices (they hide the scroll bar anyway). That works around the bug. (This bug is discussed at https://code.google.com/p/android/issues/detail?id=19625)\n\n      target.style.overflowY = allowY && !_isTouchDevice ? \"auto\" : \"hidden\";\n      target.style.overflowX = allowX && !_isTouchDevice ? \"auto\" : \"hidden\";\n      target = scrollProxy.content;\n    }\n\n    if (rotationMode) {\n      killProps.rotation = 1;\n    } else {\n      if (allowX) {\n        killProps[xProp] = 1;\n      }\n\n      if (allowY) {\n        killProps[yProp] = 1;\n      }\n    }\n\n    gsCache.force3D = \"force3D\" in vars ? vars.force3D : true; //otherwise, normal dragging would be in 2D and then as soon as it's released and there's an inertia tween, it'd jump to 3D which can create an initial jump due to the work the browser must to do layerize it.\n\n    _context(_assertThisInitialized(_this2));\n\n    _this2.enable();\n\n    return _this2;\n  }\n\n  Draggable.register = function register(core) {\n    gsap = core;\n\n    _initCore();\n  };\n\n  Draggable.create = function create(targets, vars) {\n    _coreInitted || _initCore(true);\n    return _toArray(targets).map(function (target) {\n      return new Draggable(target, vars);\n    });\n  };\n\n  Draggable.get = function get(target) {\n    return _lookup[(_toArray(target)[0] || {})._gsDragID];\n  };\n\n  Draggable.timeSinceDrag = function timeSinceDrag() {\n    return (_getTime() - _lastDragTime) / 1000;\n  };\n\n  Draggable.hitTest = function hitTest(obj1, obj2, threshold) {\n    if (obj1 === obj2) {\n      return false;\n    }\n\n    var r1 = _parseRect(obj1),\n        r2 = _parseRect(obj2),\n        top = r1.top,\n        left = r1.left,\n        right = r1.right,\n        bottom = r1.bottom,\n        width = r1.width,\n        height = r1.height,\n        isOutside = r2.left > right || r2.right < left || r2.top > bottom || r2.bottom < top,\n        overlap,\n        area,\n        isRatio;\n\n    if (isOutside || !threshold) {\n      return !isOutside;\n    }\n\n    isRatio = (threshold + \"\").indexOf(\"%\") !== -1;\n    threshold = parseFloat(threshold) || 0;\n    overlap = {\n      left: Math.max(left, r2.left),\n      top: Math.max(top, r2.top)\n    };\n    overlap.width = Math.min(right, r2.right) - overlap.left;\n    overlap.height = Math.min(bottom, r2.bottom) - overlap.top;\n\n    if (overlap.width < 0 || overlap.height < 0) {\n      return false;\n    }\n\n    if (isRatio) {\n      threshold *= 0.01;\n      area = overlap.width * overlap.height;\n      return area >= width * height * threshold || area >= r2.width * r2.height * threshold;\n    }\n\n    return overlap.width > threshold && overlap.height > threshold;\n  };\n\n  return Draggable;\n}(EventDispatcher);\n\n_setDefaults(Draggable.prototype, {\n  pointerX: 0,\n  pointerY: 0,\n  startX: 0,\n  startY: 0,\n  deltaX: 0,\n  deltaY: 0,\n  isDragging: false,\n  isPressed: false\n});\n\nDraggable.zIndex = 1000;\nDraggable.version = \"3.12.7\";\n_getGSAP() && gsap.registerPlugin(Draggable);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gsap/Draggable.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gsap/EasePack.js":
/*!***************************************!*\
  !*** ./node_modules/gsap/EasePack.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EasePack: function() { return /* binding */ EasePack; },\n/* harmony export */   ExpoScaleEase: function() { return /* binding */ ExpoScaleEase; },\n/* harmony export */   RoughEase: function() { return /* binding */ RoughEase; },\n/* harmony export */   SlowMo: function() { return /* binding */ SlowMo; },\n/* harmony export */   \"default\": function() { return /* binding */ EasePack; }\n/* harmony export */ });\n/*!\n * EasePack 3.12.7\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar gsap,\n    _coreInitted,\n    _registerEase,\n    _getGSAP = function _getGSAP() {\n  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _boolean = function _boolean(value, defaultValue) {\n  return !!(typeof value === \"undefined\" ? defaultValue : value && !~(value + \"\").indexOf(\"false\"));\n},\n    _initCore = function _initCore(core) {\n  gsap = core || _getGSAP();\n\n  if (gsap) {\n    _registerEase = gsap.registerEase; //add weighted ease capabilities to standard eases so users can do \"power2.inOut(0.8)\" for example to push everything toward the \"out\", or (-0.8) to push it toward the \"in\" (0 is neutral)\n\n    var eases = gsap.parseEase(),\n        createConfig = function createConfig(ease) {\n      return function (ratio) {\n        var y = 0.5 + ratio / 2;\n\n        ease.config = function (p) {\n          return ease(2 * (1 - p) * p * y + p * p);\n        };\n      };\n    },\n        p;\n\n    for (p in eases) {\n      if (!eases[p].config) {\n        createConfig(eases[p]);\n      }\n    }\n\n    _registerEase(\"slow\", SlowMo);\n\n    _registerEase(\"expoScale\", ExpoScaleEase);\n\n    _registerEase(\"rough\", RoughEase);\n\n    for (p in EasePack) {\n      p !== \"version\" && gsap.core.globals(p, EasePack[p]);\n    }\n\n    _coreInitted = 1;\n  }\n},\n    _createSlowMo = function _createSlowMo(linearRatio, power, yoyoMode) {\n  linearRatio = Math.min(1, linearRatio || 0.7);\n\n  var pow = linearRatio < 1 ? power || power === 0 ? power : 0.7 : 0,\n      p1 = (1 - linearRatio) / 2,\n      p3 = p1 + linearRatio,\n      calcEnd = _boolean(yoyoMode);\n\n  return function (p) {\n    var r = p + (0.5 - p) * pow;\n    return p < p1 ? calcEnd ? 1 - (p = 1 - p / p1) * p : r - (p = 1 - p / p1) * p * p * p * r : p > p3 ? calcEnd ? p === 1 ? 0 : 1 - (p = (p - p3) / p1) * p : r + (p - r) * (p = (p - p3) / p1) * p * p * p : calcEnd ? 1 : r;\n  };\n},\n    _createExpoScale = function _createExpoScale(start, end, ease) {\n  var p1 = Math.log(end / start),\n      p2 = end - start;\n  ease && (ease = gsap.parseEase(ease));\n  return function (p) {\n    return (start * Math.exp(p1 * (ease ? ease(p) : p)) - start) / p2;\n  };\n},\n    EasePoint = function EasePoint(time, value, next) {\n  this.t = time;\n  this.v = value;\n\n  if (next) {\n    this.next = next;\n    next.prev = this;\n    this.c = next.v - value;\n    this.gap = next.t - time;\n  }\n},\n    _createRoughEase = function _createRoughEase(vars) {\n  if (typeof vars !== \"object\") {\n    //users may pass in via a string, like \"rough(30)\"\n    vars = {\n      points: +vars || 20\n    };\n  }\n\n  var taper = vars.taper || \"none\",\n      a = [],\n      cnt = 0,\n      points = (+vars.points || 20) | 0,\n      i = points,\n      randomize = _boolean(vars.randomize, true),\n      clamp = _boolean(vars.clamp),\n      template = gsap ? gsap.parseEase(vars.template) : 0,\n      strength = (+vars.strength || 1) * 0.4,\n      x,\n      y,\n      bump,\n      invX,\n      obj,\n      pnt,\n      recent;\n\n  while (--i > -1) {\n    x = randomize ? Math.random() : 1 / points * i;\n    y = template ? template(x) : x;\n\n    if (taper === \"none\") {\n      bump = strength;\n    } else if (taper === \"out\") {\n      invX = 1 - x;\n      bump = invX * invX * strength;\n    } else if (taper === \"in\") {\n      bump = x * x * strength;\n    } else if (x < 0.5) {\n      //\"both\" (start)\n      invX = x * 2;\n      bump = invX * invX * 0.5 * strength;\n    } else {\n      //\"both\" (end)\n      invX = (1 - x) * 2;\n      bump = invX * invX * 0.5 * strength;\n    }\n\n    if (randomize) {\n      y += Math.random() * bump - bump * 0.5;\n    } else if (i % 2) {\n      y += bump * 0.5;\n    } else {\n      y -= bump * 0.5;\n    }\n\n    if (clamp) {\n      if (y > 1) {\n        y = 1;\n      } else if (y < 0) {\n        y = 0;\n      }\n    }\n\n    a[cnt++] = {\n      x: x,\n      y: y\n    };\n  }\n\n  a.sort(function (a, b) {\n    return a.x - b.x;\n  });\n  pnt = new EasePoint(1, 1, null);\n  i = points;\n\n  while (i--) {\n    obj = a[i];\n    pnt = new EasePoint(obj.x, obj.y, pnt);\n  }\n\n  recent = new EasePoint(0, 0, pnt.t ? pnt : pnt.next);\n  return function (p) {\n    var pnt = recent;\n\n    if (p > pnt.t) {\n      while (pnt.next && p >= pnt.t) {\n        pnt = pnt.next;\n      }\n\n      pnt = pnt.prev;\n    } else {\n      while (pnt.prev && p <= pnt.t) {\n        pnt = pnt.prev;\n      }\n    }\n\n    recent = pnt;\n    return pnt.v + (p - pnt.t) / pnt.gap * pnt.c;\n  };\n};\n\nvar SlowMo = _createSlowMo(0.7);\nSlowMo.ease = SlowMo; //for backward compatibility\n\nSlowMo.config = _createSlowMo;\nvar ExpoScaleEase = _createExpoScale(1, 2);\nExpoScaleEase.config = _createExpoScale;\nvar RoughEase = _createRoughEase();\nRoughEase.ease = RoughEase; //for backward compatibility\n\nRoughEase.config = _createRoughEase;\nvar EasePack = {\n  SlowMo: SlowMo,\n  RoughEase: RoughEase,\n  ExpoScaleEase: ExpoScaleEase\n};\n\nfor (var p in EasePack) {\n  EasePack[p].register = _initCore;\n  EasePack[p].version = \"3.12.7\";\n}\n\n_getGSAP() && gsap.registerPlugin(SlowMo);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gsap/EasePack.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gsap/EaselPlugin.js":
/*!******************************************!*\
  !*** ./node_modules/gsap/EaselPlugin.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EaselPlugin: function() { return /* binding */ EaselPlugin; },\n/* harmony export */   \"default\": function() { return /* binding */ EaselPlugin; }\n/* harmony export */ });\n/*!\n * EaselPlugin 3.12.7\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar gsap,\n    _coreInitted,\n    _win,\n    _createJS,\n    _ColorFilter,\n    _ColorMatrixFilter,\n    _colorProps = \"redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset\".split(\",\"),\n    _windowExists = function _windowExists() {\n  return typeof window !== \"undefined\";\n},\n    _getGSAP = function _getGSAP() {\n  return gsap || _windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _getCreateJS = function _getCreateJS() {\n  return _createJS || _win && _win.createjs || _win || {};\n},\n    _warn = function _warn(message) {\n  return console.warn(message);\n},\n    _cache = function _cache(target) {\n  var b = target.getBounds && target.getBounds();\n\n  if (!b) {\n    b = target.nominalBounds || {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 100\n    };\n    target.setBounds && target.setBounds(b.x, b.y, b.width, b.height);\n  }\n\n  target.cache && target.cache(b.x, b.y, b.width, b.height);\n\n  _warn(\"EaselPlugin: for filters to display in EaselJS, you must call the object's cache() method first. GSAP attempted to use the target's getBounds() for the cache but that may not be completely accurate. \" + target);\n},\n    _parseColorFilter = function _parseColorFilter(target, v, plugin) {\n  if (!_ColorFilter) {\n    _ColorFilter = _getCreateJS().ColorFilter;\n\n    if (!_ColorFilter) {\n      _warn(\"EaselPlugin error: The EaselJS ColorFilter JavaScript file wasn't loaded.\");\n    }\n  }\n\n  var filters = target.filters || [],\n      i = filters.length,\n      c,\n      s,\n      e,\n      a,\n      p,\n      pt;\n\n  while (i--) {\n    if (filters[i] instanceof _ColorFilter) {\n      s = filters[i];\n      break;\n    }\n  }\n\n  if (!s) {\n    s = new _ColorFilter();\n    filters.push(s);\n    target.filters = filters;\n  }\n\n  e = s.clone();\n\n  if (v.tint != null) {\n    c = gsap.utils.splitColor(v.tint);\n    a = v.tintAmount != null ? +v.tintAmount : 1;\n    e.redOffset = +c[0] * a;\n    e.greenOffset = +c[1] * a;\n    e.blueOffset = +c[2] * a;\n    e.redMultiplier = e.greenMultiplier = e.blueMultiplier = 1 - a;\n  } else {\n    for (p in v) {\n      if (p !== \"exposure\") if (p !== \"brightness\") {\n        e[p] = +v[p];\n      }\n    }\n  }\n\n  if (v.exposure != null) {\n    e.redOffset = e.greenOffset = e.blueOffset = 255 * (+v.exposure - 1);\n    e.redMultiplier = e.greenMultiplier = e.blueMultiplier = 1;\n  } else if (v.brightness != null) {\n    a = +v.brightness - 1;\n    e.redOffset = e.greenOffset = e.blueOffset = a > 0 ? a * 255 : 0;\n    e.redMultiplier = e.greenMultiplier = e.blueMultiplier = 1 - Math.abs(a);\n  }\n\n  i = 8;\n\n  while (i--) {\n    p = _colorProps[i];\n\n    if (s[p] !== e[p]) {\n      pt = plugin.add(s, p, s[p], e[p], 0, 0, 0, 0, 0, 1);\n\n      if (pt) {\n        pt.op = \"easel_colorFilter\";\n      }\n    }\n  }\n\n  plugin._props.push(\"easel_colorFilter\");\n\n  if (!target.cacheID) {\n    _cache(target);\n  }\n},\n    _idMatrix = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],\n    _lumR = 0.212671,\n    _lumG = 0.715160,\n    _lumB = 0.072169,\n    _applyMatrix = function _applyMatrix(m, m2) {\n  if (!(m instanceof Array) || !(m2 instanceof Array)) {\n    return m2;\n  }\n\n  var temp = [],\n      i = 0,\n      z = 0,\n      y,\n      x;\n\n  for (y = 0; y < 4; y++) {\n    for (x = 0; x < 5; x++) {\n      z = x === 4 ? m[i + 4] : 0;\n      temp[i + x] = m[i] * m2[x] + m[i + 1] * m2[x + 5] + m[i + 2] * m2[x + 10] + m[i + 3] * m2[x + 15] + z;\n    }\n\n    i += 5;\n  }\n\n  return temp;\n},\n    _setSaturation = function _setSaturation(m, n) {\n  if (isNaN(n)) {\n    return m;\n  }\n\n  var inv = 1 - n,\n      r = inv * _lumR,\n      g = inv * _lumG,\n      b = inv * _lumB;\n  return _applyMatrix([r + n, g, b, 0, 0, r, g + n, b, 0, 0, r, g, b + n, 0, 0, 0, 0, 0, 1, 0], m);\n},\n    _colorize = function _colorize(m, color, amount) {\n  if (isNaN(amount)) {\n    amount = 1;\n  }\n\n  var c = gsap.utils.splitColor(color),\n      r = c[0] / 255,\n      g = c[1] / 255,\n      b = c[2] / 255,\n      inv = 1 - amount;\n  return _applyMatrix([inv + amount * r * _lumR, amount * r * _lumG, amount * r * _lumB, 0, 0, amount * g * _lumR, inv + amount * g * _lumG, amount * g * _lumB, 0, 0, amount * b * _lumR, amount * b * _lumG, inv + amount * b * _lumB, 0, 0, 0, 0, 0, 1, 0], m);\n},\n    _setHue = function _setHue(m, n) {\n  if (isNaN(n)) {\n    return m;\n  }\n\n  n *= Math.PI / 180;\n  var c = Math.cos(n),\n      s = Math.sin(n);\n  return _applyMatrix([_lumR + c * (1 - _lumR) + s * -_lumR, _lumG + c * -_lumG + s * -_lumG, _lumB + c * -_lumB + s * (1 - _lumB), 0, 0, _lumR + c * -_lumR + s * 0.143, _lumG + c * (1 - _lumG) + s * 0.14, _lumB + c * -_lumB + s * -0.283, 0, 0, _lumR + c * -_lumR + s * -(1 - _lumR), _lumG + c * -_lumG + s * _lumG, _lumB + c * (1 - _lumB) + s * _lumB, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], m);\n},\n    _setContrast = function _setContrast(m, n) {\n  if (isNaN(n)) {\n    return m;\n  }\n\n  n += 0.01;\n  return _applyMatrix([n, 0, 0, 0, 128 * (1 - n), 0, n, 0, 0, 128 * (1 - n), 0, 0, n, 0, 128 * (1 - n), 0, 0, 0, 1, 0], m);\n},\n    _parseColorMatrixFilter = function _parseColorMatrixFilter(target, v, plugin) {\n  if (!_ColorMatrixFilter) {\n    _ColorMatrixFilter = _getCreateJS().ColorMatrixFilter;\n\n    if (!_ColorMatrixFilter) {\n      _warn(\"EaselPlugin: The EaselJS ColorMatrixFilter JavaScript file wasn't loaded.\");\n    }\n  }\n\n  var filters = target.filters || [],\n      i = filters.length,\n      matrix,\n      startMatrix,\n      s,\n      pg;\n\n  while (--i > -1) {\n    if (filters[i] instanceof _ColorMatrixFilter) {\n      s = filters[i];\n      break;\n    }\n  }\n\n  if (!s) {\n    s = new _ColorMatrixFilter(_idMatrix.slice());\n    filters.push(s);\n    target.filters = filters;\n  }\n\n  startMatrix = s.matrix;\n  matrix = _idMatrix.slice();\n\n  if (v.colorize != null) {\n    matrix = _colorize(matrix, v.colorize, Number(v.colorizeAmount));\n  }\n\n  if (v.contrast != null) {\n    matrix = _setContrast(matrix, Number(v.contrast));\n  }\n\n  if (v.hue != null) {\n    matrix = _setHue(matrix, Number(v.hue));\n  }\n\n  if (v.saturation != null) {\n    matrix = _setSaturation(matrix, Number(v.saturation));\n  }\n\n  i = matrix.length;\n\n  while (--i > -1) {\n    if (matrix[i] !== startMatrix[i]) {\n      pg = plugin.add(startMatrix, i, startMatrix[i], matrix[i], 0, 0, 0, 0, 0, 1);\n\n      if (pg) {\n        pg.op = \"easel_colorMatrixFilter\";\n      }\n    }\n  }\n\n  plugin._props.push(\"easel_colorMatrixFilter\");\n\n  if (!target.cacheID) {\n    _cache();\n  }\n\n  plugin._matrix = startMatrix;\n},\n    _initCore = function _initCore(core) {\n  gsap = core || _getGSAP();\n\n  if (_windowExists()) {\n    _win = window;\n  }\n\n  if (gsap) {\n    _coreInitted = 1;\n  }\n};\n\nvar EaselPlugin = {\n  version: \"3.12.7\",\n  name: \"easel\",\n  init: function init(target, value, tween, index, targets) {\n    if (!_coreInitted) {\n      _initCore();\n\n      if (!gsap) {\n        _warn(\"Please gsap.registerPlugin(EaselPlugin)\");\n      }\n    }\n\n    this.target = target;\n    var p, pt, tint, colorMatrix, end, labels, i;\n\n    for (p in value) {\n      end = value[p];\n\n      if (p === \"colorFilter\" || p === \"tint\" || p === \"tintAmount\" || p === \"exposure\" || p === \"brightness\") {\n        if (!tint) {\n          _parseColorFilter(target, value.colorFilter || value, this);\n\n          tint = true;\n        }\n      } else if (p === \"saturation\" || p === \"contrast\" || p === \"hue\" || p === \"colorize\" || p === \"colorizeAmount\") {\n        if (!colorMatrix) {\n          _parseColorMatrixFilter(target, value.colorMatrixFilter || value, this);\n\n          colorMatrix = true;\n        }\n      } else if (p === \"frame\") {\n        if (typeof end === \"string\" && end.charAt(1) !== \"=\" && (labels = target.labels)) {\n          for (i = 0; i < labels.length; i++) {\n            if (labels[i].label === end) {\n              end = labels[i].position;\n            }\n          }\n        }\n\n        pt = this.add(target, \"gotoAndStop\", target.currentFrame, end, index, targets, Math.round, 0, 0, 1);\n\n        if (pt) {\n          pt.op = p;\n        }\n      } else if (target[p] != null) {\n        this.add(target, p, \"get\", end);\n      }\n    }\n  },\n  render: function render(ratio, data) {\n    var pt = data._pt;\n\n    while (pt) {\n      pt.r(ratio, pt.d);\n      pt = pt._next;\n    }\n\n    if (data.target.cacheID) {\n      data.target.updateCache();\n    }\n  },\n  register: _initCore\n};\n\nEaselPlugin.registerCreateJS = function (createjs) {\n  _createJS = createjs;\n};\n\n_getGSAP() && gsap.registerPlugin(EaselPlugin);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gsap/EaselPlugin.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gsap/Flip.js":
/*!***********************************!*\
  !*** ./node_modules/gsap/Flip.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Flip: function() { return /* binding */ Flip; },\n/* harmony export */   \"default\": function() { return /* binding */ Flip; }\n/* harmony export */ });\n/* harmony import */ var _utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/matrix.js */ \"(app-pages-browser)/./node_modules/gsap/utils/matrix.js\");\n/*!\n * Flip 3.12.7\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\n\n\nvar _id = 1,\n    _toArray,\n    gsap,\n    _batch,\n    _batchAction,\n    _body,\n    _closestTenth,\n    _getStyleSaver,\n    _forEachBatch = function _forEachBatch(batch, name) {\n  return batch.actions.forEach(function (a) {\n    return a.vars[name] && a.vars[name](a);\n  });\n},\n    _batchLookup = {},\n    _RAD2DEG = 180 / Math.PI,\n    _DEG2RAD = Math.PI / 180,\n    _emptyObj = {},\n    _dashedNameLookup = {},\n    _memoizedRemoveProps = {},\n    _listToArray = function _listToArray(list) {\n  return typeof list === \"string\" ? list.split(\" \").join(\"\").split(\",\") : list;\n},\n    // removes extra spaces contaminating the names, returns an Array.\n_callbacks = _listToArray(\"onStart,onUpdate,onComplete,onReverseComplete,onInterrupt\"),\n    _removeProps = _listToArray(\"transform,transformOrigin,width,height,position,top,left,opacity,zIndex,maxWidth,maxHeight,minWidth,minHeight\"),\n    _getEl = function _getEl(target) {\n  return _toArray(target)[0] || console.warn(\"Element not found:\", target);\n},\n    _round = function _round(value) {\n  return Math.round(value * 10000) / 10000 || 0;\n},\n    _toggleClass = function _toggleClass(targets, className, action) {\n  return targets.forEach(function (el) {\n    return el.classList[action](className);\n  });\n},\n    _reserved = {\n  zIndex: 1,\n  kill: 1,\n  simple: 1,\n  spin: 1,\n  clearProps: 1,\n  targets: 1,\n  toggleClass: 1,\n  onComplete: 1,\n  onUpdate: 1,\n  onInterrupt: 1,\n  onStart: 1,\n  delay: 1,\n  repeat: 1,\n  repeatDelay: 1,\n  yoyo: 1,\n  scale: 1,\n  fade: 1,\n  absolute: 1,\n  props: 1,\n  onEnter: 1,\n  onLeave: 1,\n  custom: 1,\n  paused: 1,\n  nested: 1,\n  prune: 1,\n  absoluteOnLeave: 1\n},\n    _fitReserved = {\n  zIndex: 1,\n  simple: 1,\n  clearProps: 1,\n  scale: 1,\n  absolute: 1,\n  fitChild: 1,\n  getVars: 1,\n  props: 1\n},\n    _camelToDashed = function _camelToDashed(p) {\n  return p.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n},\n    _copy = function _copy(obj, exclude) {\n  var result = {},\n      p;\n\n  for (p in obj) {\n    exclude[p] || (result[p] = obj[p]);\n  }\n\n  return result;\n},\n    _memoizedProps = {},\n    _memoizeProps = function _memoizeProps(props) {\n  var p = _memoizedProps[props] = _listToArray(props);\n\n  _memoizedRemoveProps[props] = p.concat(_removeProps);\n  return p;\n},\n    _getInverseGlobalMatrix = function _getInverseGlobalMatrix(el) {\n  // integrates caching for improved performance\n  var cache = el._gsap || gsap.core.getCache(el);\n\n  if (cache.gmCache === gsap.ticker.frame) {\n    return cache.gMatrix;\n  }\n\n  cache.gmCache = gsap.ticker.frame;\n  return cache.gMatrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(el, true, false, true);\n},\n    _getDOMDepth = function _getDOMDepth(el, invert, level) {\n  if (level === void 0) {\n    level = 0;\n  }\n\n  // In invert is true, the sibling depth is increments of 1, and parent/nesting depth is increments of 1000. This lets us order elements in an Array to reflect document flow.\n  var parent = el.parentNode,\n      inc = 1000 * Math.pow(10, level) * (invert ? -1 : 1),\n      l = invert ? -inc * 900 : 0;\n\n  while (el) {\n    l += inc;\n    el = el.previousSibling;\n  }\n\n  return parent ? l + _getDOMDepth(parent, invert, level + 1) : l;\n},\n    _orderByDOMDepth = function _orderByDOMDepth(comps, invert, isElStates) {\n  comps.forEach(function (comp) {\n    return comp.d = _getDOMDepth(isElStates ? comp.element : comp.t, invert);\n  });\n  comps.sort(function (c1, c2) {\n    return c1.d - c2.d;\n  });\n  return comps;\n},\n    _recordInlineStyles = function _recordInlineStyles(elState, props) {\n  // records the current inline CSS properties into an Array in alternating name/value pairs that's stored in a \"css\" property on the state object so that we can revert later.\n  var style = elState.element.style,\n      a = elState.css = elState.css || [],\n      i = props.length,\n      p,\n      v;\n\n  while (i--) {\n    p = props[i];\n    v = style[p] || style.getPropertyValue(p);\n    a.push(v ? p : _dashedNameLookup[p] || (_dashedNameLookup[p] = _camelToDashed(p)), v);\n  }\n\n  return style;\n},\n    _applyInlineStyles = function _applyInlineStyles(state) {\n  var css = state.css,\n      style = state.element.style,\n      i = 0;\n  state.cache.uncache = 1;\n\n  for (; i < css.length; i += 2) {\n    css[i + 1] ? style[css[i]] = css[i + 1] : style.removeProperty(css[i]);\n  }\n\n  if (!css[css.indexOf(\"transform\") + 1] && style.translate) {\n    // CSSPlugin adds scale, translate, and rotate inline CSS as \"none\" in order to keep CSS rules from contaminating transforms.\n    style.removeProperty(\"translate\");\n    style.removeProperty(\"scale\");\n    style.removeProperty(\"rotate\");\n  }\n},\n    _setFinalStates = function _setFinalStates(comps, onlyTransforms) {\n  comps.forEach(function (c) {\n    return c.a.cache.uncache = 1;\n  });\n  onlyTransforms || comps.finalStates.forEach(_applyInlineStyles);\n},\n    _absoluteProps = \"paddingTop,paddingRight,paddingBottom,paddingLeft,gridArea,transition\".split(\",\"),\n    // properties that we must record just\n_makeAbsolute = function _makeAbsolute(elState, fallbackNode, ignoreBatch) {\n  var element = elState.element,\n      width = elState.width,\n      height = elState.height,\n      uncache = elState.uncache,\n      getProp = elState.getProp,\n      style = element.style,\n      i = 4,\n      result,\n      displayIsNone,\n      cs;\n  typeof fallbackNode !== \"object\" && (fallbackNode = elState);\n\n  if (_batch && ignoreBatch !== 1) {\n    _batch._abs.push({\n      t: element,\n      b: elState,\n      a: elState,\n      sd: 0\n    });\n\n    _batch._final.push(function () {\n      return (elState.cache.uncache = 1) && _applyInlineStyles(elState);\n    });\n\n    return element;\n  }\n\n  displayIsNone = getProp(\"display\") === \"none\";\n\n  if (!elState.isVisible || displayIsNone) {\n    displayIsNone && (_recordInlineStyles(elState, [\"display\"]).display = fallbackNode.display);\n    elState.matrix = fallbackNode.matrix;\n    elState.width = width = elState.width || fallbackNode.width;\n    elState.height = height = elState.height || fallbackNode.height;\n  }\n\n  _recordInlineStyles(elState, _absoluteProps);\n\n  cs = window.getComputedStyle(element);\n\n  while (i--) {\n    style[_absoluteProps[i]] = cs[_absoluteProps[i]]; // record paddings as px-based because if removed from grid, percentage-based ones could be altered.\n  }\n\n  style.gridArea = \"1 / 1 / 1 / 1\";\n  style.transition = \"none\";\n  style.position = \"absolute\";\n  style.width = width + \"px\";\n  style.height = height + \"px\";\n  style.top || (style.top = \"0px\");\n  style.left || (style.left = \"0px\");\n\n  if (uncache) {\n    result = new ElementState(element);\n  } else {\n    // better performance\n    result = _copy(elState, _emptyObj);\n    result.position = \"absolute\";\n\n    if (elState.simple) {\n      var bounds = element.getBoundingClientRect();\n      result.matrix = new _utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.Matrix2D(1, 0, 0, 1, bounds.left + (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__._getDocScrollLeft)(), bounds.top + (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__._getDocScrollTop)());\n    } else {\n      result.matrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(element, false, false, true);\n    }\n  }\n\n  result = _fit(result, elState, true);\n  elState.x = _closestTenth(result.x, 0.01);\n  elState.y = _closestTenth(result.y, 0.01);\n  return element;\n},\n    _filterComps = function _filterComps(comps, targets) {\n  if (targets !== true) {\n    targets = _toArray(targets);\n    comps = comps.filter(function (c) {\n      if (targets.indexOf((c.sd < 0 ? c.b : c.a).element) !== -1) {\n        return true;\n      } else {\n        c.t._gsap.renderTransform(1); // we must force transforms to render on anything that isn't being made position: absolute, otherwise the absolute position happens and then when animation begins it applies transforms which can create a new stacking context, throwing off positioning!\n\n\n        if (c.b.isVisible) {\n          c.t.style.width = c.b.width + \"px\"; // otherwise things can collapse when contents are made position: absolute.\n\n          c.t.style.height = c.b.height + \"px\";\n        }\n      }\n    });\n  }\n\n  return comps;\n},\n    _makeCompsAbsolute = function _makeCompsAbsolute(comps) {\n  return _orderByDOMDepth(comps, true).forEach(function (c) {\n    return (c.a.isVisible || c.b.isVisible) && _makeAbsolute(c.sd < 0 ? c.b : c.a, c.b, 1);\n  });\n},\n    _findElStateInState = function _findElStateInState(state, other) {\n  return other && state.idLookup[_parseElementState(other).id] || state.elementStates[0];\n},\n    _parseElementState = function _parseElementState(elOrNode, props, simple, other) {\n  return elOrNode instanceof ElementState ? elOrNode : elOrNode instanceof FlipState ? _findElStateInState(elOrNode, other) : new ElementState(typeof elOrNode === \"string\" ? _getEl(elOrNode) || console.warn(elOrNode + \" not found\") : elOrNode, props, simple);\n},\n    _recordProps = function _recordProps(elState, props) {\n  var getProp = gsap.getProperty(elState.element, null, \"native\"),\n      obj = elState.props = {},\n      i = props.length;\n\n  while (i--) {\n    obj[props[i]] = (getProp(props[i]) + \"\").trim();\n  }\n\n  obj.zIndex && (obj.zIndex = parseFloat(obj.zIndex) || 0);\n  return elState;\n},\n    _applyProps = function _applyProps(element, props) {\n  var style = element.style || element,\n      // could pass in a vars object.\n  p;\n\n  for (p in props) {\n    style[p] = props[p];\n  }\n},\n    _getID = function _getID(el) {\n  var id = el.getAttribute(\"data-flip-id\");\n  id || el.setAttribute(\"data-flip-id\", id = \"auto-\" + _id++);\n  return id;\n},\n    _elementsFromElementStates = function _elementsFromElementStates(elStates) {\n  return elStates.map(function (elState) {\n    return elState.element;\n  });\n},\n    _handleCallback = function _handleCallback(callback, elStates, tl) {\n  return callback && elStates.length && tl.add(callback(_elementsFromElementStates(elStates), tl, new FlipState(elStates, 0, true)), 0);\n},\n    _fit = function _fit(fromState, toState, scale, applyProps, fitChild, vars) {\n  var element = fromState.element,\n      cache = fromState.cache,\n      parent = fromState.parent,\n      x = fromState.x,\n      y = fromState.y,\n      width = toState.width,\n      height = toState.height,\n      scaleX = toState.scaleX,\n      scaleY = toState.scaleY,\n      rotation = toState.rotation,\n      bounds = toState.bounds,\n      styles = vars && _getStyleSaver && _getStyleSaver(element, \"transform,width,height\"),\n      dimensionState = fromState,\n      _toState$matrix = toState.matrix,\n      e = _toState$matrix.e,\n      f = _toState$matrix.f,\n      deep = fromState.bounds.width !== bounds.width || fromState.bounds.height !== bounds.height || fromState.scaleX !== scaleX || fromState.scaleY !== scaleY || fromState.rotation !== rotation,\n      simple = !deep && fromState.simple && toState.simple && !fitChild,\n      skewX,\n      fromPoint,\n      toPoint,\n      getProp,\n      parentMatrix,\n      matrix,\n      bbox;\n\n  if (simple || !parent) {\n    scaleX = scaleY = 1;\n    rotation = skewX = 0;\n  } else {\n    parentMatrix = _getInverseGlobalMatrix(parent);\n    matrix = parentMatrix.clone().multiply(toState.ctm ? toState.matrix.clone().multiply(toState.ctm) : toState.matrix); // root SVG elements have a ctm that we must factor out (for example, viewBox:\"0 0 94 94\" with a width of 200px would scale the internals by 2.127 but when we're matching the size of the root <svg> element itself, that scaling shouldn't factor in!)\n\n    rotation = _round(Math.atan2(matrix.b, matrix.a) * _RAD2DEG);\n    skewX = _round(Math.atan2(matrix.c, matrix.d) * _RAD2DEG + rotation) % 360; // in very rare cases, minor rounding might end up with 360 which should be 0.\n\n    scaleX = Math.sqrt(Math.pow(matrix.a, 2) + Math.pow(matrix.b, 2));\n    scaleY = Math.sqrt(Math.pow(matrix.c, 2) + Math.pow(matrix.d, 2)) * Math.cos(skewX * _DEG2RAD);\n\n    if (fitChild) {\n      fitChild = _toArray(fitChild)[0];\n      getProp = gsap.getProperty(fitChild);\n      bbox = fitChild.getBBox && typeof fitChild.getBBox === \"function\" && fitChild.getBBox();\n      dimensionState = {\n        scaleX: getProp(\"scaleX\"),\n        scaleY: getProp(\"scaleY\"),\n        width: bbox ? bbox.width : Math.ceil(parseFloat(getProp(\"width\", \"px\"))),\n        height: bbox ? bbox.height : parseFloat(getProp(\"height\", \"px\"))\n      };\n    }\n\n    cache.rotation = rotation + \"deg\";\n    cache.skewX = skewX + \"deg\";\n  }\n\n  if (scale) {\n    scaleX *= width === dimensionState.width || !dimensionState.width ? 1 : width / dimensionState.width; // note if widths are both 0, we should make scaleX 1 - some elements have box-sizing that incorporates padding, etc. and we don't want it to collapse in that case.\n\n    scaleY *= height === dimensionState.height || !dimensionState.height ? 1 : height / dimensionState.height;\n    cache.scaleX = scaleX;\n    cache.scaleY = scaleY;\n  } else {\n    width = _closestTenth(width * scaleX / dimensionState.scaleX, 0);\n    height = _closestTenth(height * scaleY / dimensionState.scaleY, 0);\n    element.style.width = width + \"px\";\n    element.style.height = height + \"px\";\n  } // if (fromState.isFixed) { // commented out because it's now taken care of in getGlobalMatrix() with a flag at the end.\n  // \te -= _getDocScrollLeft();\n  // \tf -= _getDocScrollTop();\n  // }\n\n\n  applyProps && _applyProps(element, toState.props);\n\n  if (simple || !parent) {\n    x += e - fromState.matrix.e;\n    y += f - fromState.matrix.f;\n  } else if (deep || parent !== toState.parent) {\n    cache.renderTransform(1, cache);\n    matrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(fitChild || element, false, false, true);\n    fromPoint = parentMatrix.apply({\n      x: matrix.e,\n      y: matrix.f\n    });\n    toPoint = parentMatrix.apply({\n      x: e,\n      y: f\n    });\n    x += toPoint.x - fromPoint.x;\n    y += toPoint.y - fromPoint.y;\n  } else {\n    // use a faster/cheaper algorithm if we're just moving x/y\n    parentMatrix.e = parentMatrix.f = 0;\n    toPoint = parentMatrix.apply({\n      x: e - fromState.matrix.e,\n      y: f - fromState.matrix.f\n    });\n    x += toPoint.x;\n    y += toPoint.y;\n  }\n\n  x = _closestTenth(x, 0.02);\n  y = _closestTenth(y, 0.02);\n\n  if (vars && !(vars instanceof ElementState)) {\n    // revert\n    styles && styles.revert();\n  } else {\n    // or apply the transform immediately\n    cache.x = x + \"px\";\n    cache.y = y + \"px\";\n    cache.renderTransform(1, cache);\n  }\n\n  if (vars) {\n    vars.x = x;\n    vars.y = y;\n    vars.rotation = rotation;\n    vars.skewX = skewX;\n\n    if (scale) {\n      vars.scaleX = scaleX;\n      vars.scaleY = scaleY;\n    } else {\n      vars.width = width;\n      vars.height = height;\n    }\n  }\n\n  return vars || cache;\n},\n    _parseState = function _parseState(targetsOrState, vars) {\n  return targetsOrState instanceof FlipState ? targetsOrState : new FlipState(targetsOrState, vars);\n},\n    _getChangingElState = function _getChangingElState(toState, fromState, id) {\n  var to1 = toState.idLookup[id],\n      to2 = toState.alt[id];\n  return to2.isVisible && (!(fromState.getElementState(to2.element) || to2).isVisible || !to1.isVisible) ? to2 : to1;\n},\n    _bodyMetrics = [],\n    _bodyProps = \"width,height,overflowX,overflowY\".split(\",\"),\n    _bodyLocked,\n    _lockBodyScroll = function _lockBodyScroll(lock) {\n  // if there's no scrollbar, we should lock that so that measurements don't get affected by temporary repositioning, like if something is centered in the window.\n  if (lock !== _bodyLocked) {\n    var s = _body.style,\n        w = _body.clientWidth === window.outerWidth,\n        h = _body.clientHeight === window.outerHeight,\n        i = 4;\n\n    if (lock && (w || h)) {\n      while (i--) {\n        _bodyMetrics[i] = s[_bodyProps[i]];\n      }\n\n      if (w) {\n        s.width = _body.clientWidth + \"px\";\n        s.overflowY = \"hidden\";\n      }\n\n      if (h) {\n        s.height = _body.clientHeight + \"px\";\n        s.overflowX = \"hidden\";\n      }\n\n      _bodyLocked = lock;\n    } else if (_bodyLocked) {\n      while (i--) {\n        _bodyMetrics[i] ? s[_bodyProps[i]] = _bodyMetrics[i] : s.removeProperty(_camelToDashed(_bodyProps[i]));\n      }\n\n      _bodyLocked = lock;\n    }\n  }\n},\n    _fromTo = function _fromTo(fromState, toState, vars, relative) {\n  // relative is -1 if \"from()\", and 1 if \"to()\"\n  fromState instanceof FlipState && toState instanceof FlipState || console.warn(\"Not a valid state object.\");\n  vars = vars || {};\n\n  var _vars = vars,\n      clearProps = _vars.clearProps,\n      onEnter = _vars.onEnter,\n      onLeave = _vars.onLeave,\n      absolute = _vars.absolute,\n      absoluteOnLeave = _vars.absoluteOnLeave,\n      custom = _vars.custom,\n      delay = _vars.delay,\n      paused = _vars.paused,\n      repeat = _vars.repeat,\n      repeatDelay = _vars.repeatDelay,\n      yoyo = _vars.yoyo,\n      toggleClass = _vars.toggleClass,\n      nested = _vars.nested,\n      _zIndex = _vars.zIndex,\n      scale = _vars.scale,\n      fade = _vars.fade,\n      stagger = _vars.stagger,\n      spin = _vars.spin,\n      prune = _vars.prune,\n      props = (\"props\" in vars ? vars : fromState).props,\n      tweenVars = _copy(vars, _reserved),\n      animation = gsap.timeline({\n    delay: delay,\n    paused: paused,\n    repeat: repeat,\n    repeatDelay: repeatDelay,\n    yoyo: yoyo,\n    data: \"isFlip\"\n  }),\n      remainingProps = tweenVars,\n      entering = [],\n      leaving = [],\n      comps = [],\n      swapOutTargets = [],\n      spinNum = spin === true ? 1 : spin || 0,\n      spinFunc = typeof spin === \"function\" ? spin : function () {\n    return spinNum;\n  },\n      interrupted = fromState.interrupted || toState.interrupted,\n      addFunc = animation[relative !== 1 ? \"to\" : \"from\"],\n      v,\n      p,\n      endTime,\n      i,\n      el,\n      comp,\n      state,\n      targets,\n      finalStates,\n      fromNode,\n      toNode,\n      run,\n      a,\n      b; //relative || (toState = (new FlipState(toState.targets, {props: props})).fit(toState, scale));\n\n\n  for (p in toState.idLookup) {\n    toNode = !toState.alt[p] ? toState.idLookup[p] : _getChangingElState(toState, fromState, p);\n    el = toNode.element;\n    fromNode = fromState.idLookup[p];\n    fromState.alt[p] && el === fromNode.element && (fromState.alt[p].isVisible || !toNode.isVisible) && (fromNode = fromState.alt[p]);\n\n    if (fromNode) {\n      comp = {\n        t: el,\n        b: fromNode,\n        a: toNode,\n        sd: fromNode.element === el ? 0 : toNode.isVisible ? 1 : -1\n      };\n      comps.push(comp);\n\n      if (comp.sd) {\n        if (comp.sd < 0) {\n          comp.b = toNode;\n          comp.a = fromNode;\n        } // for swapping elements that got interrupted, we must re-record the inline styles to ensure they're not tainted. Remember, .batch() permits getState() not to force in-progress flips to their end state.\n\n\n        interrupted && _recordInlineStyles(comp.b, props ? _memoizedRemoveProps[props] : _removeProps);\n        fade && comps.push(comp.swap = {\n          t: fromNode.element,\n          b: comp.b,\n          a: comp.a,\n          sd: -comp.sd,\n          swap: comp\n        });\n      }\n\n      el._flip = fromNode.element._flip = _batch ? _batch.timeline : animation;\n    } else if (toNode.isVisible) {\n      comps.push({\n        t: el,\n        b: _copy(toNode, {\n          isVisible: 1\n        }),\n        a: toNode,\n        sd: 0,\n        entering: 1\n      }); // to include it in the \"entering\" Array and do absolute positioning if necessary\n\n      el._flip = _batch ? _batch.timeline : animation;\n    }\n  }\n\n  props && (_memoizedProps[props] || _memoizeProps(props)).forEach(function (p) {\n    return tweenVars[p] = function (i) {\n      return comps[i].a.props[p];\n    };\n  });\n  comps.finalStates = finalStates = [];\n\n  run = function run() {\n    _orderByDOMDepth(comps);\n\n    _lockBodyScroll(true); // otherwise, measurements may get thrown off when things get fit.\n    // TODO: cache the matrix, especially for parent because it'll probably get reused quite a bit, but lock it to a particular cycle(?).\n\n\n    for (i = 0; i < comps.length; i++) {\n      comp = comps[i];\n      a = comp.a;\n      b = comp.b;\n\n      if (prune && !a.isDifferent(b) && !comp.entering) {\n        // only flip if things changed! Don't omit it from comps initially because that'd prevent the element from being positioned absolutely (if necessary)\n        comps.splice(i--, 1);\n      } else {\n        el = comp.t;\n        nested && !(comp.sd < 0) && i && (a.matrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(el, false, false, true)); // moving a parent affects the position of children\n\n        if (b.isVisible && a.isVisible) {\n          if (comp.sd < 0) {\n            // swapping OUT (swap direction of -1 is out)\n            state = new ElementState(el, props, fromState.simple);\n\n            _fit(state, a, scale, 0, 0, state);\n\n            state.matrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(el, false, false, true);\n            state.css = comp.b.css;\n            comp.a = a = state;\n            fade && (el.style.opacity = interrupted ? b.opacity : a.opacity);\n            stagger && swapOutTargets.push(el);\n          } else if (comp.sd > 0 && fade) {\n            // swapping IN (swap direction of 1 is in)\n            el.style.opacity = interrupted ? a.opacity - b.opacity : \"0\";\n          }\n\n          _fit(a, b, scale, props);\n        } else if (b.isVisible !== a.isVisible) {\n          // either entering or leaving (one side is invisible)\n          if (!b.isVisible) {\n            // entering\n            a.isVisible && entering.push(a);\n            comps.splice(i--, 1);\n          } else if (!a.isVisible) {\n            // leaving\n            b.css = a.css;\n            leaving.push(b);\n            comps.splice(i--, 1);\n            absolute && nested && _fit(a, b, scale, props);\n          }\n        }\n\n        if (!scale) {\n          el.style.maxWidth = Math.max(a.width, b.width) + \"px\";\n          el.style.maxHeight = Math.max(a.height, b.height) + \"px\";\n          el.style.minWidth = Math.min(a.width, b.width) + \"px\";\n          el.style.minHeight = Math.min(a.height, b.height) + \"px\";\n        }\n\n        nested && toggleClass && el.classList.add(toggleClass);\n      }\n\n      finalStates.push(a);\n    }\n\n    var classTargets;\n\n    if (toggleClass) {\n      classTargets = finalStates.map(function (s) {\n        return s.element;\n      });\n      nested && classTargets.forEach(function (e) {\n        return e.classList.remove(toggleClass);\n      }); // there could be a delay, so don't leave the classes applied (we'll do it in a timeline callback)\n    }\n\n    _lockBodyScroll(false);\n\n    if (scale) {\n      tweenVars.scaleX = function (i) {\n        return comps[i].a.scaleX;\n      };\n\n      tweenVars.scaleY = function (i) {\n        return comps[i].a.scaleY;\n      };\n    } else {\n      tweenVars.width = function (i) {\n        return comps[i].a.width + \"px\";\n      };\n\n      tweenVars.height = function (i) {\n        return comps[i].a.height + \"px\";\n      };\n\n      tweenVars.autoRound = vars.autoRound || false;\n    }\n\n    tweenVars.x = function (i) {\n      return comps[i].a.x + \"px\";\n    };\n\n    tweenVars.y = function (i) {\n      return comps[i].a.y + \"px\";\n    };\n\n    tweenVars.rotation = function (i) {\n      return comps[i].a.rotation + (spin ? spinFunc(i, targets[i], targets) * 360 : 0);\n    };\n\n    tweenVars.skewX = function (i) {\n      return comps[i].a.skewX;\n    };\n\n    targets = comps.map(function (c) {\n      return c.t;\n    });\n\n    if (_zIndex || _zIndex === 0) {\n      tweenVars.modifiers = {\n        zIndex: function zIndex() {\n          return _zIndex;\n        }\n      };\n      tweenVars.zIndex = _zIndex;\n      tweenVars.immediateRender = vars.immediateRender !== false;\n    }\n\n    fade && (tweenVars.opacity = function (i) {\n      return comps[i].sd < 0 ? 0 : comps[i].sd > 0 ? comps[i].a.opacity : \"+=0\";\n    });\n\n    if (swapOutTargets.length) {\n      stagger = gsap.utils.distribute(stagger);\n      var dummyArray = targets.slice(swapOutTargets.length);\n\n      tweenVars.stagger = function (i, el) {\n        return stagger(~swapOutTargets.indexOf(el) ? targets.indexOf(comps[i].swap.t) : i, el, dummyArray);\n      };\n    } // // for testing...\n    // gsap.delayedCall(vars.data ? 50 : 1, function() {\n    // \tanimation.eventCallback(\"onComplete\", () => _setFinalStates(comps, !clearProps));\n    // \taddFunc.call(animation, targets, tweenVars, 0).play();\n    // });\n    // return;\n\n\n    _callbacks.forEach(function (name) {\n      return vars[name] && animation.eventCallback(name, vars[name], vars[name + \"Params\"]);\n    }); // apply callbacks to the timeline, not tweens (because \"custom\" timing can make multiple tweens)\n\n\n    if (custom && targets.length) {\n      // bust out the custom properties as their own tweens so they can use different eases, durations, etc.\n      remainingProps = _copy(tweenVars, _reserved);\n\n      if (\"scale\" in custom) {\n        custom.scaleX = custom.scaleY = custom.scale;\n        delete custom.scale;\n      }\n\n      for (p in custom) {\n        v = _copy(custom[p], _fitReserved);\n        v[p] = tweenVars[p];\n        !(\"duration\" in v) && \"duration\" in tweenVars && (v.duration = tweenVars.duration);\n        v.stagger = tweenVars.stagger;\n        addFunc.call(animation, targets, v, 0);\n        delete remainingProps[p];\n      }\n    }\n\n    if (targets.length || leaving.length || entering.length) {\n      toggleClass && animation.add(function () {\n        return _toggleClass(classTargets, toggleClass, animation._zTime < 0 ? \"remove\" : \"add\");\n      }, 0) && !paused && _toggleClass(classTargets, toggleClass, \"add\");\n      targets.length && addFunc.call(animation, targets, remainingProps, 0);\n    }\n\n    _handleCallback(onEnter, entering, animation);\n\n    _handleCallback(onLeave, leaving, animation);\n\n    var batchTl = _batch && _batch.timeline;\n\n    if (batchTl) {\n      batchTl.add(animation, 0);\n\n      _batch._final.push(function () {\n        return _setFinalStates(comps, !clearProps);\n      });\n    }\n\n    endTime = animation.duration();\n    animation.call(function () {\n      var forward = animation.time() >= endTime;\n      forward && !batchTl && _setFinalStates(comps, !clearProps);\n      toggleClass && _toggleClass(classTargets, toggleClass, forward ? \"remove\" : \"add\");\n    });\n  };\n\n  absoluteOnLeave && (absolute = comps.filter(function (comp) {\n    return !comp.sd && !comp.a.isVisible && comp.b.isVisible;\n  }).map(function (comp) {\n    return comp.a.element;\n  }));\n\n  if (_batch) {\n    var _batch$_abs;\n\n    absolute && (_batch$_abs = _batch._abs).push.apply(_batch$_abs, _filterComps(comps, absolute));\n\n    _batch._run.push(run);\n  } else {\n    absolute && _makeCompsAbsolute(_filterComps(comps, absolute)); // when making absolute, we must go in a very particular order so that document flow changes don't affect things. Don't make it visible if both the before and after states are invisible! There's no point, and it could make things appear visible during the flip that shouldn't be.\n\n    run();\n  }\n\n  var anim = _batch ? _batch.timeline : animation;\n\n  anim.revert = function () {\n    return _killFlip(anim, 1, 1);\n  }; // a Flip timeline should behave very different when reverting - it should actually jump to the end so that styles get cleared out.\n\n\n  return anim;\n},\n    _interrupt = function _interrupt(tl) {\n  tl.vars.onInterrupt && tl.vars.onInterrupt.apply(tl, tl.vars.onInterruptParams || []);\n  tl.getChildren(true, false, true).forEach(_interrupt);\n},\n    _killFlip = function _killFlip(tl, action, force) {\n  // action: 0 = nothing, 1 = complete, 2 = only kill (don't complete)\n  if (tl && tl.progress() < 1 && (!tl.paused() || force)) {\n    if (action) {\n      _interrupt(tl);\n\n      action < 2 && tl.progress(1); // we should also kill it in case it was added to a parent timeline.\n\n      tl.kill();\n    }\n\n    return true;\n  }\n},\n    _createLookup = function _createLookup(state) {\n  var lookup = state.idLookup = {},\n      alt = state.alt = {},\n      elStates = state.elementStates,\n      i = elStates.length,\n      elState;\n\n  while (i--) {\n    elState = elStates[i];\n    lookup[elState.id] ? alt[elState.id] = elState : lookup[elState.id] = elState;\n  }\n};\n\nvar FlipState = /*#__PURE__*/function () {\n  function FlipState(targets, vars, targetsAreElementStates) {\n    this.props = vars && vars.props;\n    this.simple = !!(vars && vars.simple);\n\n    if (targetsAreElementStates) {\n      this.targets = _elementsFromElementStates(targets);\n      this.elementStates = targets;\n\n      _createLookup(this);\n    } else {\n      this.targets = _toArray(targets);\n      var soft = vars && (vars.kill === false || vars.batch && !vars.kill);\n      _batch && !soft && _batch._kill.push(this);\n      this.update(soft || !!_batch); // when batching, don't force in-progress flips to their end; we need to do that AFTER all getStates() are called.\n    }\n  }\n\n  var _proto = FlipState.prototype;\n\n  _proto.update = function update(soft) {\n    var _this = this;\n\n    this.elementStates = this.targets.map(function (el) {\n      return new ElementState(el, _this.props, _this.simple);\n    });\n\n    _createLookup(this);\n\n    this.interrupt(soft);\n    this.recordInlineStyles();\n    return this;\n  };\n\n  _proto.clear = function clear() {\n    this.targets.length = this.elementStates.length = 0;\n\n    _createLookup(this);\n\n    return this;\n  };\n\n  _proto.fit = function fit(state, scale, nested) {\n    var elStatesInOrder = _orderByDOMDepth(this.elementStates.slice(0), false, true),\n        toElStates = (state || this).idLookup,\n        i = 0,\n        fromNode,\n        toNode;\n\n    for (; i < elStatesInOrder.length; i++) {\n      fromNode = elStatesInOrder[i];\n      nested && (fromNode.matrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(fromNode.element, false, false, true)); // moving a parent affects the position of children\n\n      toNode = toElStates[fromNode.id];\n      toNode && _fit(fromNode, toNode, scale, true, 0, fromNode);\n      fromNode.matrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(fromNode.element, false, false, true);\n    }\n\n    return this;\n  };\n\n  _proto.getProperty = function getProperty(element, property) {\n    var es = this.getElementState(element) || _emptyObj;\n\n    return (property in es ? es : es.props || _emptyObj)[property];\n  };\n\n  _proto.add = function add(state) {\n    var i = state.targets.length,\n        lookup = this.idLookup,\n        alt = this.alt,\n        index,\n        es,\n        es2;\n\n    while (i--) {\n      es = state.elementStates[i];\n      es2 = lookup[es.id];\n\n      if (es2 && (es.element === es2.element || alt[es.id] && alt[es.id].element === es.element)) {\n        // if the flip id is already in this FlipState, replace it!\n        index = this.elementStates.indexOf(es.element === es2.element ? es2 : alt[es.id]);\n        this.targets.splice(index, 1, state.targets[i]);\n        this.elementStates.splice(index, 1, es);\n      } else {\n        this.targets.push(state.targets[i]);\n        this.elementStates.push(es);\n      }\n    }\n\n    state.interrupted && (this.interrupted = true);\n    state.simple || (this.simple = false);\n\n    _createLookup(this);\n\n    return this;\n  };\n\n  _proto.compare = function compare(state) {\n    var l1 = state.idLookup,\n        l2 = this.idLookup,\n        unchanged = [],\n        changed = [],\n        enter = [],\n        leave = [],\n        targets = [],\n        a1 = state.alt,\n        a2 = this.alt,\n        place = function place(s1, s2, el) {\n      return (s1.isVisible !== s2.isVisible ? s1.isVisible ? enter : leave : s1.isVisible ? changed : unchanged).push(el) && targets.push(el);\n    },\n        placeIfDoesNotExist = function placeIfDoesNotExist(s1, s2, el) {\n      return targets.indexOf(el) < 0 && place(s1, s2, el);\n    },\n        s1,\n        s2,\n        p,\n        el,\n        s1Alt,\n        s2Alt,\n        c1,\n        c2;\n\n    for (p in l1) {\n      s1Alt = a1[p];\n      s2Alt = a2[p];\n      s1 = !s1Alt ? l1[p] : _getChangingElState(state, this, p);\n      el = s1.element;\n      s2 = l2[p];\n\n      if (s2Alt) {\n        c2 = s2.isVisible || !s2Alt.isVisible && el === s2.element ? s2 : s2Alt;\n        c1 = s1Alt && !s1.isVisible && !s1Alt.isVisible && c2.element === s1Alt.element ? s1Alt : s1; //c1.element !== c2.element && c1.element === s2.element && (c2 = s2);\n\n        if (c1.isVisible && c2.isVisible && c1.element !== c2.element) {\n          // swapping, so force into \"changed\" array\n          (c1.isDifferent(c2) ? changed : unchanged).push(c1.element, c2.element);\n          targets.push(c1.element, c2.element);\n        } else {\n          place(c1, c2, c1.element);\n        }\n\n        s1Alt && c1.element === s1Alt.element && (s1Alt = l1[p]);\n        placeIfDoesNotExist(c1.element !== s2.element && s1Alt ? s1Alt : c1, s2, s2.element);\n        placeIfDoesNotExist(s1Alt && s1Alt.element === s2Alt.element ? s1Alt : c1, s2Alt, s2Alt.element);\n        s1Alt && placeIfDoesNotExist(s1Alt, s2Alt.element === s1Alt.element ? s2Alt : s2, s1Alt.element);\n      } else {\n        !s2 ? enter.push(el) : !s2.isDifferent(s1) ? unchanged.push(el) : place(s1, s2, el);\n        s1Alt && placeIfDoesNotExist(s1Alt, s2, s1Alt.element);\n      }\n    }\n\n    for (p in l2) {\n      if (!l1[p]) {\n        leave.push(l2[p].element);\n        a2[p] && leave.push(a2[p].element);\n      }\n    }\n\n    return {\n      changed: changed,\n      unchanged: unchanged,\n      enter: enter,\n      leave: leave\n    };\n  };\n\n  _proto.recordInlineStyles = function recordInlineStyles() {\n    var props = _memoizedRemoveProps[this.props] || _removeProps,\n        i = this.elementStates.length;\n\n    while (i--) {\n      _recordInlineStyles(this.elementStates[i], props);\n    }\n  };\n\n  _proto.interrupt = function interrupt(soft) {\n    var _this2 = this;\n\n    // soft = DON'T force in-progress flip animations to completion (like when running a batch, we can't immediately kill flips when getting states because it could contaminate positioning and other .getState() calls that will run in the batch (we kill AFTER all the .getState() calls complete).\n    var timelines = [];\n    this.targets.forEach(function (t) {\n      var tl = t._flip,\n          foundInProgress = _killFlip(tl, soft ? 0 : 1);\n\n      soft && foundInProgress && timelines.indexOf(tl) < 0 && tl.add(function () {\n        return _this2.updateVisibility();\n      });\n      foundInProgress && timelines.push(tl);\n    });\n    !soft && timelines.length && this.updateVisibility(); // if we found an in-progress Flip animation, we must record all the values in their current state at that point BUT we should update the isVisible value AFTER pushing that flip to completion so that elements that are entering or leaving will populate those Arrays properly.\n\n    this.interrupted || (this.interrupted = !!timelines.length);\n  };\n\n  _proto.updateVisibility = function updateVisibility() {\n    this.elementStates.forEach(function (es) {\n      var b = es.element.getBoundingClientRect();\n      es.isVisible = !!(b.width || b.height || b.top || b.left);\n      es.uncache = 1;\n    });\n  };\n\n  _proto.getElementState = function getElementState(element) {\n    return this.elementStates[this.targets.indexOf(_getEl(element))];\n  };\n\n  _proto.makeAbsolute = function makeAbsolute() {\n    return _orderByDOMDepth(this.elementStates.slice(0), true, true).map(_makeAbsolute);\n  };\n\n  return FlipState;\n}();\n\nvar ElementState = /*#__PURE__*/function () {\n  function ElementState(element, props, simple) {\n    this.element = element;\n    this.update(props, simple);\n  }\n\n  var _proto2 = ElementState.prototype;\n\n  _proto2.isDifferent = function isDifferent(state) {\n    var b1 = this.bounds,\n        b2 = state.bounds;\n    return b1.top !== b2.top || b1.left !== b2.left || b1.width !== b2.width || b1.height !== b2.height || !this.matrix.equals(state.matrix) || this.opacity !== state.opacity || this.props && state.props && JSON.stringify(this.props) !== JSON.stringify(state.props);\n  };\n\n  _proto2.update = function update(props, simple) {\n    var self = this,\n        element = self.element,\n        getProp = gsap.getProperty(element),\n        cache = gsap.core.getCache(element),\n        bounds = element.getBoundingClientRect(),\n        bbox = element.getBBox && typeof element.getBBox === \"function\" && element.nodeName.toLowerCase() !== \"svg\" && element.getBBox(),\n        m = simple ? new _utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.Matrix2D(1, 0, 0, 1, bounds.left + (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__._getDocScrollLeft)(), bounds.top + (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__._getDocScrollTop)()) : (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(element, false, false, true);\n    self.getProp = getProp;\n    self.element = element;\n    self.id = _getID(element);\n    self.matrix = m;\n    self.cache = cache;\n    self.bounds = bounds;\n    self.isVisible = !!(bounds.width || bounds.height || bounds.left || bounds.top);\n    self.display = getProp(\"display\");\n    self.position = getProp(\"position\");\n    self.parent = element.parentNode;\n    self.x = getProp(\"x\");\n    self.y = getProp(\"y\");\n    self.scaleX = cache.scaleX;\n    self.scaleY = cache.scaleY;\n    self.rotation = getProp(\"rotation\");\n    self.skewX = getProp(\"skewX\");\n    self.opacity = getProp(\"opacity\");\n    self.width = bbox ? bbox.width : _closestTenth(getProp(\"width\", \"px\"), 0.04); // round up to the closest 0.1 so that text doesn't wrap.\n\n    self.height = bbox ? bbox.height : _closestTenth(getProp(\"height\", \"px\"), 0.04);\n    props && _recordProps(self, _memoizedProps[props] || _memoizeProps(props));\n    self.ctm = element.getCTM && element.nodeName.toLowerCase() === \"svg\" && (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__._getCTM)(element).inverse();\n    self.simple = simple || _round(m.a) === 1 && !_round(m.b) && !_round(m.c) && _round(m.d) === 1; // allows us to speed through some other tasks if it's not scale/rotated\n\n    self.uncache = 0;\n  };\n\n  return ElementState;\n}();\n\nvar FlipAction = /*#__PURE__*/function () {\n  function FlipAction(vars, batch) {\n    this.vars = vars;\n    this.batch = batch;\n    this.states = [];\n    this.timeline = batch.timeline;\n  }\n\n  var _proto3 = FlipAction.prototype;\n\n  _proto3.getStateById = function getStateById(id) {\n    var i = this.states.length;\n\n    while (i--) {\n      if (this.states[i].idLookup[id]) {\n        return this.states[i];\n      }\n    }\n  };\n\n  _proto3.kill = function kill() {\n    this.batch.remove(this);\n  };\n\n  return FlipAction;\n}();\n\nvar FlipBatch = /*#__PURE__*/function () {\n  function FlipBatch(id) {\n    this.id = id;\n    this.actions = [];\n    this._kill = [];\n    this._final = [];\n    this._abs = [];\n    this._run = [];\n    this.data = {};\n    this.state = new FlipState();\n    this.timeline = gsap.timeline();\n  }\n\n  var _proto4 = FlipBatch.prototype;\n\n  _proto4.add = function add(config) {\n    var result = this.actions.filter(function (action) {\n      return action.vars === config;\n    });\n\n    if (result.length) {\n      return result[0];\n    }\n\n    result = new FlipAction(typeof config === \"function\" ? {\n      animate: config\n    } : config, this);\n    this.actions.push(result);\n    return result;\n  };\n\n  _proto4.remove = function remove(action) {\n    var i = this.actions.indexOf(action);\n    i >= 0 && this.actions.splice(i, 1);\n    return this;\n  };\n\n  _proto4.getState = function getState(merge) {\n    var _this3 = this;\n\n    var prevBatch = _batch,\n        prevAction = _batchAction;\n    _batch = this;\n    this.state.clear();\n    this._kill.length = 0;\n    this.actions.forEach(function (action) {\n      if (action.vars.getState) {\n        action.states.length = 0;\n        _batchAction = action;\n        action.state = action.vars.getState(action);\n      }\n\n      merge && action.states.forEach(function (s) {\n        return _this3.state.add(s);\n      });\n    });\n    _batchAction = prevAction;\n    _batch = prevBatch;\n    this.killConflicts();\n    return this;\n  };\n\n  _proto4.animate = function animate() {\n    var _this4 = this;\n\n    var prevBatch = _batch,\n        tl = this.timeline,\n        i = this.actions.length,\n        finalStates,\n        endTime;\n    _batch = this;\n    tl.clear();\n    this._abs.length = this._final.length = this._run.length = 0;\n    this.actions.forEach(function (a) {\n      a.vars.animate && a.vars.animate(a);\n      var onEnter = a.vars.onEnter,\n          onLeave = a.vars.onLeave,\n          targets = a.targets,\n          s,\n          result;\n\n      if (targets && targets.length && (onEnter || onLeave)) {\n        s = new FlipState();\n        a.states.forEach(function (state) {\n          return s.add(state);\n        });\n        result = s.compare(Flip.getState(targets));\n        result.enter.length && onEnter && onEnter(result.enter);\n        result.leave.length && onLeave && onLeave(result.leave);\n      }\n    });\n\n    _makeCompsAbsolute(this._abs);\n\n    this._run.forEach(function (f) {\n      return f();\n    });\n\n    endTime = tl.duration();\n    finalStates = this._final.slice(0);\n    tl.add(function () {\n      if (endTime <= tl.time()) {\n        // only call if moving forward in the timeline (in case it's nested in a timeline that gets reversed)\n        finalStates.forEach(function (f) {\n          return f();\n        });\n\n        _forEachBatch(_this4, \"onComplete\");\n      }\n    });\n    _batch = prevBatch;\n\n    while (i--) {\n      this.actions[i].vars.once && this.actions[i].kill();\n    }\n\n    _forEachBatch(this, \"onStart\");\n\n    tl.restart();\n    return this;\n  };\n\n  _proto4.loadState = function loadState(done) {\n    done || (done = function done() {\n      return 0;\n    });\n    var queue = [];\n    this.actions.forEach(function (c) {\n      if (c.vars.loadState) {\n        var i,\n            f = function f(targets) {\n          targets && (c.targets = targets);\n          i = queue.indexOf(f);\n\n          if (~i) {\n            queue.splice(i, 1);\n            queue.length || done();\n          }\n        };\n\n        queue.push(f);\n        c.vars.loadState(f);\n      }\n    });\n    queue.length || done();\n    return this;\n  };\n\n  _proto4.setState = function setState() {\n    this.actions.forEach(function (c) {\n      return c.targets = c.vars.setState && c.vars.setState(c);\n    });\n    return this;\n  };\n\n  _proto4.killConflicts = function killConflicts(soft) {\n    this.state.interrupt(soft);\n\n    this._kill.forEach(function (state) {\n      return state.interrupt(soft);\n    });\n\n    return this;\n  };\n\n  _proto4.run = function run(skipGetState, merge) {\n    var _this5 = this;\n\n    if (this !== _batch) {\n      skipGetState || this.getState(merge);\n      this.loadState(function () {\n        if (!_this5._killed) {\n          _this5.setState();\n\n          _this5.animate();\n        }\n      });\n    }\n\n    return this;\n  };\n\n  _proto4.clear = function clear(stateOnly) {\n    this.state.clear();\n    stateOnly || (this.actions.length = 0);\n  };\n\n  _proto4.getStateById = function getStateById(id) {\n    var i = this.actions.length,\n        s;\n\n    while (i--) {\n      s = this.actions[i].getStateById(id);\n\n      if (s) {\n        return s;\n      }\n    }\n\n    return this.state.idLookup[id] && this.state;\n  };\n\n  _proto4.kill = function kill() {\n    this._killed = 1;\n    this.clear();\n    delete _batchLookup[this.id];\n  };\n\n  return FlipBatch;\n}();\n\nvar Flip = /*#__PURE__*/function () {\n  function Flip() {}\n\n  Flip.getState = function getState(targets, vars) {\n    var state = _parseState(targets, vars);\n\n    _batchAction && _batchAction.states.push(state);\n    vars && vars.batch && Flip.batch(vars.batch).state.add(state);\n    return state;\n  };\n\n  Flip.from = function from(state, vars) {\n    vars = vars || {};\n    \"clearProps\" in vars || (vars.clearProps = true);\n    return _fromTo(state, _parseState(vars.targets || state.targets, {\n      props: vars.props || state.props,\n      simple: vars.simple,\n      kill: !!vars.kill\n    }), vars, -1);\n  };\n\n  Flip.to = function to(state, vars) {\n    return _fromTo(state, _parseState(vars.targets || state.targets, {\n      props: vars.props || state.props,\n      simple: vars.simple,\n      kill: !!vars.kill\n    }), vars, 1);\n  };\n\n  Flip.fromTo = function fromTo(fromState, toState, vars) {\n    return _fromTo(fromState, toState, vars);\n  };\n\n  Flip.fit = function fit(fromEl, toEl, vars) {\n    var v = vars ? _copy(vars, _fitReserved) : {},\n        _ref = vars || v,\n        absolute = _ref.absolute,\n        scale = _ref.scale,\n        getVars = _ref.getVars,\n        props = _ref.props,\n        runBackwards = _ref.runBackwards,\n        onComplete = _ref.onComplete,\n        simple = _ref.simple,\n        fitChild = vars && vars.fitChild && _getEl(vars.fitChild),\n        before = _parseElementState(toEl, props, simple, fromEl),\n        after = _parseElementState(fromEl, 0, simple, before),\n        inlineProps = props ? _memoizedRemoveProps[props] : _removeProps,\n        ctx = gsap.context();\n\n    props && _applyProps(v, before.props);\n\n    _recordInlineStyles(after, inlineProps);\n\n    if (runBackwards) {\n      \"immediateRender\" in v || (v.immediateRender = true);\n\n      v.onComplete = function () {\n        _applyInlineStyles(after);\n\n        onComplete && onComplete.apply(this, arguments);\n      };\n    }\n\n    absolute && _makeAbsolute(after, before);\n    v = _fit(after, before, scale || fitChild, props, fitChild, v.duration || getVars ? v : 0);\n    typeof vars === \"object\" && \"zIndex\" in vars && (v.zIndex = vars.zIndex);\n    ctx && !getVars && ctx.add(function () {\n      return function () {\n        return _applyInlineStyles(after);\n      };\n    });\n    return getVars ? v : v.duration ? gsap.to(after.element, v) : null;\n  };\n\n  Flip.makeAbsolute = function makeAbsolute(targetsOrStates, vars) {\n    return (targetsOrStates instanceof FlipState ? targetsOrStates : new FlipState(targetsOrStates, vars)).makeAbsolute();\n  };\n\n  Flip.batch = function batch(id) {\n    id || (id = \"default\");\n    return _batchLookup[id] || (_batchLookup[id] = new FlipBatch(id));\n  };\n\n  Flip.killFlipsOf = function killFlipsOf(targets, complete) {\n    (targets instanceof FlipState ? targets.targets : _toArray(targets)).forEach(function (t) {\n      return t && _killFlip(t._flip, complete !== false ? 1 : 2);\n    });\n  };\n\n  Flip.isFlipping = function isFlipping(target) {\n    var f = Flip.getByTarget(target);\n    return !!f && f.isActive();\n  };\n\n  Flip.getByTarget = function getByTarget(target) {\n    return (_getEl(target) || _emptyObj)._flip;\n  };\n\n  Flip.getElementState = function getElementState(target, props) {\n    return new ElementState(_getEl(target), props);\n  };\n\n  Flip.convertCoordinates = function convertCoordinates(fromElement, toElement, point) {\n    var m = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(toElement, true, true).multiply((0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(fromElement));\n    return point ? m.apply(point) : m;\n  };\n\n  Flip.register = function register(core) {\n    _body = typeof document !== \"undefined\" && document.body;\n\n    if (_body) {\n      gsap = core;\n\n      (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__._setDoc)(_body);\n\n      _toArray = gsap.utils.toArray;\n      _getStyleSaver = gsap.core.getStyleSaver;\n      var snap = gsap.utils.snap(0.1);\n\n      _closestTenth = function _closestTenth(value, add) {\n        return snap(parseFloat(value) + add);\n      };\n    }\n  };\n\n  return Flip;\n}();\nFlip.version = \"3.12.7\"; // function whenImagesLoad(el, func) {\n// \tlet pending = [],\n// \t\tonLoad = e => {\n// \t\t\tpending.splice(pending.indexOf(e.target), 1);\n// \t\t\te.target.removeEventListener(\"load\", onLoad);\n// \t\t\tpending.length || func();\n// \t\t};\n// \tgsap.utils.toArray(el.tagName.toLowerCase() === \"img\" ? el : el.querySelectorAll(\"img\")).forEach(img => img.complete || img.addEventListener(\"load\", onLoad) || pending.push(img));\n// \tpending.length || func();\n// }\n\ntypeof window !== \"undefined\" && window.gsap && window.gsap.registerPlugin(Flip);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gsap/Flip.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gsap/MotionPathPlugin.js":
/*!***********************************************!*\
  !*** ./node_modules/gsap/MotionPathPlugin.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MotionPathPlugin: function() { return /* binding */ MotionPathPlugin; },\n/* harmony export */   \"default\": function() { return /* binding */ MotionPathPlugin; }\n/* harmony export */ });\n/* harmony import */ var _utils_paths_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/paths.js */ \"(app-pages-browser)/./node_modules/gsap/utils/paths.js\");\n/* harmony import */ var _utils_matrix_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/matrix.js */ \"(app-pages-browser)/./node_modules/gsap/utils/matrix.js\");\n/*!\n * MotionPathPlugin 3.12.7\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\n\n\n\nvar _xProps = \"x,translateX,left,marginLeft,xPercent\".split(\",\"),\n    _yProps = \"y,translateY,top,marginTop,yPercent\".split(\",\"),\n    _DEG2RAD = Math.PI / 180,\n    gsap,\n    PropTween,\n    _getUnit,\n    _toArray,\n    _getStyleSaver,\n    _reverting,\n    _getGSAP = function _getGSAP() {\n  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _populateSegmentFromArray = function _populateSegmentFromArray(segment, values, property, mode) {\n  //mode: 0 = x but don't fill y yet, 1 = y, 2 = x and fill y with 0.\n  var l = values.length,\n      si = mode === 2 ? 0 : mode,\n      i = 0,\n      v;\n\n  for (; i < l; i++) {\n    segment[si] = v = parseFloat(values[i][property]);\n    mode === 2 && (segment[si + 1] = 0);\n    si += 2;\n  }\n\n  return segment;\n},\n    _getPropNum = function _getPropNum(target, prop, unit) {\n  return parseFloat(target._gsap.get(target, prop, unit || \"px\")) || 0;\n},\n    _relativize = function _relativize(segment) {\n  var x = segment[0],\n      y = segment[1],\n      i;\n\n  for (i = 2; i < segment.length; i += 2) {\n    x = segment[i] += x;\n    y = segment[i + 1] += y;\n  }\n},\n    // feed in an array of quadratic bezier points like [{x: 0, y: 0}, ...] and it'll convert it to cubic bezier\n// _quadToCubic = points => {\n// \tlet cubic = [],\n// \t\tl = points.length - 1,\n// \t\ti = 1,\n// \t\ta, b, c;\n// \tfor (; i < l; i+=2) {\n// \t\ta = points[i-1];\n// \t\tb = points[i];\n// \t\tc = points[i+1];\n// \t\tcubic.push(a, {x: (2 * b.x + a.x) / 3, y: (2 * b.y + a.y) / 3}, {x: (2 * b.x + c.x) / 3, y: (2 * b.y + c.y) / 3});\n// \t}\n// \tcubic.push(points[l]);\n// \treturn cubic;\n// },\n_segmentToRawPath = function _segmentToRawPath(plugin, segment, target, x, y, slicer, vars, unitX, unitY) {\n  if (vars.type === \"cubic\") {\n    segment = [segment];\n  } else {\n    vars.fromCurrent !== false && segment.unshift(_getPropNum(target, x, unitX), y ? _getPropNum(target, y, unitY) : 0);\n    vars.relative && _relativize(segment);\n    var pointFunc = y ? _utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.pointsToSegment : _utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.flatPointsToSegment;\n    segment = [pointFunc(segment, vars.curviness)];\n  }\n\n  segment = slicer(_align(segment, target, vars));\n\n  _addDimensionalPropTween(plugin, target, x, segment, \"x\", unitX);\n\n  y && _addDimensionalPropTween(plugin, target, y, segment, \"y\", unitY);\n  return (0,_utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.cacheRawPathMeasurements)(segment, vars.resolution || (vars.curviness === 0 ? 20 : 12)); //when curviness is 0, it creates control points right on top of the anchors which makes it more sensitive to resolution, thus we change the default accordingly.\n},\n    _emptyFunc = function _emptyFunc(v) {\n  return v;\n},\n    _numExp = /[-+\\.]*\\d+\\.?(?:e-|e\\+)?\\d*/g,\n    _originToPoint = function _originToPoint(element, origin, parentMatrix) {\n  // origin is an array of normalized values (0-1) in relation to the width/height, so [0.5, 0.5] would be the center. It can also be \"auto\" in which case it will be the top left unless it's a <path>, when it will start at the beginning of the path itself.\n  var m = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_1__.getGlobalMatrix)(element),\n      x = 0,\n      y = 0,\n      svg;\n\n  if ((element.tagName + \"\").toLowerCase() === \"svg\") {\n    svg = element.viewBox.baseVal;\n    svg.width || (svg = {\n      width: +element.getAttribute(\"width\"),\n      height: +element.getAttribute(\"height\")\n    });\n  } else {\n    svg = origin && element.getBBox && element.getBBox();\n  }\n\n  if (origin && origin !== \"auto\") {\n    x = origin.push ? origin[0] * (svg ? svg.width : element.offsetWidth || 0) : origin.x;\n    y = origin.push ? origin[1] * (svg ? svg.height : element.offsetHeight || 0) : origin.y;\n  }\n\n  return parentMatrix.apply(x || y ? m.apply({\n    x: x,\n    y: y\n  }) : {\n    x: m.e,\n    y: m.f\n  });\n},\n    _getAlignMatrix = function _getAlignMatrix(fromElement, toElement, fromOrigin, toOrigin) {\n  var parentMatrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_1__.getGlobalMatrix)(fromElement.parentNode, true, true),\n      m = parentMatrix.clone().multiply((0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_1__.getGlobalMatrix)(toElement)),\n      fromPoint = _originToPoint(fromElement, fromOrigin, parentMatrix),\n      _originToPoint2 = _originToPoint(toElement, toOrigin, parentMatrix),\n      x = _originToPoint2.x,\n      y = _originToPoint2.y,\n      p;\n\n  m.e = m.f = 0;\n\n  if (toOrigin === \"auto\" && toElement.getTotalLength && toElement.tagName.toLowerCase() === \"path\") {\n    p = toElement.getAttribute(\"d\").match(_numExp) || [];\n    p = m.apply({\n      x: +p[0],\n      y: +p[1]\n    });\n    x += p.x;\n    y += p.y;\n  } //if (p || (toElement.getBBox && fromElement.getBBox && toElement.ownerSVGElement === fromElement.ownerSVGElement)) {\n\n\n  if (p) {\n    p = m.apply(toElement.getBBox());\n    x -= p.x;\n    y -= p.y;\n  }\n\n  m.e = x - fromPoint.x;\n  m.f = y - fromPoint.y;\n  return m;\n},\n    _align = function _align(rawPath, target, _ref) {\n  var align = _ref.align,\n      matrix = _ref.matrix,\n      offsetX = _ref.offsetX,\n      offsetY = _ref.offsetY,\n      alignOrigin = _ref.alignOrigin;\n\n  var x = rawPath[0][0],\n      y = rawPath[0][1],\n      curX = _getPropNum(target, \"x\"),\n      curY = _getPropNum(target, \"y\"),\n      alignTarget,\n      m,\n      p;\n\n  if (!rawPath || !rawPath.length) {\n    return (0,_utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.getRawPath)(\"M0,0L0,0\");\n  }\n\n  if (align) {\n    if (align === \"self\" || (alignTarget = _toArray(align)[0] || target) === target) {\n      (0,_utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.transformRawPath)(rawPath, 1, 0, 0, 1, curX - x, curY - y);\n    } else {\n      if (alignOrigin && alignOrigin[2] !== false) {\n        gsap.set(target, {\n          transformOrigin: alignOrigin[0] * 100 + \"% \" + alignOrigin[1] * 100 + \"%\"\n        });\n      } else {\n        alignOrigin = [_getPropNum(target, \"xPercent\") / -100, _getPropNum(target, \"yPercent\") / -100];\n      }\n\n      m = _getAlignMatrix(target, alignTarget, alignOrigin, \"auto\");\n      p = m.apply({\n        x: x,\n        y: y\n      });\n      (0,_utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.transformRawPath)(rawPath, m.a, m.b, m.c, m.d, curX + m.e - (p.x - m.e), curY + m.f - (p.y - m.f));\n    }\n  }\n\n  if (matrix) {\n    (0,_utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.transformRawPath)(rawPath, matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);\n  } else if (offsetX || offsetY) {\n    (0,_utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.transformRawPath)(rawPath, 1, 0, 0, 1, offsetX || 0, offsetY || 0);\n  }\n\n  return rawPath;\n},\n    _addDimensionalPropTween = function _addDimensionalPropTween(plugin, target, property, rawPath, pathProperty, forceUnit) {\n  var cache = target._gsap,\n      harness = cache.harness,\n      alias = harness && harness.aliases && harness.aliases[property],\n      prop = alias && alias.indexOf(\",\") < 0 ? alias : property,\n      pt = plugin._pt = new PropTween(plugin._pt, target, prop, 0, 0, _emptyFunc, 0, cache.set(target, prop, plugin));\n  pt.u = _getUnit(cache.get(target, prop, forceUnit)) || 0;\n  pt.path = rawPath;\n  pt.pp = pathProperty;\n\n  plugin._props.push(prop);\n},\n    _sliceModifier = function _sliceModifier(start, end) {\n  return function (rawPath) {\n    return start || end !== 1 ? (0,_utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.sliceRawPath)(rawPath, start, end) : rawPath;\n  };\n};\n\nvar MotionPathPlugin = {\n  version: \"3.12.7\",\n  name: \"motionPath\",\n  register: function register(core, Plugin, propTween) {\n    gsap = core;\n    _getUnit = gsap.utils.getUnit;\n    _toArray = gsap.utils.toArray;\n    _getStyleSaver = gsap.core.getStyleSaver;\n\n    _reverting = gsap.core.reverting || function () {};\n\n    PropTween = propTween;\n  },\n  init: function init(target, vars, tween) {\n    if (!gsap) {\n      console.warn(\"Please gsap.registerPlugin(MotionPathPlugin)\");\n      return false;\n    }\n\n    if (!(typeof vars === \"object\" && !vars.style) || !vars.path) {\n      vars = {\n        path: vars\n      };\n    }\n\n    var rawPaths = [],\n        _vars = vars,\n        path = _vars.path,\n        autoRotate = _vars.autoRotate,\n        unitX = _vars.unitX,\n        unitY = _vars.unitY,\n        x = _vars.x,\n        y = _vars.y,\n        firstObj = path[0],\n        slicer = _sliceModifier(vars.start, \"end\" in vars ? vars.end : 1),\n        rawPath,\n        p;\n\n    this.rawPaths = rawPaths;\n    this.target = target;\n    this.tween = tween;\n    this.styles = _getStyleSaver && _getStyleSaver(target, \"transform\");\n\n    if (this.rotate = autoRotate || autoRotate === 0) {\n      //get the rotational data FIRST so that the setTransform() method is called in the correct order in the render() loop - rotation gets set last.\n      this.rOffset = parseFloat(autoRotate) || 0;\n      this.radians = !!vars.useRadians;\n      this.rProp = vars.rotation || \"rotation\"; // rotation property\n\n      this.rSet = target._gsap.set(target, this.rProp, this); // rotation setter\n\n      this.ru = _getUnit(target._gsap.get(target, this.rProp)) || 0; // rotation units\n    }\n\n    if (Array.isArray(path) && !(\"closed\" in path) && typeof firstObj !== \"number\") {\n      for (p in firstObj) {\n        if (!x && ~_xProps.indexOf(p)) {\n          x = p;\n        } else if (!y && ~_yProps.indexOf(p)) {\n          y = p;\n        }\n      }\n\n      if (x && y) {\n        //correlated values\n        rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray(_populateSegmentFromArray([], path, x, 0), path, y, 1), target, x, y, slicer, vars, unitX || _getUnit(path[0][x]), unitY || _getUnit(path[0][y])));\n      } else {\n        x = y = 0;\n      }\n\n      for (p in firstObj) {\n        p !== x && p !== y && rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray([], path, p, 2), target, p, 0, slicer, vars, _getUnit(path[0][p])));\n      }\n    } else {\n      rawPath = slicer(_align((0,_utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.getRawPath)(vars.path), target, vars));\n      (0,_utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.cacheRawPathMeasurements)(rawPath, vars.resolution);\n      rawPaths.push(rawPath);\n\n      _addDimensionalPropTween(this, target, vars.x || \"x\", rawPath, \"x\", vars.unitX || \"px\");\n\n      _addDimensionalPropTween(this, target, vars.y || \"y\", rawPath, \"y\", vars.unitY || \"px\");\n    }\n\n    tween.vars.immediateRender && this.render(tween.progress(), this);\n  },\n  render: function render(ratio, data) {\n    var rawPaths = data.rawPaths,\n        i = rawPaths.length,\n        pt = data._pt;\n\n    if (data.tween._time || !_reverting()) {\n      if (ratio > 1) {\n        ratio = 1;\n      } else if (ratio < 0) {\n        ratio = 0;\n      }\n\n      while (i--) {\n        (0,_utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.getPositionOnPath)(rawPaths[i], ratio, !i && data.rotate, rawPaths[i]);\n      }\n\n      while (pt) {\n        pt.set(pt.t, pt.p, pt.path[pt.pp] + pt.u, pt.d, ratio);\n        pt = pt._next;\n      }\n\n      data.rotate && data.rSet(data.target, data.rProp, rawPaths[0].angle * (data.radians ? _DEG2RAD : 1) + data.rOffset + data.ru, data, ratio);\n    } else {\n      data.styles.revert();\n    }\n  },\n  getLength: function getLength(path) {\n    return (0,_utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.cacheRawPathMeasurements)((0,_utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.getRawPath)(path)).totalLength;\n  },\n  sliceRawPath: _utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.sliceRawPath,\n  getRawPath: _utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.getRawPath,\n  pointsToSegment: _utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.pointsToSegment,\n  stringToRawPath: _utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.stringToRawPath,\n  rawPathToString: _utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.rawPathToString,\n  transformRawPath: _utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.transformRawPath,\n  getGlobalMatrix: _utils_matrix_js__WEBPACK_IMPORTED_MODULE_1__.getGlobalMatrix,\n  getPositionOnPath: _utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.getPositionOnPath,\n  cacheRawPathMeasurements: _utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.cacheRawPathMeasurements,\n  convertToPath: function convertToPath(targets, swap) {\n    return _toArray(targets).map(function (target) {\n      return (0,_utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.convertToPath)(target, swap !== false);\n    });\n  },\n  convertCoordinates: function convertCoordinates(fromElement, toElement, point) {\n    var m = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_1__.getGlobalMatrix)(toElement, true, true).multiply((0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_1__.getGlobalMatrix)(fromElement));\n    return point ? m.apply(point) : m;\n  },\n  getAlignMatrix: _getAlignMatrix,\n  getRelativePosition: function getRelativePosition(fromElement, toElement, fromOrigin, toOrigin) {\n    var m = _getAlignMatrix(fromElement, toElement, fromOrigin, toOrigin);\n\n    return {\n      x: m.e,\n      y: m.f\n    };\n  },\n  arrayToRawPath: function arrayToRawPath(value, vars) {\n    vars = vars || {};\n\n    var segment = _populateSegmentFromArray(_populateSegmentFromArray([], value, vars.x || \"x\", 0), value, vars.y || \"y\", 1);\n\n    vars.relative && _relativize(segment);\n    return [vars.type === \"cubic\" ? segment : (0,_utils_paths_js__WEBPACK_IMPORTED_MODULE_0__.pointsToSegment)(segment, vars.curviness)];\n  }\n};\n_getGSAP() && gsap.registerPlugin(MotionPathPlugin);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gsap/MotionPathPlugin.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gsap/PixiPlugin.js":
/*!*****************************************!*\
  !*** ./node_modules/gsap/PixiPlugin.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PixiPlugin: function() { return /* binding */ PixiPlugin; },\n/* harmony export */   \"default\": function() { return /* binding */ PixiPlugin; }\n/* harmony export */ });\n/*!\n * PixiPlugin 3.12.7\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar gsap,\n    _splitColor,\n    _coreInitted,\n    _PIXI,\n    PropTween,\n    _getSetter,\n    _isV4,\n    _isV8Plus,\n    _windowExists = function _windowExists() {\n  return typeof window !== \"undefined\";\n},\n    _getGSAP = function _getGSAP() {\n  return gsap || _windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _isFunction = function _isFunction(value) {\n  return typeof value === \"function\";\n},\n    _warn = function _warn(message) {\n  return console.warn(message);\n},\n    _idMatrix = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],\n    _lumR = 0.212671,\n    _lumG = 0.715160,\n    _lumB = 0.072169,\n    _filterClass = function _filterClass(name) {\n  return _isFunction(_PIXI[name]) ? _PIXI[name] : _PIXI.filters[name];\n},\n    // in PIXI 7.1, filters moved from PIXI.filters to just PIXI\n_applyMatrix = function _applyMatrix(m, m2) {\n  var temp = [],\n      i = 0,\n      z = 0,\n      y,\n      x;\n\n  for (y = 0; y < 4; y++) {\n    for (x = 0; x < 5; x++) {\n      z = x === 4 ? m[i + 4] : 0;\n      temp[i + x] = m[i] * m2[x] + m[i + 1] * m2[x + 5] + m[i + 2] * m2[x + 10] + m[i + 3] * m2[x + 15] + z;\n    }\n\n    i += 5;\n  }\n\n  return temp;\n},\n    _setSaturation = function _setSaturation(m, n) {\n  var inv = 1 - n,\n      r = inv * _lumR,\n      g = inv * _lumG,\n      b = inv * _lumB;\n  return _applyMatrix([r + n, g, b, 0, 0, r, g + n, b, 0, 0, r, g, b + n, 0, 0, 0, 0, 0, 1, 0], m);\n},\n    _colorize = function _colorize(m, color, amount) {\n  var c = _splitColor(color),\n      r = c[0] / 255,\n      g = c[1] / 255,\n      b = c[2] / 255,\n      inv = 1 - amount;\n\n  return _applyMatrix([inv + amount * r * _lumR, amount * r * _lumG, amount * r * _lumB, 0, 0, amount * g * _lumR, inv + amount * g * _lumG, amount * g * _lumB, 0, 0, amount * b * _lumR, amount * b * _lumG, inv + amount * b * _lumB, 0, 0, 0, 0, 0, 1, 0], m);\n},\n    _setHue = function _setHue(m, n) {\n  n *= Math.PI / 180;\n  var c = Math.cos(n),\n      s = Math.sin(n);\n  return _applyMatrix([_lumR + c * (1 - _lumR) + s * -_lumR, _lumG + c * -_lumG + s * -_lumG, _lumB + c * -_lumB + s * (1 - _lumB), 0, 0, _lumR + c * -_lumR + s * 0.143, _lumG + c * (1 - _lumG) + s * 0.14, _lumB + c * -_lumB + s * -0.283, 0, 0, _lumR + c * -_lumR + s * -(1 - _lumR), _lumG + c * -_lumG + s * _lumG, _lumB + c * (1 - _lumB) + s * _lumB, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], m);\n},\n    _setContrast = function _setContrast(m, n) {\n  return _applyMatrix([n, 0, 0, 0, 0.5 * (1 - n), 0, n, 0, 0, 0.5 * (1 - n), 0, 0, n, 0, 0.5 * (1 - n), 0, 0, 0, 1, 0], m);\n},\n    _getFilter = function _getFilter(target, type) {\n  var filterClass = _filterClass(type),\n      filters = target.filters || [],\n      i = filters.length,\n      filter;\n\n  filterClass || _warn(type + \" not found. PixiPlugin.registerPIXI(PIXI)\");\n\n  while (--i > -1) {\n    if (filters[i] instanceof filterClass) {\n      return filters[i];\n    }\n  }\n\n  filter = new filterClass();\n\n  if (type === \"BlurFilter\") {\n    filter.blur = 0;\n  }\n\n  filters.push(filter);\n  target.filters = filters;\n  return filter;\n},\n    _addColorMatrixFilterCacheTween = function _addColorMatrixFilterCacheTween(p, plugin, cache, vars) {\n  //we cache the ColorMatrixFilter components in a _gsColorMatrixFilter object attached to the target object so that it's easy to grab the current value at any time.\n  plugin.add(cache, p, cache[p], vars[p]);\n\n  plugin._props.push(p);\n},\n    _applyBrightnessToMatrix = function _applyBrightnessToMatrix(brightness, matrix) {\n  var filterClass = _filterClass(\"ColorMatrixFilter\"),\n      temp = new filterClass();\n\n  temp.matrix = matrix;\n  temp.brightness(brightness, true);\n  return temp.matrix;\n},\n    _copy = function _copy(obj) {\n  var copy = {},\n      p;\n\n  for (p in obj) {\n    copy[p] = obj[p];\n  }\n\n  return copy;\n},\n    _CMFdefaults = {\n  contrast: 1,\n  saturation: 1,\n  colorizeAmount: 0,\n  colorize: \"rgb(255,255,255)\",\n  hue: 0,\n  brightness: 1\n},\n    _parseColorMatrixFilter = function _parseColorMatrixFilter(target, v, pg) {\n  var filter = _getFilter(target, \"ColorMatrixFilter\"),\n      cache = target._gsColorMatrixFilter = target._gsColorMatrixFilter || _copy(_CMFdefaults),\n      combine = v.combineCMF && !(\"colorMatrixFilter\" in v && !v.colorMatrixFilter),\n      i,\n      matrix,\n      startMatrix;\n\n  startMatrix = filter.matrix;\n\n  if (v.resolution) {\n    filter.resolution = v.resolution;\n  }\n\n  if (v.matrix && v.matrix.length === startMatrix.length) {\n    matrix = v.matrix;\n\n    if (cache.contrast !== 1) {\n      _addColorMatrixFilterCacheTween(\"contrast\", pg, cache, _CMFdefaults);\n    }\n\n    if (cache.hue) {\n      _addColorMatrixFilterCacheTween(\"hue\", pg, cache, _CMFdefaults);\n    }\n\n    if (cache.brightness !== 1) {\n      _addColorMatrixFilterCacheTween(\"brightness\", pg, cache, _CMFdefaults);\n    }\n\n    if (cache.colorizeAmount) {\n      _addColorMatrixFilterCacheTween(\"colorize\", pg, cache, _CMFdefaults);\n\n      _addColorMatrixFilterCacheTween(\"colorizeAmount\", pg, cache, _CMFdefaults);\n    }\n\n    if (cache.saturation !== 1) {\n      _addColorMatrixFilterCacheTween(\"saturation\", pg, cache, _CMFdefaults);\n    }\n  } else {\n    matrix = _idMatrix.slice();\n\n    if (v.contrast != null) {\n      matrix = _setContrast(matrix, +v.contrast);\n\n      _addColorMatrixFilterCacheTween(\"contrast\", pg, cache, v);\n    } else if (cache.contrast !== 1) {\n      if (combine) {\n        matrix = _setContrast(matrix, cache.contrast);\n      } else {\n        _addColorMatrixFilterCacheTween(\"contrast\", pg, cache, _CMFdefaults);\n      }\n    }\n\n    if (v.hue != null) {\n      matrix = _setHue(matrix, +v.hue);\n\n      _addColorMatrixFilterCacheTween(\"hue\", pg, cache, v);\n    } else if (cache.hue) {\n      if (combine) {\n        matrix = _setHue(matrix, cache.hue);\n      } else {\n        _addColorMatrixFilterCacheTween(\"hue\", pg, cache, _CMFdefaults);\n      }\n    }\n\n    if (v.brightness != null) {\n      matrix = _applyBrightnessToMatrix(+v.brightness, matrix);\n\n      _addColorMatrixFilterCacheTween(\"brightness\", pg, cache, v);\n    } else if (cache.brightness !== 1) {\n      if (combine) {\n        matrix = _applyBrightnessToMatrix(cache.brightness, matrix);\n      } else {\n        _addColorMatrixFilterCacheTween(\"brightness\", pg, cache, _CMFdefaults);\n      }\n    }\n\n    if (v.colorize != null) {\n      v.colorizeAmount = \"colorizeAmount\" in v ? +v.colorizeAmount : 1;\n      matrix = _colorize(matrix, v.colorize, v.colorizeAmount);\n\n      _addColorMatrixFilterCacheTween(\"colorize\", pg, cache, v);\n\n      _addColorMatrixFilterCacheTween(\"colorizeAmount\", pg, cache, v);\n    } else if (cache.colorizeAmount) {\n      if (combine) {\n        matrix = _colorize(matrix, cache.colorize, cache.colorizeAmount);\n      } else {\n        _addColorMatrixFilterCacheTween(\"colorize\", pg, cache, _CMFdefaults);\n\n        _addColorMatrixFilterCacheTween(\"colorizeAmount\", pg, cache, _CMFdefaults);\n      }\n    }\n\n    if (v.saturation != null) {\n      matrix = _setSaturation(matrix, +v.saturation);\n\n      _addColorMatrixFilterCacheTween(\"saturation\", pg, cache, v);\n    } else if (cache.saturation !== 1) {\n      if (combine) {\n        matrix = _setSaturation(matrix, cache.saturation);\n      } else {\n        _addColorMatrixFilterCacheTween(\"saturation\", pg, cache, _CMFdefaults);\n      }\n    }\n  }\n\n  i = matrix.length;\n\n  while (--i > -1) {\n    if (matrix[i] !== startMatrix[i]) {\n      pg.add(startMatrix, i, startMatrix[i], matrix[i], \"colorMatrixFilter\");\n    }\n  }\n\n  pg._props.push(\"colorMatrixFilter\");\n},\n    _renderColor = function _renderColor(ratio, _ref) {\n  var t = _ref.t,\n      p = _ref.p,\n      color = _ref.color,\n      set = _ref.set;\n  set(t, p, color[0] << 16 | color[1] << 8 | color[2]);\n},\n    _renderDirtyCache = function _renderDirtyCache(ratio, _ref2) {\n  var g = _ref2.g;\n\n  if (_isV8Plus) {\n    g.fill();\n    g.stroke();\n  } else if (g) {\n    // in order for PixiJS to actually redraw GraphicsData, we've gotta increment the \"dirty\" and \"clearDirty\" values. If we don't do this, the values will be tween properly, but not rendered.\n    g.dirty++;\n    g.clearDirty++;\n  }\n},\n    _renderAutoAlpha = function _renderAutoAlpha(ratio, data) {\n  data.t.visible = !!data.t.alpha;\n},\n    _addColorTween = function _addColorTween(target, p, value, plugin) {\n  var currentValue = target[p],\n      startColor = _splitColor(_isFunction(currentValue) ? target[p.indexOf(\"set\") || !_isFunction(target[\"get\" + p.substr(3)]) ? p : \"get\" + p.substr(3)]() : currentValue),\n      endColor = _splitColor(value);\n\n  plugin._pt = new PropTween(plugin._pt, target, p, 0, 0, _renderColor, {\n    t: target,\n    p: p,\n    color: startColor,\n    set: _getSetter(target, p)\n  });\n  plugin.add(startColor, 0, startColor[0], endColor[0]);\n  plugin.add(startColor, 1, startColor[1], endColor[1]);\n  plugin.add(startColor, 2, startColor[2], endColor[2]);\n},\n    _colorProps = {\n  tint: 1,\n  lineColor: 1,\n  fillColor: 1,\n  strokeColor: 1\n},\n    _xyContexts = \"position,scale,skew,pivot,anchor,tilePosition,tileScale\".split(\",\"),\n    _contexts = {\n  x: \"position\",\n  y: \"position\",\n  tileX: \"tilePosition\",\n  tileY: \"tilePosition\"\n},\n    _colorMatrixFilterProps = {\n  colorMatrixFilter: 1,\n  saturation: 1,\n  contrast: 1,\n  hue: 1,\n  colorize: 1,\n  colorizeAmount: 1,\n  brightness: 1,\n  combineCMF: 1\n},\n    _DEG2RAD = Math.PI / 180,\n    _isString = function _isString(value) {\n  return typeof value === \"string\";\n},\n    _degreesToRadians = function _degreesToRadians(value) {\n  return _isString(value) && value.charAt(1) === \"=\" ? value.substr(0, 2) + parseFloat(value.substr(2)) * _DEG2RAD : value * _DEG2RAD;\n},\n    _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {\n  return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 100000) / 100000, data);\n},\n    _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue, radians) {\n  var cap = 360 * (radians ? _DEG2RAD : 1),\n      isString = _isString(endValue),\n      relative = isString && endValue.charAt(1) === \"=\" ? +(endValue.charAt(0) + \"1\") : 0,\n      endNum = parseFloat(relative ? endValue.substr(2) : endValue) * (radians ? _DEG2RAD : 1),\n      change = relative ? endNum * relative : endNum - startNum,\n      finalValue = startNum + change,\n      direction,\n      pt;\n\n  if (isString) {\n    direction = endValue.split(\"_\")[1];\n\n    if (direction === \"short\") {\n      change %= cap;\n\n      if (change !== change % (cap / 2)) {\n        change += change < 0 ? cap : -cap;\n      }\n    }\n\n    if (direction === \"cw\" && change < 0) {\n      change = (change + cap * 1e10) % cap - ~~(change / cap) * cap;\n    } else if (direction === \"ccw\" && change > 0) {\n      change = (change - cap * 1e10) % cap - ~~(change / cap) * cap;\n    }\n  }\n\n  plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);\n  pt.e = finalValue;\n  return pt;\n},\n    _initCore = function _initCore() {\n  if (!_coreInitted) {\n    gsap = _getGSAP();\n    _PIXI = _coreInitted = _PIXI || _windowExists() && window.PIXI;\n    var version = _PIXI && _PIXI.VERSION && parseFloat(_PIXI.VERSION.split(\".\")[0]) || 0;\n    _isV4 = version === 4;\n    _isV8Plus = version >= 8;\n\n    _splitColor = function _splitColor(color) {\n      return gsap.utils.splitColor((color + \"\").substr(0, 2) === \"0x\" ? \"#\" + color.substr(2) : color);\n    }; // some colors in PIXI are reported as \"0xFF4421\" instead of \"#FF4421\".\n\n  }\n},\n    i,\n    p; //context setup...\n\n\nfor (i = 0; i < _xyContexts.length; i++) {\n  p = _xyContexts[i];\n  _contexts[p + \"X\"] = p;\n  _contexts[p + \"Y\"] = p;\n}\n\nvar PixiPlugin = {\n  version: \"3.12.7\",\n  name: \"pixi\",\n  register: function register(core, Plugin, propTween) {\n    gsap = core;\n    PropTween = propTween;\n    _getSetter = Plugin.getSetter;\n\n    _initCore();\n  },\n  headless: true,\n  // doesn't need window\n  registerPIXI: function registerPIXI(pixi) {\n    _PIXI = pixi;\n  },\n  init: function init(target, values, tween, index, targets) {\n    _PIXI || _initCore();\n\n    if (!_PIXI) {\n      _warn(\"PIXI was not found. PixiPlugin.registerPIXI(PIXI);\");\n\n      return false;\n    }\n\n    var context, axis, value, colorMatrix, filter, p, padding, i, data, subProp;\n\n    for (p in values) {\n      context = _contexts[p];\n      value = values[p];\n\n      if (context) {\n        axis = ~p.charAt(p.length - 1).toLowerCase().indexOf(\"x\") ? \"x\" : \"y\";\n        this.add(target[context], axis, target[context][axis], context === \"skew\" ? _degreesToRadians(value) : value, 0, 0, 0, 0, 0, 1);\n      } else if (p === \"scale\" || p === \"anchor\" || p === \"pivot\" || p === \"tileScale\") {\n        this.add(target[p], \"x\", target[p].x, value);\n        this.add(target[p], \"y\", target[p].y, value);\n      } else if (p === \"rotation\" || p === \"angle\") {\n        //PIXI expects rotation in radians, but as a convenience we let folks define it in degrees and we do the conversion.\n        _addRotationalPropTween(this, target, p, target[p], value, p === \"rotation\");\n      } else if (_colorMatrixFilterProps[p]) {\n        if (!colorMatrix) {\n          _parseColorMatrixFilter(target, values.colorMatrixFilter || values, this);\n\n          colorMatrix = true;\n        }\n      } else if (p === \"blur\" || p === \"blurX\" || p === \"blurY\" || p === \"blurPadding\") {\n        filter = _getFilter(target, \"BlurFilter\");\n        this.add(filter, p, filter[p], value);\n\n        if (values.blurPadding !== 0) {\n          padding = values.blurPadding || Math.max(filter[p], value) * 2;\n          i = target.filters.length;\n\n          while (--i > -1) {\n            target.filters[i].padding = Math.max(target.filters[i].padding, padding); //if we don't expand the padding on all the filters, it can look clipped.\n          }\n        }\n      } else if (_colorProps[p]) {\n        if ((p === \"lineColor\" || p === \"fillColor\" || p === \"strokeColor\") && target instanceof _PIXI.Graphics) {\n          data = \"fillStyle\" in target ? [target] : (target.geometry || target).graphicsData; //\"geometry\" was introduced in PIXI version 5\n\n          subProp = p.substr(0, p.length - 5);\n          _isV8Plus && subProp === \"line\" && (subProp = \"stroke\"); // in v8, lineColor became strokeColor.\n\n          this._pt = new PropTween(this._pt, target, p, 0, 0, _renderDirtyCache, {\n            g: target.geometry || target\n          });\n          i = data.length;\n\n          while (--i > -1) {\n            _addColorTween(_isV4 ? data[i] : data[i][subProp + \"Style\"], _isV4 ? p : \"color\", value, this);\n          }\n        } else {\n          _addColorTween(target, p, value, this);\n        }\n      } else if (p === \"autoAlpha\") {\n        this._pt = new PropTween(this._pt, target, \"visible\", 0, 0, _renderAutoAlpha);\n        this.add(target, \"alpha\", target.alpha, value);\n\n        this._props.push(\"alpha\", \"visible\");\n      } else if (p !== \"resolution\") {\n        this.add(target, p, \"get\", value);\n      }\n\n      this._props.push(p);\n    }\n  }\n};\n_getGSAP() && gsap.registerPlugin(PixiPlugin);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gsap/PixiPlugin.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gsap/ScrollToPlugin.js":
/*!*********************************************!*\
  !*** ./node_modules/gsap/ScrollToPlugin.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ScrollToPlugin: function() { return /* binding */ ScrollToPlugin; },\n/* harmony export */   \"default\": function() { return /* binding */ ScrollToPlugin; }\n/* harmony export */ });\n/*!\n * ScrollToPlugin 3.12.7\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar gsap,\n    _coreInitted,\n    _window,\n    _docEl,\n    _body,\n    _toArray,\n    _config,\n    ScrollTrigger,\n    _windowExists = function _windowExists() {\n  return typeof window !== \"undefined\";\n},\n    _getGSAP = function _getGSAP() {\n  return gsap || _windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _isString = function _isString(value) {\n  return typeof value === \"string\";\n},\n    _isFunction = function _isFunction(value) {\n  return typeof value === \"function\";\n},\n    _max = function _max(element, axis) {\n  var dim = axis === \"x\" ? \"Width\" : \"Height\",\n      scroll = \"scroll\" + dim,\n      client = \"client\" + dim;\n  return element === _window || element === _docEl || element === _body ? Math.max(_docEl[scroll], _body[scroll]) - (_window[\"inner\" + dim] || _docEl[client] || _body[client]) : element[scroll] - element[\"offset\" + dim];\n},\n    _buildGetter = function _buildGetter(e, axis) {\n  //pass in an element and an axis (\"x\" or \"y\") and it'll return a getter function for the scroll position of that element (like scrollTop or scrollLeft, although if the element is the window, it'll use the pageXOffset/pageYOffset or the documentElement's scrollTop/scrollLeft or document.body's. Basically this streamlines things and makes a very fast getter across browsers.\n  var p = \"scroll\" + (axis === \"x\" ? \"Left\" : \"Top\");\n\n  if (e === _window) {\n    if (e.pageXOffset != null) {\n      p = \"page\" + axis.toUpperCase() + \"Offset\";\n    } else {\n      e = _docEl[p] != null ? _docEl : _body;\n    }\n  }\n\n  return function () {\n    return e[p];\n  };\n},\n    _clean = function _clean(value, index, target, targets) {\n  _isFunction(value) && (value = value(index, target, targets));\n\n  if (typeof value !== \"object\") {\n    return _isString(value) && value !== \"max\" && value.charAt(1) !== \"=\" ? {\n      x: value,\n      y: value\n    } : {\n      y: value\n    }; //if we don't receive an object as the parameter, assume the user intends \"y\".\n  } else if (value.nodeType) {\n    return {\n      y: value,\n      x: value\n    };\n  } else {\n    var result = {},\n        p;\n\n    for (p in value) {\n      result[p] = p !== \"onAutoKill\" && _isFunction(value[p]) ? value[p](index, target, targets) : value[p];\n    }\n\n    return result;\n  }\n},\n    _getOffset = function _getOffset(element, container) {\n  element = _toArray(element)[0];\n\n  if (!element || !element.getBoundingClientRect) {\n    return console.warn(\"scrollTo target doesn't exist. Using 0\") || {\n      x: 0,\n      y: 0\n    };\n  }\n\n  var rect = element.getBoundingClientRect(),\n      isRoot = !container || container === _window || container === _body,\n      cRect = isRoot ? {\n    top: _docEl.clientTop - (_window.pageYOffset || _docEl.scrollTop || _body.scrollTop || 0),\n    left: _docEl.clientLeft - (_window.pageXOffset || _docEl.scrollLeft || _body.scrollLeft || 0)\n  } : container.getBoundingClientRect(),\n      offsets = {\n    x: rect.left - cRect.left,\n    y: rect.top - cRect.top\n  };\n\n  if (!isRoot && container) {\n    //only add the current scroll position if it's not the window/body.\n    offsets.x += _buildGetter(container, \"x\")();\n    offsets.y += _buildGetter(container, \"y\")();\n  }\n\n  return offsets;\n},\n    _parseVal = function _parseVal(value, target, axis, currentVal, offset) {\n  return !isNaN(value) && typeof value !== \"object\" ? parseFloat(value) - offset : _isString(value) && value.charAt(1) === \"=\" ? parseFloat(value.substr(2)) * (value.charAt(0) === \"-\" ? -1 : 1) + currentVal - offset : value === \"max\" ? _max(target, axis) - offset : Math.min(_max(target, axis), _getOffset(value, target)[axis] - offset);\n},\n    _initCore = function _initCore() {\n  gsap = _getGSAP();\n\n  if (_windowExists() && gsap && typeof document !== \"undefined\" && document.body) {\n    _window = window;\n    _body = document.body;\n    _docEl = document.documentElement;\n    _toArray = gsap.utils.toArray;\n    gsap.config({\n      autoKillThreshold: 7\n    });\n    _config = gsap.config();\n    _coreInitted = 1;\n  }\n};\n\nvar ScrollToPlugin = {\n  version: \"3.12.7\",\n  name: \"scrollTo\",\n  rawVars: 1,\n  register: function register(core) {\n    gsap = core;\n\n    _initCore();\n  },\n  init: function init(target, value, tween, index, targets) {\n    _coreInitted || _initCore();\n    var data = this,\n        snapType = gsap.getProperty(target, \"scrollSnapType\");\n    data.isWin = target === _window;\n    data.target = target;\n    data.tween = tween;\n    value = _clean(value, index, target, targets);\n    data.vars = value;\n    data.autoKill = !!(\"autoKill\" in value ? value : _config).autoKill;\n    data.getX = _buildGetter(target, \"x\");\n    data.getY = _buildGetter(target, \"y\");\n    data.x = data.xPrev = data.getX();\n    data.y = data.yPrev = data.getY();\n    ScrollTrigger || (ScrollTrigger = gsap.core.globals().ScrollTrigger);\n    gsap.getProperty(target, \"scrollBehavior\") === \"smooth\" && gsap.set(target, {\n      scrollBehavior: \"auto\"\n    });\n\n    if (snapType && snapType !== \"none\") {\n      // disable scroll snapping to avoid strange behavior\n      data.snap = 1;\n      data.snapInline = target.style.scrollSnapType;\n      target.style.scrollSnapType = \"none\";\n    }\n\n    if (value.x != null) {\n      data.add(data, \"x\", data.x, _parseVal(value.x, target, \"x\", data.x, value.offsetX || 0), index, targets);\n\n      data._props.push(\"scrollTo_x\");\n    } else {\n      data.skipX = 1;\n    }\n\n    if (value.y != null) {\n      data.add(data, \"y\", data.y, _parseVal(value.y, target, \"y\", data.y, value.offsetY || 0), index, targets);\n\n      data._props.push(\"scrollTo_y\");\n    } else {\n      data.skipY = 1;\n    }\n  },\n  render: function render(ratio, data) {\n    var pt = data._pt,\n        target = data.target,\n        tween = data.tween,\n        autoKill = data.autoKill,\n        xPrev = data.xPrev,\n        yPrev = data.yPrev,\n        isWin = data.isWin,\n        snap = data.snap,\n        snapInline = data.snapInline,\n        x,\n        y,\n        yDif,\n        xDif,\n        threshold;\n\n    while (pt) {\n      pt.r(ratio, pt.d);\n      pt = pt._next;\n    }\n\n    x = isWin || !data.skipX ? data.getX() : xPrev;\n    y = isWin || !data.skipY ? data.getY() : yPrev;\n    yDif = y - yPrev;\n    xDif = x - xPrev;\n    threshold = _config.autoKillThreshold;\n\n    if (data.x < 0) {\n      //can't scroll to a position less than 0! Might happen if someone uses a Back.easeOut or Elastic.easeOut when scrolling back to the top of the page (for example)\n      data.x = 0;\n    }\n\n    if (data.y < 0) {\n      data.y = 0;\n    }\n\n    if (autoKill) {\n      //note: iOS has a bug that throws off the scroll by several pixels, so we need to check if it's within 7 pixels of the previous one that we set instead of just looking for an exact match.\n      if (!data.skipX && (xDif > threshold || xDif < -threshold) && x < _max(target, \"x\")) {\n        data.skipX = 1; //if the user scrolls separately, we should stop tweening!\n      }\n\n      if (!data.skipY && (yDif > threshold || yDif < -threshold) && y < _max(target, \"y\")) {\n        data.skipY = 1; //if the user scrolls separately, we should stop tweening!\n      }\n\n      if (data.skipX && data.skipY) {\n        tween.kill();\n        data.vars.onAutoKill && data.vars.onAutoKill.apply(tween, data.vars.onAutoKillParams || []);\n      }\n    }\n\n    if (isWin) {\n      _window.scrollTo(!data.skipX ? data.x : x, !data.skipY ? data.y : y);\n    } else {\n      data.skipY || (target.scrollTop = data.y);\n      data.skipX || (target.scrollLeft = data.x);\n    }\n\n    if (snap && (ratio === 1 || ratio === 0)) {\n      y = target.scrollTop;\n      x = target.scrollLeft;\n      snapInline ? target.style.scrollSnapType = snapInline : target.style.removeProperty(\"scroll-snap-type\");\n      target.scrollTop = y + 1; // bug in Safari causes the element to totally reset its scroll position when scroll-snap-type changes, so we need to set it to a slightly different value and then back again to work around this bug.\n\n      target.scrollLeft = x + 1;\n      target.scrollTop = y;\n      target.scrollLeft = x;\n    }\n\n    data.xPrev = data.x;\n    data.yPrev = data.y;\n    ScrollTrigger && ScrollTrigger.update();\n  },\n  kill: function kill(property) {\n    var both = property === \"scrollTo\",\n        i = this._props.indexOf(property);\n\n    if (both || property === \"scrollTo_x\") {\n      this.skipX = 1;\n    }\n\n    if (both || property === \"scrollTo_y\") {\n      this.skipY = 1;\n    }\n\n    i > -1 && this._props.splice(i, 1);\n    return !this._props.length;\n  }\n};\nScrollToPlugin.max = _max;\nScrollToPlugin.getOffset = _getOffset;\nScrollToPlugin.buildGetter = _buildGetter;\n\nScrollToPlugin.config = function (vars) {\n  _config || _initCore() || (_config = gsap.config()); // in case the window hasn't been defined yet.\n\n  for (var p in vars) {\n    _config[p] = vars[p];\n  }\n};\n\n_getGSAP() && gsap.registerPlugin(ScrollToPlugin);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gsap/ScrollToPlugin.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gsap/TextPlugin.js":
/*!*****************************************!*\
  !*** ./node_modules/gsap/TextPlugin.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TextPlugin: function() { return /* binding */ TextPlugin; },\n/* harmony export */   \"default\": function() { return /* binding */ TextPlugin; }\n/* harmony export */ });\n/* harmony import */ var _utils_strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/strings.js */ \"(app-pages-browser)/./node_modules/gsap/utils/strings.js\");\n/*!\n * TextPlugin 3.12.7\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\n\n\nvar gsap,\n    _tempDiv,\n    _getGSAP = function _getGSAP() {\n  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n};\n\nvar TextPlugin = {\n  version: \"3.12.7\",\n  name: \"text\",\n  init: function init(target, value, tween) {\n    typeof value !== \"object\" && (value = {\n      value: value\n    });\n\n    var i = target.nodeName.toUpperCase(),\n        data = this,\n        _value = value,\n        newClass = _value.newClass,\n        oldClass = _value.oldClass,\n        preserveSpaces = _value.preserveSpaces,\n        rtl = _value.rtl,\n        delimiter = data.delimiter = value.delimiter || \"\",\n        fillChar = data.fillChar = value.fillChar || (value.padSpace ? \"&nbsp;\" : \"\"),\n        _short,\n        text,\n        original,\n        j,\n        condensedText,\n        condensedOriginal,\n        aggregate,\n        s;\n\n    data.svg = target.getBBox && (i === \"TEXT\" || i === \"TSPAN\");\n\n    if (!(\"innerHTML\" in target) && !data.svg) {\n      return false;\n    }\n\n    data.target = target;\n\n    if (!(\"value\" in value)) {\n      data.text = data.original = [\"\"];\n      return;\n    }\n\n    original = (0,_utils_strings_js__WEBPACK_IMPORTED_MODULE_0__.splitInnerHTML)(target, delimiter, false, preserveSpaces, data.svg);\n    _tempDiv || (_tempDiv = document.createElement(\"div\"));\n    _tempDiv.innerHTML = value.value;\n    text = (0,_utils_strings_js__WEBPACK_IMPORTED_MODULE_0__.splitInnerHTML)(_tempDiv, delimiter, false, preserveSpaces, data.svg);\n    data.from = tween._from;\n\n    if ((data.from || rtl) && !(rtl && data.from)) {\n      // right-to-left or \"from()\" tweens should invert things (but if it's BOTH .from() and rtl, inverting twice equals not inverting at all :)\n      i = original;\n      original = text;\n      text = i;\n    }\n\n    data.hasClass = !!(newClass || oldClass);\n    data.newClass = rtl ? oldClass : newClass;\n    data.oldClass = rtl ? newClass : oldClass;\n    i = original.length - text.length;\n    _short = i < 0 ? original : text;\n\n    if (i < 0) {\n      i = -i;\n    }\n\n    while (--i > -1) {\n      _short.push(fillChar);\n    }\n\n    if (value.type === \"diff\") {\n      j = 0;\n      condensedText = [];\n      condensedOriginal = [];\n      aggregate = \"\";\n\n      for (i = 0; i < text.length; i++) {\n        s = text[i];\n\n        if (s === original[i]) {\n          aggregate += s;\n        } else {\n          condensedText[j] = aggregate + s;\n          condensedOriginal[j++] = aggregate + original[i];\n          aggregate = \"\";\n        }\n      }\n\n      text = condensedText;\n      original = condensedOriginal;\n\n      if (aggregate) {\n        text.push(aggregate);\n        original.push(aggregate);\n      }\n    }\n\n    value.speed && tween.duration(Math.min(0.05 / value.speed * _short.length, value.maxDuration || 9999));\n    data.rtl = rtl;\n    data.original = original;\n    data.text = text;\n\n    data._props.push(\"text\");\n  },\n  render: function render(ratio, data) {\n    if (ratio > 1) {\n      ratio = 1;\n    } else if (ratio < 0) {\n      ratio = 0;\n    }\n\n    if (data.from) {\n      ratio = 1 - ratio;\n    }\n\n    var text = data.text,\n        hasClass = data.hasClass,\n        newClass = data.newClass,\n        oldClass = data.oldClass,\n        delimiter = data.delimiter,\n        target = data.target,\n        fillChar = data.fillChar,\n        original = data.original,\n        rtl = data.rtl,\n        l = text.length,\n        i = (rtl ? 1 - ratio : ratio) * l + 0.5 | 0,\n        applyNew,\n        applyOld,\n        str;\n\n    if (hasClass && ratio) {\n      applyNew = newClass && i;\n      applyOld = oldClass && i !== l;\n      str = (applyNew ? \"<span class='\" + newClass + \"'>\" : \"\") + text.slice(0, i).join(delimiter) + (applyNew ? \"</span>\" : \"\") + (applyOld ? \"<span class='\" + oldClass + \"'>\" : \"\") + delimiter + original.slice(i).join(delimiter) + (applyOld ? \"</span>\" : \"\");\n    } else {\n      str = text.slice(0, i).join(delimiter) + delimiter + original.slice(i).join(delimiter);\n    }\n\n    if (data.svg) {\n      //SVG text elements don't have an \"innerHTML\" in Microsoft browsers.\n      target.textContent = str;\n    } else {\n      target.innerHTML = fillChar === \"&nbsp;\" && ~str.indexOf(\"  \") ? str.split(\"  \").join(\"&nbsp;&nbsp;\") : str;\n    }\n  }\n};\nTextPlugin.splitInnerHTML = _utils_strings_js__WEBPACK_IMPORTED_MODULE_0__.splitInnerHTML;\nTextPlugin.emojiSafeSplit = _utils_strings_js__WEBPACK_IMPORTED_MODULE_0__.emojiSafeSplit;\nTextPlugin.getText = _utils_strings_js__WEBPACK_IMPORTED_MODULE_0__.getText;\n_getGSAP() && gsap.registerPlugin(TextPlugin);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gsap/TextPlugin.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gsap/all.js":
/*!**********************************!*\
  !*** ./node_modules/gsap/all.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Back: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Back; },\n/* harmony export */   Bounce: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Bounce; },\n/* harmony export */   CSSPlugin: function() { return /* reexport safe */ _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; },\n/* harmony export */   CSSRulePlugin: function() { return /* reexport safe */ _CSSRulePlugin_js__WEBPACK_IMPORTED_MODULE_4__.CSSRulePlugin; },\n/* harmony export */   Circ: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Circ; },\n/* harmony export */   Cubic: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Cubic; },\n/* harmony export */   CustomEase: function() { return /* reexport safe */ _CustomEase_js__WEBPACK_IMPORTED_MODULE_2__.CustomEase; },\n/* harmony export */   Draggable: function() { return /* reexport safe */ _Draggable_js__WEBPACK_IMPORTED_MODULE_3__.Draggable; },\n/* harmony export */   EasePack: function() { return /* reexport safe */ _EasePack_js__WEBPACK_IMPORTED_MODULE_6__.EasePack; },\n/* harmony export */   EaselPlugin: function() { return /* reexport safe */ _EaselPlugin_js__WEBPACK_IMPORTED_MODULE_5__.EaselPlugin; },\n/* harmony export */   Elastic: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Elastic; },\n/* harmony export */   Expo: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Expo; },\n/* harmony export */   ExpoScaleEase: function() { return /* reexport safe */ _EasePack_js__WEBPACK_IMPORTED_MODULE_6__.ExpoScaleEase; },\n/* harmony export */   Flip: function() { return /* reexport safe */ _Flip_js__WEBPACK_IMPORTED_MODULE_7__.Flip; },\n/* harmony export */   Linear: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Linear; },\n/* harmony export */   MotionPathPlugin: function() { return /* reexport safe */ _MotionPathPlugin_js__WEBPACK_IMPORTED_MODULE_8__.MotionPathPlugin; },\n/* harmony export */   Observer: function() { return /* reexport safe */ _Observer_js__WEBPACK_IMPORTED_MODULE_9__.Observer; },\n/* harmony export */   PixiPlugin: function() { return /* reexport safe */ _PixiPlugin_js__WEBPACK_IMPORTED_MODULE_10__.PixiPlugin; },\n/* harmony export */   Power0: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power0; },\n/* harmony export */   Power1: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power1; },\n/* harmony export */   Power2: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power2; },\n/* harmony export */   Power3: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power3; },\n/* harmony export */   Power4: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power4; },\n/* harmony export */   Quad: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quad; },\n/* harmony export */   Quart: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quart; },\n/* harmony export */   Quint: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quint; },\n/* harmony export */   RoughEase: function() { return /* reexport safe */ _EasePack_js__WEBPACK_IMPORTED_MODULE_6__.RoughEase; },\n/* harmony export */   ScrollToPlugin: function() { return /* reexport safe */ _ScrollToPlugin_js__WEBPACK_IMPORTED_MODULE_11__.ScrollToPlugin; },\n/* harmony export */   ScrollTrigger: function() { return /* reexport safe */ _ScrollTrigger_js__WEBPACK_IMPORTED_MODULE_12__.ScrollTrigger; },\n/* harmony export */   Sine: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Sine; },\n/* harmony export */   SlowMo: function() { return /* reexport safe */ _EasePack_js__WEBPACK_IMPORTED_MODULE_6__.SlowMo; },\n/* harmony export */   SteppedEase: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.SteppedEase; },\n/* harmony export */   Strong: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Strong; },\n/* harmony export */   TextPlugin: function() { return /* reexport safe */ _TextPlugin_js__WEBPACK_IMPORTED_MODULE_13__.TextPlugin; },\n/* harmony export */   TimelineLite: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TimelineLite; },\n/* harmony export */   TimelineMax: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TimelineMax; },\n/* harmony export */   TweenLite: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TweenLite; },\n/* harmony export */   TweenMax: function() { return /* binding */ TweenMaxWithCSS; },\n/* harmony export */   _getProxyProp: function() { return /* reexport safe */ _Observer_js__WEBPACK_IMPORTED_MODULE_9__._getProxyProp; },\n/* harmony export */   _getScrollFunc: function() { return /* reexport safe */ _Observer_js__WEBPACK_IMPORTED_MODULE_9__._getScrollFunc; },\n/* harmony export */   _getTarget: function() { return /* reexport safe */ _Observer_js__WEBPACK_IMPORTED_MODULE_9__._getTarget; },\n/* harmony export */   _getVelocityProp: function() { return /* reexport safe */ _Observer_js__WEBPACK_IMPORTED_MODULE_9__._getVelocityProp; },\n/* harmony export */   _horizontal: function() { return /* reexport safe */ _Observer_js__WEBPACK_IMPORTED_MODULE_9__._horizontal; },\n/* harmony export */   _isViewport: function() { return /* reexport safe */ _Observer_js__WEBPACK_IMPORTED_MODULE_9__._isViewport; },\n/* harmony export */   _proxies: function() { return /* reexport safe */ _Observer_js__WEBPACK_IMPORTED_MODULE_9__._proxies; },\n/* harmony export */   _scrollers: function() { return /* reexport safe */ _Observer_js__WEBPACK_IMPORTED_MODULE_9__._scrollers; },\n/* harmony export */   _vertical: function() { return /* reexport safe */ _Observer_js__WEBPACK_IMPORTED_MODULE_9__._vertical; },\n/* harmony export */   clamp: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.clamp; },\n/* harmony export */   \"default\": function() { return /* binding */ gsapWithCSS; },\n/* harmony export */   distribute: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.distribute; },\n/* harmony export */   getUnit: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit; },\n/* harmony export */   gsap: function() { return /* binding */ gsapWithCSS; },\n/* harmony export */   interpolate: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.interpolate; },\n/* harmony export */   mapRange: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.mapRange; },\n/* harmony export */   normalize: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.normalize; },\n/* harmony export */   pipe: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.pipe; },\n/* harmony export */   random: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.random; },\n/* harmony export */   selector: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.selector; },\n/* harmony export */   shuffle: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.shuffle; },\n/* harmony export */   snap: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.snap; },\n/* harmony export */   splitColor: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.splitColor; },\n/* harmony export */   toArray: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.toArray; },\n/* harmony export */   unitize: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.unitize; },\n/* harmony export */   wrap: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.wrap; },\n/* harmony export */   wrapYoyo: function() { return /* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.wrapYoyo; }\n/* harmony export */ });\n/* harmony import */ var _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gsap-core.js */ \"(app-pages-browser)/./node_modules/gsap/gsap-core.js\");\n/* harmony import */ var _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CSSPlugin.js */ \"(app-pages-browser)/./node_modules/gsap/CSSPlugin.js\");\n/* harmony import */ var _CustomEase_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CustomEase.js */ \"(app-pages-browser)/./node_modules/gsap/CustomEase.js\");\n/* harmony import */ var _Draggable_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Draggable.js */ \"(app-pages-browser)/./node_modules/gsap/Draggable.js\");\n/* harmony import */ var _CSSRulePlugin_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CSSRulePlugin.js */ \"(app-pages-browser)/./node_modules/gsap/CSSRulePlugin.js\");\n/* harmony import */ var _EaselPlugin_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./EaselPlugin.js */ \"(app-pages-browser)/./node_modules/gsap/EaselPlugin.js\");\n/* harmony import */ var _EasePack_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./EasePack.js */ \"(app-pages-browser)/./node_modules/gsap/EasePack.js\");\n/* harmony import */ var _Flip_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Flip.js */ \"(app-pages-browser)/./node_modules/gsap/Flip.js\");\n/* harmony import */ var _MotionPathPlugin_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./MotionPathPlugin.js */ \"(app-pages-browser)/./node_modules/gsap/MotionPathPlugin.js\");\n/* harmony import */ var _Observer_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Observer.js */ \"(app-pages-browser)/./node_modules/gsap/Observer.js\");\n/* harmony import */ var _PixiPlugin_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./PixiPlugin.js */ \"(app-pages-browser)/./node_modules/gsap/PixiPlugin.js\");\n/* harmony import */ var _ScrollToPlugin_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ScrollToPlugin.js */ \"(app-pages-browser)/./node_modules/gsap/ScrollToPlugin.js\");\n/* harmony import */ var _ScrollTrigger_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ScrollTrigger.js */ \"(app-pages-browser)/./node_modules/gsap/ScrollTrigger.js\");\n/* harmony import */ var _TextPlugin_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./TextPlugin.js */ \"(app-pages-browser)/./node_modules/gsap/TextPlugin.js\");\n\n\nvar gsapWithCSS = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerPlugin(_CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n    // to protect from tree shaking\nTweenMaxWithCSS = gsapWithCSS.core.Tween;\n\n\n\n\n\n\n\n\n\n\n\n\n\n //BONUS EXPORTS\n// export * from \"./DrawSVGPlugin.js\";\n// export * from \"./Physics2DPlugin.js\";\n// export * from \"./PhysicsPropsPlugin.js\";\n// export * from \"./ScrambleTextPlugin.js\";\n// export * from \"./CustomBounce.js\";\n// export * from \"./CustomWiggle.js\";\n// export * from \"./GSDevTools.js\";\n// export * from \"./InertiaPlugin.js\";\n// export * from \"./MorphSVGPlugin.js\";\n// export * from \"./MotionPathHelper.js\";\n// export * from \"./ScrollSmoother.js\";\n// export * from \"./SplitText.js\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nc2FwL2FsbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWtDO0FBQ0s7QUFDdkMsa0JBQWtCLHFEQUFJLGdCQUFnQixxREFBUyxLQUFLLHFEQUFJO0FBQ3hEO0FBQ0E7QUFDK0Y7QUFDbVE7QUFDbFU7QUFDRDtBQUNJO0FBQ0Y7QUFDSDtBQUNKO0FBQ1k7QUFDUjtBQUNFO0FBQ0k7QUFDRDtBQUNILENBQUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9nc2FwL2FsbC5qcz80NThmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnc2FwIGZyb20gXCIuL2dzYXAtY29yZS5qc1wiO1xuaW1wb3J0IENTU1BsdWdpbiBmcm9tIFwiLi9DU1NQbHVnaW4uanNcIjtcbnZhciBnc2FwV2l0aENTUyA9IGdzYXAucmVnaXN0ZXJQbHVnaW4oQ1NTUGx1Z2luKSB8fCBnc2FwLFxuICAgIC8vIHRvIHByb3RlY3QgZnJvbSB0cmVlIHNoYWtpbmdcblR3ZWVuTWF4V2l0aENTUyA9IGdzYXBXaXRoQ1NTLmNvcmUuVHdlZW47XG5leHBvcnQgeyBnc2FwV2l0aENTUyBhcyBnc2FwLCBnc2FwV2l0aENTUyBhcyBkZWZhdWx0LCBUd2Vlbk1heFdpdGhDU1MgYXMgVHdlZW5NYXgsIENTU1BsdWdpbiB9O1xuZXhwb3J0IHsgVHdlZW5MaXRlLCBUaW1lbGluZU1heCwgVGltZWxpbmVMaXRlLCBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIFBvd2VyNCwgTGluZWFyLCBRdWFkLCBDdWJpYywgUXVhcnQsIFF1aW50LCBTdHJvbmcsIEVsYXN0aWMsIEJhY2ssIFN0ZXBwZWRFYXNlLCBCb3VuY2UsIFNpbmUsIEV4cG8sIENpcmMsIHdyYXAsIHdyYXBZb3lvLCBkaXN0cmlidXRlLCByYW5kb20sIHNuYXAsIG5vcm1hbGl6ZSwgZ2V0VW5pdCwgY2xhbXAsIHNwbGl0Q29sb3IsIHRvQXJyYXksIG1hcFJhbmdlLCBwaXBlLCB1bml0aXplLCBpbnRlcnBvbGF0ZSwgc2h1ZmZsZSwgc2VsZWN0b3IgfSBmcm9tIFwiLi9nc2FwLWNvcmUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0N1c3RvbUVhc2UuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0RyYWdnYWJsZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vQ1NTUnVsZVBsdWdpbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vRWFzZWxQbHVnaW4uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0Vhc2VQYWNrLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9GbGlwLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9Nb3Rpb25QYXRoUGx1Z2luLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9PYnNlcnZlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vUGl4aVBsdWdpbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vU2Nyb2xsVG9QbHVnaW4uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1Njcm9sbFRyaWdnZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1RleHRQbHVnaW4uanNcIjsgLy9CT05VUyBFWFBPUlRTXG4vLyBleHBvcnQgKiBmcm9tIFwiLi9EcmF3U1ZHUGx1Z2luLmpzXCI7XG4vLyBleHBvcnQgKiBmcm9tIFwiLi9QaHlzaWNzMkRQbHVnaW4uanNcIjtcbi8vIGV4cG9ydCAqIGZyb20gXCIuL1BoeXNpY3NQcm9wc1BsdWdpbi5qc1wiO1xuLy8gZXhwb3J0ICogZnJvbSBcIi4vU2NyYW1ibGVUZXh0UGx1Z2luLmpzXCI7XG4vLyBleHBvcnQgKiBmcm9tIFwiLi9DdXN0b21Cb3VuY2UuanNcIjtcbi8vIGV4cG9ydCAqIGZyb20gXCIuL0N1c3RvbVdpZ2dsZS5qc1wiO1xuLy8gZXhwb3J0ICogZnJvbSBcIi4vR1NEZXZUb29scy5qc1wiO1xuLy8gZXhwb3J0ICogZnJvbSBcIi4vSW5lcnRpYVBsdWdpbi5qc1wiO1xuLy8gZXhwb3J0ICogZnJvbSBcIi4vTW9ycGhTVkdQbHVnaW4uanNcIjtcbi8vIGV4cG9ydCAqIGZyb20gXCIuL01vdGlvblBhdGhIZWxwZXIuanNcIjtcbi8vIGV4cG9ydCAqIGZyb20gXCIuL1Njcm9sbFNtb290aGVyLmpzXCI7XG4vLyBleHBvcnQgKiBmcm9tIFwiLi9TcGxpdFRleHQuanNcIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gsap/all.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gsap/utils/matrix.js":
/*!*******************************************!*\
  !*** ./node_modules/gsap/utils/matrix.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Matrix2D: function() { return /* binding */ Matrix2D; },\n/* harmony export */   _getCTM: function() { return /* binding */ _getCTM; },\n/* harmony export */   _getDocScrollLeft: function() { return /* binding */ _getDocScrollLeft; },\n/* harmony export */   _getDocScrollTop: function() { return /* binding */ _getDocScrollTop; },\n/* harmony export */   _isFixed: function() { return /* binding */ _isFixed; },\n/* harmony export */   _setDoc: function() { return /* binding */ _setDoc; },\n/* harmony export */   getGlobalMatrix: function() { return /* binding */ getGlobalMatrix; }\n/* harmony export */ });\n/*!\n * matrix 3.12.7\n * https://gsap.com\n *\n * Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar _doc,\n    _win,\n    _docElement,\n    _body,\n    _divContainer,\n    _svgContainer,\n    _identityMatrix,\n    _gEl,\n    _transformProp = \"transform\",\n    _transformOriginProp = _transformProp + \"Origin\",\n    _hasOffsetBug,\n    _setDoc = function _setDoc(element) {\n  var doc = element.ownerDocument || element;\n\n  if (!(_transformProp in element.style) && \"msTransform\" in element.style) {\n    //to improve compatibility with old Microsoft browsers\n    _transformProp = \"msTransform\";\n    _transformOriginProp = _transformProp + \"Origin\";\n  }\n\n  while (doc.parentNode && (doc = doc.parentNode)) {}\n\n  _win = window;\n  _identityMatrix = new Matrix2D();\n\n  if (doc) {\n    _doc = doc;\n    _docElement = doc.documentElement;\n    _body = doc.body;\n    _gEl = _doc.createElementNS(\"http://www.w3.org/2000/svg\", \"g\"); // prevent any existing CSS from transforming it\n\n    _gEl.style.transform = \"none\"; // now test for the offset reporting bug. Use feature detection instead of browser sniffing to make things more bulletproof and future-proof. Hopefully Safari will fix their bug soon.\n\n    var d1 = doc.createElement(\"div\"),\n        d2 = doc.createElement(\"div\"),\n        root = doc && (doc.body || doc.firstElementChild);\n\n    if (root && root.appendChild) {\n      root.appendChild(d1);\n      d1.appendChild(d2);\n      d1.setAttribute(\"style\", \"position:static;transform:translate3d(0,0,1px)\");\n      _hasOffsetBug = d2.offsetParent !== d1;\n      root.removeChild(d1);\n    }\n  }\n\n  return doc;\n},\n    _forceNonZeroScale = function _forceNonZeroScale(e) {\n  // walks up the element's ancestors and finds any that had their scale set to 0 via GSAP, and changes them to 0.0001 to ensure that measurements work. Firefox has a bug that causes it to incorrectly report getBoundingClientRect() when scale is 0.\n  var a, cache;\n\n  while (e && e !== _body) {\n    cache = e._gsap;\n    cache && cache.uncache && cache.get(e, \"x\"); // force re-parsing of transforms if necessary\n\n    if (cache && !cache.scaleX && !cache.scaleY && cache.renderTransform) {\n      cache.scaleX = cache.scaleY = 1e-4;\n      cache.renderTransform(1, cache);\n      a ? a.push(cache) : a = [cache];\n    }\n\n    e = e.parentNode;\n  }\n\n  return a;\n},\n    // possible future addition: pass an element to _forceDisplay() and it'll walk up all its ancestors and make sure anything with display: none is set to display: block, and if there's no parentNode, it'll add it to the body. It returns an Array that you can then feed to _revertDisplay() to have it revert all the changes it made.\n// _forceDisplay = e => {\n// \tlet a = [],\n// \t\tparent;\n// \twhile (e && e !== _body) {\n// \t\tparent = e.parentNode;\n// \t\t(_win.getComputedStyle(e).display === \"none\" || !parent) && a.push(e, e.style.display, parent) && (e.style.display = \"block\");\n// \t\tparent || _body.appendChild(e);\n// \t\te = parent;\n// \t}\n// \treturn a;\n// },\n// _revertDisplay = a => {\n// \tfor (let i = 0; i < a.length; i+=3) {\n// \t\ta[i+1] ? (a[i].style.display = a[i+1]) : a[i].style.removeProperty(\"display\");\n// \t\ta[i+2] || a[i].parentNode.removeChild(a[i]);\n// \t}\n// },\n_svgTemps = [],\n    //we create 3 elements for SVG, and 3 for other DOM elements and cache them for performance reasons. They get nested in _divContainer and _svgContainer so that just one element is added to the DOM on each successive attempt. Again, performance is key.\n_divTemps = [],\n    _getDocScrollTop = function _getDocScrollTop() {\n  return _win.pageYOffset || _doc.scrollTop || _docElement.scrollTop || _body.scrollTop || 0;\n},\n    _getDocScrollLeft = function _getDocScrollLeft() {\n  return _win.pageXOffset || _doc.scrollLeft || _docElement.scrollLeft || _body.scrollLeft || 0;\n},\n    _svgOwner = function _svgOwner(element) {\n  return element.ownerSVGElement || ((element.tagName + \"\").toLowerCase() === \"svg\" ? element : null);\n},\n    _isFixed = function _isFixed(element) {\n  if (_win.getComputedStyle(element).position === \"fixed\") {\n    return true;\n  }\n\n  element = element.parentNode;\n\n  if (element && element.nodeType === 1) {\n    // avoid document fragments which will throw an error.\n    return _isFixed(element);\n  }\n},\n    _createSibling = function _createSibling(element, i) {\n  if (element.parentNode && (_doc || _setDoc(element))) {\n    var svg = _svgOwner(element),\n        ns = svg ? svg.getAttribute(\"xmlns\") || \"http://www.w3.org/2000/svg\" : \"http://www.w3.org/1999/xhtml\",\n        type = svg ? i ? \"rect\" : \"g\" : \"div\",\n        x = i !== 2 ? 0 : 100,\n        y = i === 3 ? 100 : 0,\n        css = \"position:absolute;display:block;pointer-events:none;margin:0;padding:0;\",\n        e = _doc.createElementNS ? _doc.createElementNS(ns.replace(/^https/, \"http\"), type) : _doc.createElement(type);\n\n    if (i) {\n      if (!svg) {\n        if (!_divContainer) {\n          _divContainer = _createSibling(element);\n          _divContainer.style.cssText = css;\n        }\n\n        e.style.cssText = css + \"width:0.1px;height:0.1px;top:\" + y + \"px;left:\" + x + \"px\";\n\n        _divContainer.appendChild(e);\n      } else {\n        _svgContainer || (_svgContainer = _createSibling(element));\n        e.setAttribute(\"width\", 0.01);\n        e.setAttribute(\"height\", 0.01);\n        e.setAttribute(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n\n        _svgContainer.appendChild(e);\n      }\n    }\n\n    return e;\n  }\n\n  throw \"Need document and parent.\";\n},\n    _consolidate = function _consolidate(m) {\n  // replaces SVGTransformList.consolidate() because a bug in Firefox causes it to break pointer events. See https://gsap.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800\n  var c = new Matrix2D(),\n      i = 0;\n\n  for (; i < m.numberOfItems; i++) {\n    c.multiply(m.getItem(i).matrix);\n  }\n\n  return c;\n},\n    _getCTM = function _getCTM(svg) {\n  var m = svg.getCTM(),\n      transform;\n\n  if (!m) {\n    // Firefox returns null for getCTM() on root <svg> elements, so this is a workaround using a <g> that we temporarily append.\n    transform = svg.style[_transformProp];\n    svg.style[_transformProp] = \"none\"; // a bug in Firefox causes css transforms to contaminate the getCTM()\n\n    svg.appendChild(_gEl);\n    m = _gEl.getCTM();\n    svg.removeChild(_gEl);\n    transform ? svg.style[_transformProp] = transform : svg.style.removeProperty(_transformProp.replace(/([A-Z])/g, \"-$1\").toLowerCase());\n  }\n\n  return m || _identityMatrix.clone(); // Firefox will still return null if the <svg> has a width/height of 0 in the browser.\n},\n    _placeSiblings = function _placeSiblings(element, adjustGOffset) {\n  var svg = _svgOwner(element),\n      isRootSVG = element === svg,\n      siblings = svg ? _svgTemps : _divTemps,\n      parent = element.parentNode,\n      container,\n      m,\n      b,\n      x,\n      y,\n      cs;\n\n  if (element === _win) {\n    return element;\n  }\n\n  siblings.length || siblings.push(_createSibling(element, 1), _createSibling(element, 2), _createSibling(element, 3));\n  container = svg ? _svgContainer : _divContainer;\n\n  if (svg) {\n    if (isRootSVG) {\n      b = _getCTM(element);\n      x = -b.e / b.a;\n      y = -b.f / b.d;\n      m = _identityMatrix;\n    } else if (element.getBBox) {\n      b = element.getBBox();\n      m = element.transform ? element.transform.baseVal : {}; // IE11 doesn't follow the spec.\n\n      m = !m.numberOfItems ? _identityMatrix : m.numberOfItems > 1 ? _consolidate(m) : m.getItem(0).matrix; // don't call m.consolidate().matrix because a bug in Firefox makes pointer events not work when consolidate() is called on the same tick as getBoundingClientRect()! See https://gsap.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800\n\n      x = m.a * b.x + m.c * b.y;\n      y = m.b * b.x + m.d * b.y;\n    } else {\n      // may be a <mask> which has no getBBox() so just use defaults instead of throwing errors.\n      m = new Matrix2D();\n      x = y = 0;\n    }\n\n    if (adjustGOffset && element.tagName.toLowerCase() === \"g\") {\n      x = y = 0;\n    }\n\n    (isRootSVG ? svg : parent).appendChild(container);\n    container.setAttribute(\"transform\", \"matrix(\" + m.a + \",\" + m.b + \",\" + m.c + \",\" + m.d + \",\" + (m.e + x) + \",\" + (m.f + y) + \")\");\n  } else {\n    x = y = 0;\n\n    if (_hasOffsetBug) {\n      // some browsers (like Safari) have a bug that causes them to misreport offset values. When an ancestor element has a transform applied, it's supposed to treat it as if it's position: relative (new context). Safari botches this, so we need to find the closest ancestor (between the element and its offsetParent) that has a transform applied and if one is found, grab its offsetTop/Left and subtract them to compensate.\n      m = element.offsetParent;\n      b = element;\n\n      while (b && (b = b.parentNode) && b !== m && b.parentNode) {\n        if ((_win.getComputedStyle(b)[_transformProp] + \"\").length > 4) {\n          x = b.offsetLeft;\n          y = b.offsetTop;\n          b = 0;\n        }\n      }\n    }\n\n    cs = _win.getComputedStyle(element);\n\n    if (cs.position !== \"absolute\" && cs.position !== \"fixed\") {\n      m = element.offsetParent;\n\n      while (parent && parent !== m) {\n        // if there's an ancestor element between the element and its offsetParent that's scrolled, we must factor that in.\n        x += parent.scrollLeft || 0;\n        y += parent.scrollTop || 0;\n        parent = parent.parentNode;\n      }\n    }\n\n    b = container.style;\n    b.top = element.offsetTop - y + \"px\";\n    b.left = element.offsetLeft - x + \"px\";\n    b[_transformProp] = cs[_transformProp];\n    b[_transformOriginProp] = cs[_transformOriginProp]; // b.border = m.border;\n    // b.borderLeftStyle = m.borderLeftStyle;\n    // b.borderTopStyle = m.borderTopStyle;\n    // b.borderLeftWidth = m.borderLeftWidth;\n    // b.borderTopWidth = m.borderTopWidth;\n\n    b.position = cs.position === \"fixed\" ? \"fixed\" : \"absolute\";\n    element.parentNode.appendChild(container);\n  }\n\n  return container;\n},\n    _setMatrix = function _setMatrix(m, a, b, c, d, e, f) {\n  m.a = a;\n  m.b = b;\n  m.c = c;\n  m.d = d;\n  m.e = e;\n  m.f = f;\n  return m;\n};\n\nvar Matrix2D = /*#__PURE__*/function () {\n  function Matrix2D(a, b, c, d, e, f) {\n    if (a === void 0) {\n      a = 1;\n    }\n\n    if (b === void 0) {\n      b = 0;\n    }\n\n    if (c === void 0) {\n      c = 0;\n    }\n\n    if (d === void 0) {\n      d = 1;\n    }\n\n    if (e === void 0) {\n      e = 0;\n    }\n\n    if (f === void 0) {\n      f = 0;\n    }\n\n    _setMatrix(this, a, b, c, d, e, f);\n  }\n\n  var _proto = Matrix2D.prototype;\n\n  _proto.inverse = function inverse() {\n    var a = this.a,\n        b = this.b,\n        c = this.c,\n        d = this.d,\n        e = this.e,\n        f = this.f,\n        determinant = a * d - b * c || 1e-10;\n    return _setMatrix(this, d / determinant, -b / determinant, -c / determinant, a / determinant, (c * f - d * e) / determinant, -(a * f - b * e) / determinant);\n  };\n\n  _proto.multiply = function multiply(matrix) {\n    var a = this.a,\n        b = this.b,\n        c = this.c,\n        d = this.d,\n        e = this.e,\n        f = this.f,\n        a2 = matrix.a,\n        b2 = matrix.c,\n        c2 = matrix.b,\n        d2 = matrix.d,\n        e2 = matrix.e,\n        f2 = matrix.f;\n    return _setMatrix(this, a2 * a + c2 * c, a2 * b + c2 * d, b2 * a + d2 * c, b2 * b + d2 * d, e + e2 * a + f2 * c, f + e2 * b + f2 * d);\n  };\n\n  _proto.clone = function clone() {\n    return new Matrix2D(this.a, this.b, this.c, this.d, this.e, this.f);\n  };\n\n  _proto.equals = function equals(matrix) {\n    var a = this.a,\n        b = this.b,\n        c = this.c,\n        d = this.d,\n        e = this.e,\n        f = this.f;\n    return a === matrix.a && b === matrix.b && c === matrix.c && d === matrix.d && e === matrix.e && f === matrix.f;\n  };\n\n  _proto.apply = function apply(point, decoratee) {\n    if (decoratee === void 0) {\n      decoratee = {};\n    }\n\n    var x = point.x,\n        y = point.y,\n        a = this.a,\n        b = this.b,\n        c = this.c,\n        d = this.d,\n        e = this.e,\n        f = this.f;\n    decoratee.x = x * a + y * c + e || 0;\n    decoratee.y = x * b + y * d + f || 0;\n    return decoratee;\n  };\n\n  return Matrix2D;\n}(); // Feed in an element and it'll return a 2D matrix (optionally inverted) so that you can translate between coordinate spaces.\n// Inverting lets you translate a global point into a local coordinate space. No inverting lets you go the other way.\n// We needed this to work around various browser bugs, like Firefox doesn't accurately report getScreenCTM() when there\n// are transforms applied to ancestor elements.\n// The matrix math to convert any x/y coordinate is as follows, which is wrapped in a convenient apply() method of Matrix2D above:\n//     tx = m.a * x + m.c * y + m.e\n//     ty = m.b * x + m.d * y + m.f\n\nfunction getGlobalMatrix(element, inverse, adjustGOffset, includeScrollInFixed) {\n  // adjustGOffset is typically used only when grabbing an element's PARENT's global matrix, and it ignores the x/y offset of any SVG <g> elements because they behave in a special way.\n  if (!element || !element.parentNode || (_doc || _setDoc(element)).documentElement === element) {\n    return new Matrix2D();\n  }\n\n  var zeroScales = _forceNonZeroScale(element),\n      svg = _svgOwner(element),\n      temps = svg ? _svgTemps : _divTemps,\n      container = _placeSiblings(element, adjustGOffset),\n      b1 = temps[0].getBoundingClientRect(),\n      b2 = temps[1].getBoundingClientRect(),\n      b3 = temps[2].getBoundingClientRect(),\n      parent = container.parentNode,\n      isFixed = !includeScrollInFixed && _isFixed(element),\n      m = new Matrix2D((b2.left - b1.left) / 100, (b2.top - b1.top) / 100, (b3.left - b1.left) / 100, (b3.top - b1.top) / 100, b1.left + (isFixed ? 0 : _getDocScrollLeft()), b1.top + (isFixed ? 0 : _getDocScrollTop()));\n\n  parent.removeChild(container);\n\n  if (zeroScales) {\n    b1 = zeroScales.length;\n\n    while (b1--) {\n      b2 = zeroScales[b1];\n      b2.scaleX = b2.scaleY = 0;\n      b2.renderTransform(1, b2);\n    }\n  }\n\n  return inverse ? m.inverse() : m;\n}\n // export function getMatrix(element) {\n// \t_doc || _setDoc(element);\n// \tlet m = (_win.getComputedStyle(element)[_transformProp] + \"\").substr(7).match(/[-.]*\\d+[.e\\-+]*\\d*[e\\-\\+]*\\d*/g),\n// \t\tis2D = m && m.length === 6;\n// \treturn !m || m.length < 6 ? new Matrix2D() : new Matrix2D(+m[0], +m[1], +m[is2D ? 2 : 4], +m[is2D ? 3 : 5], +m[is2D ? 4 : 12], +m[is2D ? 5 : 13]);\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gsap/utils/matrix.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gsap/utils/paths.js":
/*!******************************************!*\
  !*** ./node_modules/gsap/utils/paths.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bezierToPoints: function() { return /* binding */ bezierToPoints; },\n/* harmony export */   cacheRawPathMeasurements: function() { return /* binding */ cacheRawPathMeasurements; },\n/* harmony export */   convertToPath: function() { return /* binding */ convertToPath; },\n/* harmony export */   copyRawPath: function() { return /* binding */ copyRawPath; },\n/* harmony export */   flatPointsToSegment: function() { return /* binding */ flatPointsToSegment; },\n/* harmony export */   getClosestData: function() { return /* binding */ getClosestData; },\n/* harmony export */   getPositionOnPath: function() { return /* binding */ getPositionOnPath; },\n/* harmony export */   getRawPath: function() { return /* binding */ getRawPath; },\n/* harmony export */   getRotationAtProgress: function() { return /* binding */ getRotationAtProgress; },\n/* harmony export */   pointsToSegment: function() { return /* binding */ pointsToSegment; },\n/* harmony export */   rawPathToString: function() { return /* binding */ rawPathToString; },\n/* harmony export */   reverseSegment: function() { return /* binding */ reverseSegment; },\n/* harmony export */   simplifyPoints: function() { return /* binding */ simplifyPoints; },\n/* harmony export */   sliceRawPath: function() { return /* binding */ sliceRawPath; },\n/* harmony export */   stringToRawPath: function() { return /* binding */ stringToRawPath; },\n/* harmony export */   subdivideSegment: function() { return /* binding */ subdivideSegment; },\n/* harmony export */   subdivideSegmentNear: function() { return /* binding */ subdivideSegmentNear; },\n/* harmony export */   transformRawPath: function() { return /* binding */ transformRawPath; }\n/* harmony export */ });\n/*!\n * paths 3.12.7\n * https://gsap.com\n *\n * Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar _svgPathExp = /[achlmqstvz]|(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n    _numbersExp = /(?:(-)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n    _scientific = /[\\+\\-]?\\d*\\.?\\d+e[\\+\\-]?\\d+/ig,\n    _selectorExp = /(^[#\\.][a-z]|[a-y][a-z])/i,\n    _DEG2RAD = Math.PI / 180,\n    _RAD2DEG = 180 / Math.PI,\n    _sin = Math.sin,\n    _cos = Math.cos,\n    _abs = Math.abs,\n    _sqrt = Math.sqrt,\n    _atan2 = Math.atan2,\n    _largeNum = 1e8,\n    _isString = function _isString(value) {\n  return typeof value === \"string\";\n},\n    _isNumber = function _isNumber(value) {\n  return typeof value === \"number\";\n},\n    _isUndefined = function _isUndefined(value) {\n  return typeof value === \"undefined\";\n},\n    _temp = {},\n    _temp2 = {},\n    _roundingNum = 1e5,\n    _wrapProgress = function _wrapProgress(progress) {\n  return Math.round((progress + _largeNum) % 1 * _roundingNum) / _roundingNum || (progress < 0 ? 0 : 1);\n},\n    //if progress lands on 1, the % will make it 0 which is why we || 1, but not if it's negative because it makes more sense for motion to end at 0 in that case.\n_round = function _round(value) {\n  return Math.round(value * _roundingNum) / _roundingNum || 0;\n},\n    _roundPrecise = function _roundPrecise(value) {\n  return Math.round(value * 1e10) / 1e10 || 0;\n},\n    _splitSegment = function _splitSegment(rawPath, segIndex, i, t) {\n  var segment = rawPath[segIndex],\n      shift = t === 1 ? 6 : subdivideSegment(segment, i, t);\n\n  if ((shift || !t) && shift + i + 2 < segment.length) {\n    rawPath.splice(segIndex, 0, segment.slice(0, i + shift + 2));\n    segment.splice(0, i + shift);\n    return 1;\n  }\n},\n    _getSampleIndex = function _getSampleIndex(samples, length, progress) {\n  // slightly slower way than doing this (when there's no lookup): segment.lookup[progress < 1 ? ~~(length / segment.minLength) : segment.lookup.length - 1] || 0;\n  var l = samples.length,\n      i = ~~(progress * l);\n\n  if (samples[i] > length) {\n    while (--i && samples[i] > length) {}\n\n    i < 0 && (i = 0);\n  } else {\n    while (samples[++i] < length && i < l) {}\n  }\n\n  return i < l ? i : l - 1;\n},\n    _reverseRawPath = function _reverseRawPath(rawPath, skipOuter) {\n  var i = rawPath.length;\n  skipOuter || rawPath.reverse();\n\n  while (i--) {\n    rawPath[i].reversed || reverseSegment(rawPath[i]);\n  }\n},\n    _copyMetaData = function _copyMetaData(source, copy) {\n  copy.totalLength = source.totalLength;\n\n  if (source.samples) {\n    //segment\n    copy.samples = source.samples.slice(0);\n    copy.lookup = source.lookup.slice(0);\n    copy.minLength = source.minLength;\n    copy.resolution = source.resolution;\n  } else if (source.totalPoints) {\n    //rawPath\n    copy.totalPoints = source.totalPoints;\n  }\n\n  return copy;\n},\n    //pushes a new segment into a rawPath, but if its starting values match the ending values of the last segment, it'll merge it into that same segment (to reduce the number of segments)\n_appendOrMerge = function _appendOrMerge(rawPath, segment) {\n  var index = rawPath.length,\n      prevSeg = rawPath[index - 1] || [],\n      l = prevSeg.length;\n\n  if (index && segment[0] === prevSeg[l - 2] && segment[1] === prevSeg[l - 1]) {\n    segment = prevSeg.concat(segment.slice(2));\n    index--;\n  }\n\n  rawPath[index] = segment;\n},\n    _bestDistance;\n/* TERMINOLOGY\n - RawPath - an array of arrays, one for each Segment. A single RawPath could have multiple \"M\" commands, defining Segments (paths aren't always connected).\n - Segment - an array containing a sequence of Cubic Bezier coordinates in alternating x, y, x, y format. Starting anchor, then control point 1, control point 2, and ending anchor, then the next control point 1, control point 2, anchor, etc. Uses less memory than an array with a bunch of {x, y} points.\n - Bezier - a single cubic Bezier with a starting anchor, two control points, and an ending anchor.\n - the variable \"t\" is typically the position along an individual Bezier path (time) and it's NOT linear, meaning it could accelerate/decelerate based on the control points whereas the \"p\" or \"progress\" value is linearly mapped to the whole path, so it shouldn't really accelerate/decelerate based on control points. So a progress of 0.2 would be almost exactly 20% along the path. \"t\" is ONLY in an individual Bezier piece.\n */\n//accepts basic selector text, a path instance, a RawPath instance, or a Segment and returns a RawPath (makes it easy to homogenize things). If an element or selector text is passed in, it'll also cache the value so that if it's queried again, it'll just take the path data from there instead of parsing it all over again (as long as the path data itself hasn't changed - it'll check).\n\n\nfunction getRawPath(value) {\n  value = _isString(value) && _selectorExp.test(value) ? document.querySelector(value) || value : value;\n  var e = value.getAttribute ? value : 0,\n      rawPath;\n\n  if (e && (value = value.getAttribute(\"d\"))) {\n    //implements caching\n    if (!e._gsPath) {\n      e._gsPath = {};\n    }\n\n    rawPath = e._gsPath[value];\n    return rawPath && !rawPath._dirty ? rawPath : e._gsPath[value] = stringToRawPath(value);\n  }\n\n  return !value ? console.warn(\"Expecting a <path> element or an SVG path data string\") : _isString(value) ? stringToRawPath(value) : _isNumber(value[0]) ? [value] : value;\n} //copies a RawPath WITHOUT the length meta data (for speed)\n\nfunction copyRawPath(rawPath) {\n  var a = [],\n      i = 0;\n\n  for (; i < rawPath.length; i++) {\n    a[i] = _copyMetaData(rawPath[i], rawPath[i].slice(0));\n  }\n\n  return _copyMetaData(rawPath, a);\n}\nfunction reverseSegment(segment) {\n  var i = 0,\n      y;\n  segment.reverse(); //this will invert the order y, x, y, x so we must flip it back.\n\n  for (; i < segment.length; i += 2) {\n    y = segment[i];\n    segment[i] = segment[i + 1];\n    segment[i + 1] = y;\n  }\n\n  segment.reversed = !segment.reversed;\n}\n\nvar _createPath = function _createPath(e, ignore) {\n  var path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\"),\n      attr = [].slice.call(e.attributes),\n      i = attr.length,\n      name;\n  ignore = \",\" + ignore + \",\";\n\n  while (--i > -1) {\n    name = attr[i].nodeName.toLowerCase(); //in Microsoft Edge, if you don't set the attribute with a lowercase name, it doesn't render correctly! Super weird.\n\n    if (ignore.indexOf(\",\" + name + \",\") < 0) {\n      path.setAttributeNS(null, name, attr[i].nodeValue);\n    }\n  }\n\n  return path;\n},\n    _typeAttrs = {\n  rect: \"rx,ry,x,y,width,height\",\n  circle: \"r,cx,cy\",\n  ellipse: \"rx,ry,cx,cy\",\n  line: \"x1,x2,y1,y2\"\n},\n    _attrToObj = function _attrToObj(e, attrs) {\n  var props = attrs ? attrs.split(\",\") : [],\n      obj = {},\n      i = props.length;\n\n  while (--i > -1) {\n    obj[props[i]] = +e.getAttribute(props[i]) || 0;\n  }\n\n  return obj;\n}; //converts an SVG shape like <circle>, <rect>, <polygon>, <polyline>, <ellipse>, etc. to a <path>, swapping it in and copying the attributes to match.\n\n\nfunction convertToPath(element, swap) {\n  var type = element.tagName.toLowerCase(),\n      circ = 0.552284749831,\n      data,\n      x,\n      y,\n      r,\n      ry,\n      path,\n      rcirc,\n      rycirc,\n      points,\n      w,\n      h,\n      x2,\n      x3,\n      x4,\n      x5,\n      x6,\n      y2,\n      y3,\n      y4,\n      y5,\n      y6,\n      attr;\n\n  if (type === \"path\" || !element.getBBox) {\n    return element;\n  }\n\n  path = _createPath(element, \"x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points\");\n  attr = _attrToObj(element, _typeAttrs[type]);\n\n  if (type === \"rect\") {\n    r = attr.rx;\n    ry = attr.ry || r;\n    x = attr.x;\n    y = attr.y;\n    w = attr.width - r * 2;\n    h = attr.height - ry * 2;\n\n    if (r || ry) {\n      //if there are rounded corners, render cubic beziers\n      x2 = x + r * (1 - circ);\n      x3 = x + r;\n      x4 = x3 + w;\n      x5 = x4 + r * circ;\n      x6 = x4 + r;\n      y2 = y + ry * (1 - circ);\n      y3 = y + ry;\n      y4 = y3 + h;\n      y5 = y4 + ry * circ;\n      y6 = y4 + ry;\n      data = \"M\" + x6 + \",\" + y3 + \" V\" + y4 + \" C\" + [x6, y5, x5, y6, x4, y6, x4 - (x4 - x3) / 3, y6, x3 + (x4 - x3) / 3, y6, x3, y6, x2, y6, x, y5, x, y4, x, y4 - (y4 - y3) / 3, x, y3 + (y4 - y3) / 3, x, y3, x, y2, x2, y, x3, y, x3 + (x4 - x3) / 3, y, x4 - (x4 - x3) / 3, y, x4, y, x5, y, x6, y2, x6, y3].join(\",\") + \"z\";\n    } else {\n      data = \"M\" + (x + w) + \",\" + y + \" v\" + h + \" h\" + -w + \" v\" + -h + \" h\" + w + \"z\";\n    }\n  } else if (type === \"circle\" || type === \"ellipse\") {\n    if (type === \"circle\") {\n      r = ry = attr.r;\n      rycirc = r * circ;\n    } else {\n      r = attr.rx;\n      ry = attr.ry;\n      rycirc = ry * circ;\n    }\n\n    x = attr.cx;\n    y = attr.cy;\n    rcirc = r * circ;\n    data = \"M\" + (x + r) + \",\" + y + \" C\" + [x + r, y + rycirc, x + rcirc, y + ry, x, y + ry, x - rcirc, y + ry, x - r, y + rycirc, x - r, y, x - r, y - rycirc, x - rcirc, y - ry, x, y - ry, x + rcirc, y - ry, x + r, y - rycirc, x + r, y].join(\",\") + \"z\";\n  } else if (type === \"line\") {\n    data = \"M\" + attr.x1 + \",\" + attr.y1 + \" L\" + attr.x2 + \",\" + attr.y2; //previously, we just converted to \"Mx,y Lx,y\" but Safari has bugs that cause that not to render properly when using a stroke-dasharray that's not fully visible! Using a cubic bezier fixes that issue.\n  } else if (type === \"polyline\" || type === \"polygon\") {\n    points = (element.getAttribute(\"points\") + \"\").match(_numbersExp) || [];\n    x = points.shift();\n    y = points.shift();\n    data = \"M\" + x + \",\" + y + \" L\" + points.join(\",\");\n\n    if (type === \"polygon\") {\n      data += \",\" + x + \",\" + y + \"z\";\n    }\n  }\n\n  path.setAttribute(\"d\", rawPathToString(path._gsRawPath = stringToRawPath(data)));\n\n  if (swap && element.parentNode) {\n    element.parentNode.insertBefore(path, element);\n    element.parentNode.removeChild(element);\n  }\n\n  return path;\n} //returns the rotation (in degrees) at a particular progress on a rawPath (the slope of the tangent)\n\nfunction getRotationAtProgress(rawPath, progress) {\n  var d = getProgressData(rawPath, progress >= 1 ? 1 - 1e-9 : progress ? progress : 1e-9);\n  return getRotationAtBezierT(d.segment, d.i, d.t);\n}\n\nfunction getRotationAtBezierT(segment, i, t) {\n  var a = segment[i],\n      b = segment[i + 2],\n      c = segment[i + 4],\n      x;\n  a += (b - a) * t;\n  b += (c - b) * t;\n  a += (b - a) * t;\n  x = b + (c + (segment[i + 6] - c) * t - b) * t - a;\n  a = segment[i + 1];\n  b = segment[i + 3];\n  c = segment[i + 5];\n  a += (b - a) * t;\n  b += (c - b) * t;\n  a += (b - a) * t;\n  return _round(_atan2(b + (c + (segment[i + 7] - c) * t - b) * t - a, x) * _RAD2DEG);\n}\n\nfunction sliceRawPath(rawPath, start, end) {\n  end = _isUndefined(end) ? 1 : _roundPrecise(end) || 0; // we must round to avoid issues like 4.15 / 8 = 0.8300000000000001 instead of 0.83 or 2.8 / 5 = 0.5599999999999999 instead of 0.56 and if someone is doing a loop like start: 2.8 / 0.5, end: 2.8 / 0.5 + 1.\n\n  start = _roundPrecise(start) || 0;\n  var loops = Math.max(0, ~~(_abs(end - start) - 1e-8)),\n      path = copyRawPath(rawPath);\n\n  if (start > end) {\n    start = 1 - start;\n    end = 1 - end;\n\n    _reverseRawPath(path);\n\n    path.totalLength = 0;\n  }\n\n  if (start < 0 || end < 0) {\n    var offset = Math.abs(~~Math.min(start, end)) + 1;\n    start += offset;\n    end += offset;\n  }\n\n  path.totalLength || cacheRawPathMeasurements(path);\n  var wrap = end > 1,\n      s = getProgressData(path, start, _temp, true),\n      e = getProgressData(path, end, _temp2),\n      eSeg = e.segment,\n      sSeg = s.segment,\n      eSegIndex = e.segIndex,\n      sSegIndex = s.segIndex,\n      ei = e.i,\n      si = s.i,\n      sameSegment = sSegIndex === eSegIndex,\n      sameBezier = ei === si && sameSegment,\n      wrapsBehind,\n      sShift,\n      eShift,\n      i,\n      copy,\n      totalSegments,\n      l,\n      j;\n\n  if (wrap || loops) {\n    wrapsBehind = eSegIndex < sSegIndex || sameSegment && ei < si || sameBezier && e.t < s.t;\n\n    if (_splitSegment(path, sSegIndex, si, s.t)) {\n      sSegIndex++;\n\n      if (!wrapsBehind) {\n        eSegIndex++;\n\n        if (sameBezier) {\n          e.t = (e.t - s.t) / (1 - s.t);\n          ei = 0;\n        } else if (sameSegment) {\n          ei -= si;\n        }\n      }\n    }\n\n    if (Math.abs(1 - (end - start)) < 1e-5) {\n      eSegIndex = sSegIndex - 1;\n    } else if (!e.t && eSegIndex) {\n      eSegIndex--;\n    } else if (_splitSegment(path, eSegIndex, ei, e.t) && wrapsBehind) {\n      sSegIndex++;\n    }\n\n    if (s.t === 1) {\n      sSegIndex = (sSegIndex + 1) % path.length;\n    }\n\n    copy = [];\n    totalSegments = path.length;\n    l = 1 + totalSegments * loops;\n    j = sSegIndex;\n    l += (totalSegments - sSegIndex + eSegIndex) % totalSegments;\n\n    for (i = 0; i < l; i++) {\n      _appendOrMerge(copy, path[j++ % totalSegments]);\n    }\n\n    path = copy;\n  } else {\n    eShift = e.t === 1 ? 6 : subdivideSegment(eSeg, ei, e.t);\n\n    if (start !== end) {\n      sShift = subdivideSegment(sSeg, si, sameBezier ? s.t / e.t : s.t);\n      sameSegment && (eShift += sShift);\n      eSeg.splice(ei + eShift + 2);\n      (sShift || si) && sSeg.splice(0, si + sShift);\n      i = path.length;\n\n      while (i--) {\n        //chop off any extra segments\n        (i < sSegIndex || i > eSegIndex) && path.splice(i, 1);\n      }\n    } else {\n      eSeg.angle = getRotationAtBezierT(eSeg, ei + eShift, 0); //record the value before we chop because it'll be impossible to determine the angle after its length is 0!\n\n      ei += eShift;\n      s = eSeg[ei];\n      e = eSeg[ei + 1];\n      eSeg.length = eSeg.totalLength = 0;\n      eSeg.totalPoints = path.totalPoints = 8;\n      eSeg.push(s, e, s, e, s, e, s, e);\n    }\n  }\n\n  path.totalLength = 0;\n  return path;\n} //measures a Segment according to its resolution (so if segment.resolution is 6, for example, it'll take 6 samples equally across each Bezier) and create/populate a \"samples\" Array that has the length up to each of those sample points (always increasing from the start) as well as a \"lookup\" array that's broken up according to the smallest distance between 2 samples. This gives us a very fast way of looking up a progress position rather than looping through all the points/Beziers. You can optionally have it only measure a subset, starting at startIndex and going for a specific number of beziers (remember, there are 3 x/y pairs each, for a total of 6 elements for each Bezier). It will also populate a \"totalLength\" property, but that's not generally super accurate because by default it'll only take 6 samples per Bezier. But for performance reasons, it's perfectly adequate for measuring progress values along the path. If you need a more accurate totalLength, either increase the resolution or use the more advanced bezierToPoints() method which keeps adding points until they don't deviate by more than a certain precision value.\n\nfunction measureSegment(segment, startIndex, bezierQty) {\n  startIndex = startIndex || 0;\n\n  if (!segment.samples) {\n    segment.samples = [];\n    segment.lookup = [];\n  }\n\n  var resolution = ~~segment.resolution || 12,\n      inc = 1 / resolution,\n      endIndex = bezierQty ? startIndex + bezierQty * 6 + 1 : segment.length,\n      x1 = segment[startIndex],\n      y1 = segment[startIndex + 1],\n      samplesIndex = startIndex ? startIndex / 6 * resolution : 0,\n      samples = segment.samples,\n      lookup = segment.lookup,\n      min = (startIndex ? segment.minLength : _largeNum) || _largeNum,\n      prevLength = samples[samplesIndex + bezierQty * resolution - 1],\n      length = startIndex ? samples[samplesIndex - 1] : 0,\n      i,\n      j,\n      x4,\n      x3,\n      x2,\n      xd,\n      xd1,\n      y4,\n      y3,\n      y2,\n      yd,\n      yd1,\n      inv,\n      t,\n      lengthIndex,\n      l,\n      segLength;\n  samples.length = lookup.length = 0;\n\n  for (j = startIndex + 2; j < endIndex; j += 6) {\n    x4 = segment[j + 4] - x1;\n    x3 = segment[j + 2] - x1;\n    x2 = segment[j] - x1;\n    y4 = segment[j + 5] - y1;\n    y3 = segment[j + 3] - y1;\n    y2 = segment[j + 1] - y1;\n    xd = xd1 = yd = yd1 = 0;\n\n    if (_abs(x4) < .01 && _abs(y4) < .01 && _abs(x2) + _abs(y2) < .01) {\n      //dump points that are sufficiently close (basically right on top of each other, making a bezier super tiny or 0 length)\n      if (segment.length > 8) {\n        segment.splice(j, 6);\n        j -= 6;\n        endIndex -= 6;\n      }\n    } else {\n      for (i = 1; i <= resolution; i++) {\n        t = inc * i;\n        inv = 1 - t;\n        xd = xd1 - (xd1 = (t * t * x4 + 3 * inv * (t * x3 + inv * x2)) * t);\n        yd = yd1 - (yd1 = (t * t * y4 + 3 * inv * (t * y3 + inv * y2)) * t);\n        l = _sqrt(yd * yd + xd * xd);\n\n        if (l < min) {\n          min = l;\n        }\n\n        length += l;\n        samples[samplesIndex++] = length;\n      }\n    }\n\n    x1 += x4;\n    y1 += y4;\n  }\n\n  if (prevLength) {\n    prevLength -= length;\n\n    for (; samplesIndex < samples.length; samplesIndex++) {\n      samples[samplesIndex] += prevLength;\n    }\n  }\n\n  if (samples.length && min) {\n    segment.totalLength = segLength = samples[samples.length - 1] || 0;\n    segment.minLength = min;\n\n    if (segLength / min < 9999) {\n      // if the lookup would require too many values (memory problem), we skip this and instead we use a loop to lookup values directly in the samples Array\n      l = lengthIndex = 0;\n\n      for (i = 0; i < segLength; i += min) {\n        lookup[l++] = samples[lengthIndex] < i ? ++lengthIndex : lengthIndex;\n      }\n    }\n  } else {\n    segment.totalLength = samples[0] = 0;\n  }\n\n  return startIndex ? length - samples[startIndex / 2 - 1] : length;\n}\n\nfunction cacheRawPathMeasurements(rawPath, resolution) {\n  var pathLength, points, i;\n\n  for (i = pathLength = points = 0; i < rawPath.length; i++) {\n    rawPath[i].resolution = ~~resolution || 12; //steps per Bezier curve (anchor, 2 control points, to anchor)\n\n    points += rawPath[i].length;\n    pathLength += measureSegment(rawPath[i]);\n  }\n\n  rawPath.totalPoints = points;\n  rawPath.totalLength = pathLength;\n  return rawPath;\n} //divide segment[i] at position t (value between 0 and 1, progress along that particular cubic bezier segment that starts at segment[i]). Returns how many elements were spliced into the segment array (either 0 or 6)\n\nfunction subdivideSegment(segment, i, t) {\n  if (t <= 0 || t >= 1) {\n    return 0;\n  }\n\n  var ax = segment[i],\n      ay = segment[i + 1],\n      cp1x = segment[i + 2],\n      cp1y = segment[i + 3],\n      cp2x = segment[i + 4],\n      cp2y = segment[i + 5],\n      bx = segment[i + 6],\n      by = segment[i + 7],\n      x1a = ax + (cp1x - ax) * t,\n      x2 = cp1x + (cp2x - cp1x) * t,\n      y1a = ay + (cp1y - ay) * t,\n      y2 = cp1y + (cp2y - cp1y) * t,\n      x1 = x1a + (x2 - x1a) * t,\n      y1 = y1a + (y2 - y1a) * t,\n      x2a = cp2x + (bx - cp2x) * t,\n      y2a = cp2y + (by - cp2y) * t;\n  x2 += (x2a - x2) * t;\n  y2 += (y2a - y2) * t;\n  segment.splice(i + 2, 4, _round(x1a), //first control point\n  _round(y1a), _round(x1), //second control point\n  _round(y1), _round(x1 + (x2 - x1) * t), //new fabricated anchor on line\n  _round(y1 + (y2 - y1) * t), _round(x2), //third control point\n  _round(y2), _round(x2a), //fourth control point\n  _round(y2a));\n  segment.samples && segment.samples.splice(i / 6 * segment.resolution | 0, 0, 0, 0, 0, 0, 0, 0);\n  return 6;\n} // returns an object {path, segment, segIndex, i, t}\n\nfunction getProgressData(rawPath, progress, decoratee, pushToNextIfAtEnd) {\n  decoratee = decoratee || {};\n  rawPath.totalLength || cacheRawPathMeasurements(rawPath);\n\n  if (progress < 0 || progress > 1) {\n    progress = _wrapProgress(progress);\n  }\n\n  var segIndex = 0,\n      segment = rawPath[0],\n      samples,\n      resolution,\n      length,\n      min,\n      max,\n      i,\n      t;\n\n  if (!progress) {\n    t = i = segIndex = 0;\n    segment = rawPath[0];\n  } else if (progress === 1) {\n    t = 1;\n    segIndex = rawPath.length - 1;\n    segment = rawPath[segIndex];\n    i = segment.length - 8;\n  } else {\n    if (rawPath.length > 1) {\n      //speed optimization: most of the time, there's only one segment so skip the recursion.\n      length = rawPath.totalLength * progress;\n      max = i = 0;\n\n      while ((max += rawPath[i++].totalLength) < length) {\n        segIndex = i;\n      }\n\n      segment = rawPath[segIndex];\n      min = max - segment.totalLength;\n      progress = (length - min) / (max - min) || 0;\n    }\n\n    samples = segment.samples;\n    resolution = segment.resolution; //how many samples per cubic bezier chunk\n\n    length = segment.totalLength * progress;\n    i = segment.lookup.length ? segment.lookup[~~(length / segment.minLength)] || 0 : _getSampleIndex(samples, length, progress);\n    min = i ? samples[i - 1] : 0;\n    max = samples[i];\n\n    if (max < length) {\n      min = max;\n      max = samples[++i];\n    }\n\n    t = 1 / resolution * ((length - min) / (max - min) + i % resolution);\n    i = ~~(i / resolution) * 6;\n\n    if (pushToNextIfAtEnd && t === 1) {\n      if (i + 6 < segment.length) {\n        i += 6;\n        t = 0;\n      } else if (segIndex + 1 < rawPath.length) {\n        i = t = 0;\n        segment = rawPath[++segIndex];\n      }\n    }\n  }\n\n  decoratee.t = t;\n  decoratee.i = i;\n  decoratee.path = rawPath;\n  decoratee.segment = segment;\n  decoratee.segIndex = segIndex;\n  return decoratee;\n}\n\nfunction getPositionOnPath(rawPath, progress, includeAngle, point) {\n  var segment = rawPath[0],\n      result = point || {},\n      samples,\n      resolution,\n      length,\n      min,\n      max,\n      i,\n      t,\n      a,\n      inv;\n\n  if (progress < 0 || progress > 1) {\n    progress = _wrapProgress(progress);\n  }\n\n  segment.lookup || cacheRawPathMeasurements(rawPath);\n\n  if (rawPath.length > 1) {\n    //speed optimization: most of the time, there's only one segment so skip the recursion.\n    length = rawPath.totalLength * progress;\n    max = i = 0;\n\n    while ((max += rawPath[i++].totalLength) < length) {\n      segment = rawPath[i];\n    }\n\n    min = max - segment.totalLength;\n    progress = (length - min) / (max - min) || 0;\n  }\n\n  samples = segment.samples;\n  resolution = segment.resolution;\n  length = segment.totalLength * progress;\n  i = segment.lookup.length ? segment.lookup[progress < 1 ? ~~(length / segment.minLength) : segment.lookup.length - 1] || 0 : _getSampleIndex(samples, length, progress);\n  min = i ? samples[i - 1] : 0;\n  max = samples[i];\n\n  if (max < length) {\n    min = max;\n    max = samples[++i];\n  }\n\n  t = 1 / resolution * ((length - min) / (max - min) + i % resolution) || 0;\n  inv = 1 - t;\n  i = ~~(i / resolution) * 6;\n  a = segment[i];\n  result.x = _round((t * t * (segment[i + 6] - a) + 3 * inv * (t * (segment[i + 4] - a) + inv * (segment[i + 2] - a))) * t + a);\n  result.y = _round((t * t * (segment[i + 7] - (a = segment[i + 1])) + 3 * inv * (t * (segment[i + 5] - a) + inv * (segment[i + 3] - a))) * t + a);\n\n  if (includeAngle) {\n    result.angle = segment.totalLength ? getRotationAtBezierT(segment, i, t >= 1 ? 1 - 1e-9 : t ? t : 1e-9) : segment.angle || 0;\n  }\n\n  return result;\n} //applies a matrix transform to RawPath (or a segment in a RawPath) and returns whatever was passed in (it transforms the values in the array(s), not a copy).\n\nfunction transformRawPath(rawPath, a, b, c, d, tx, ty) {\n  var j = rawPath.length,\n      segment,\n      l,\n      i,\n      x,\n      y;\n\n  while (--j > -1) {\n    segment = rawPath[j];\n    l = segment.length;\n\n    for (i = 0; i < l; i += 2) {\n      x = segment[i];\n      y = segment[i + 1];\n      segment[i] = x * a + y * c + tx;\n      segment[i + 1] = x * b + y * d + ty;\n    }\n  }\n\n  rawPath._dirty = 1;\n  return rawPath;\n} // translates SVG arc data into a segment (cubic beziers). Angle is in degrees.\n\nfunction arcToSegment(lastX, lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y) {\n  if (lastX === x && lastY === y) {\n    return;\n  }\n\n  rx = _abs(rx);\n  ry = _abs(ry);\n\n  var angleRad = angle % 360 * _DEG2RAD,\n      cosAngle = _cos(angleRad),\n      sinAngle = _sin(angleRad),\n      PI = Math.PI,\n      TWOPI = PI * 2,\n      dx2 = (lastX - x) / 2,\n      dy2 = (lastY - y) / 2,\n      x1 = cosAngle * dx2 + sinAngle * dy2,\n      y1 = -sinAngle * dx2 + cosAngle * dy2,\n      x1_sq = x1 * x1,\n      y1_sq = y1 * y1,\n      radiiCheck = x1_sq / (rx * rx) + y1_sq / (ry * ry);\n\n  if (radiiCheck > 1) {\n    rx = _sqrt(radiiCheck) * rx;\n    ry = _sqrt(radiiCheck) * ry;\n  }\n\n  var rx_sq = rx * rx,\n      ry_sq = ry * ry,\n      sq = (rx_sq * ry_sq - rx_sq * y1_sq - ry_sq * x1_sq) / (rx_sq * y1_sq + ry_sq * x1_sq);\n\n  if (sq < 0) {\n    sq = 0;\n  }\n\n  var coef = (largeArcFlag === sweepFlag ? -1 : 1) * _sqrt(sq),\n      cx1 = coef * (rx * y1 / ry),\n      cy1 = coef * -(ry * x1 / rx),\n      sx2 = (lastX + x) / 2,\n      sy2 = (lastY + y) / 2,\n      cx = sx2 + (cosAngle * cx1 - sinAngle * cy1),\n      cy = sy2 + (sinAngle * cx1 + cosAngle * cy1),\n      ux = (x1 - cx1) / rx,\n      uy = (y1 - cy1) / ry,\n      vx = (-x1 - cx1) / rx,\n      vy = (-y1 - cy1) / ry,\n      temp = ux * ux + uy * uy,\n      angleStart = (uy < 0 ? -1 : 1) * Math.acos(ux / _sqrt(temp)),\n      angleExtent = (ux * vy - uy * vx < 0 ? -1 : 1) * Math.acos((ux * vx + uy * vy) / _sqrt(temp * (vx * vx + vy * vy)));\n\n  isNaN(angleExtent) && (angleExtent = PI); //rare edge case. Math.cos(-1) is NaN.\n\n  if (!sweepFlag && angleExtent > 0) {\n    angleExtent -= TWOPI;\n  } else if (sweepFlag && angleExtent < 0) {\n    angleExtent += TWOPI;\n  }\n\n  angleStart %= TWOPI;\n  angleExtent %= TWOPI;\n\n  var segments = Math.ceil(_abs(angleExtent) / (TWOPI / 4)),\n      rawPath = [],\n      angleIncrement = angleExtent / segments,\n      controlLength = 4 / 3 * _sin(angleIncrement / 2) / (1 + _cos(angleIncrement / 2)),\n      ma = cosAngle * rx,\n      mb = sinAngle * rx,\n      mc = sinAngle * -ry,\n      md = cosAngle * ry,\n      i;\n\n  for (i = 0; i < segments; i++) {\n    angle = angleStart + i * angleIncrement;\n    x1 = _cos(angle);\n    y1 = _sin(angle);\n    ux = _cos(angle += angleIncrement);\n    uy = _sin(angle);\n    rawPath.push(x1 - controlLength * y1, y1 + controlLength * x1, ux + controlLength * uy, uy - controlLength * ux, ux, uy);\n  } //now transform according to the actual size of the ellipse/arc (the beziers were noramlized, between 0 and 1 on a circle).\n\n\n  for (i = 0; i < rawPath.length; i += 2) {\n    x1 = rawPath[i];\n    y1 = rawPath[i + 1];\n    rawPath[i] = x1 * ma + y1 * mc + cx;\n    rawPath[i + 1] = x1 * mb + y1 * md + cy;\n  }\n\n  rawPath[i - 2] = x; //always set the end to exactly where it's supposed to be\n\n  rawPath[i - 1] = y;\n  return rawPath;\n} //Spits back a RawPath with absolute coordinates. Each segment starts with a \"moveTo\" command (x coordinate, then y) and then 2 control points (x, y, x, y), then anchor. The goal is to minimize memory and maximize speed.\n\n\nfunction stringToRawPath(d) {\n  var a = (d + \"\").replace(_scientific, function (m) {\n    var n = +m;\n    return n < 0.0001 && n > -0.0001 ? 0 : n;\n  }).match(_svgPathExp) || [],\n      //some authoring programs spit out very small numbers in scientific notation like \"1e-5\", so make sure we round that down to 0 first.\n  path = [],\n      relativeX = 0,\n      relativeY = 0,\n      twoThirds = 2 / 3,\n      elements = a.length,\n      points = 0,\n      errorMessage = \"ERROR: malformed path: \" + d,\n      i,\n      j,\n      x,\n      y,\n      command,\n      isRelative,\n      segment,\n      startX,\n      startY,\n      difX,\n      difY,\n      beziers,\n      prevCommand,\n      flag1,\n      flag2,\n      line = function line(sx, sy, ex, ey) {\n    difX = (ex - sx) / 3;\n    difY = (ey - sy) / 3;\n    segment.push(sx + difX, sy + difY, ex - difX, ey - difY, ex, ey);\n  };\n\n  if (!d || !isNaN(a[0]) || isNaN(a[1])) {\n    console.log(errorMessage);\n    return path;\n  }\n\n  for (i = 0; i < elements; i++) {\n    prevCommand = command;\n\n    if (isNaN(a[i])) {\n      command = a[i].toUpperCase();\n      isRelative = command !== a[i]; //lower case means relative\n    } else {\n      //commands like \"C\" can be strung together without any new command characters between.\n      i--;\n    }\n\n    x = +a[i + 1];\n    y = +a[i + 2];\n\n    if (isRelative) {\n      x += relativeX;\n      y += relativeY;\n    }\n\n    if (!i) {\n      startX = x;\n      startY = y;\n    } // \"M\" (move)\n\n\n    if (command === \"M\") {\n      if (segment) {\n        if (segment.length < 8) {\n          //if the path data was funky and just had a M with no actual drawing anywhere, skip it.\n          path.length -= 1;\n        } else {\n          points += segment.length;\n        }\n      }\n\n      relativeX = startX = x;\n      relativeY = startY = y;\n      segment = [x, y];\n      path.push(segment);\n      i += 2;\n      command = \"L\"; //an \"M\" with more than 2 values gets interpreted as \"lineTo\" commands (\"L\").\n      // \"C\" (cubic bezier)\n    } else if (command === \"C\") {\n      if (!segment) {\n        segment = [0, 0];\n      }\n\n      if (!isRelative) {\n        relativeX = relativeY = 0;\n      } //note: \"*1\" is just a fast/short way to cast the value as a Number. WAAAY faster in Chrome, slightly slower in Firefox.\n\n\n      segment.push(x, y, relativeX + a[i + 3] * 1, relativeY + a[i + 4] * 1, relativeX += a[i + 5] * 1, relativeY += a[i + 6] * 1);\n      i += 6; // \"S\" (continuation of cubic bezier)\n    } else if (command === \"S\") {\n      difX = relativeX;\n      difY = relativeY;\n\n      if (prevCommand === \"C\" || prevCommand === \"S\") {\n        difX += relativeX - segment[segment.length - 4];\n        difY += relativeY - segment[segment.length - 3];\n      }\n\n      if (!isRelative) {\n        relativeX = relativeY = 0;\n      }\n\n      segment.push(difX, difY, x, y, relativeX += a[i + 3] * 1, relativeY += a[i + 4] * 1);\n      i += 4; // \"Q\" (quadratic bezier)\n    } else if (command === \"Q\") {\n      difX = relativeX + (x - relativeX) * twoThirds;\n      difY = relativeY + (y - relativeY) * twoThirds;\n\n      if (!isRelative) {\n        relativeX = relativeY = 0;\n      }\n\n      relativeX += a[i + 3] * 1;\n      relativeY += a[i + 4] * 1;\n      segment.push(difX, difY, relativeX + (x - relativeX) * twoThirds, relativeY + (y - relativeY) * twoThirds, relativeX, relativeY);\n      i += 4; // \"T\" (continuation of quadratic bezier)\n    } else if (command === \"T\") {\n      difX = relativeX - segment[segment.length - 4];\n      difY = relativeY - segment[segment.length - 3];\n      segment.push(relativeX + difX, relativeY + difY, x + (relativeX + difX * 1.5 - x) * twoThirds, y + (relativeY + difY * 1.5 - y) * twoThirds, relativeX = x, relativeY = y);\n      i += 2; // \"H\" (horizontal line)\n    } else if (command === \"H\") {\n      line(relativeX, relativeY, relativeX = x, relativeY);\n      i += 1; // \"V\" (vertical line)\n    } else if (command === \"V\") {\n      //adjust values because the first (and only one) isn't x in this case, it's y.\n      line(relativeX, relativeY, relativeX, relativeY = x + (isRelative ? relativeY - relativeX : 0));\n      i += 1; // \"L\" (line) or \"Z\" (close)\n    } else if (command === \"L\" || command === \"Z\") {\n      if (command === \"Z\") {\n        x = startX;\n        y = startY;\n        segment.closed = true;\n      }\n\n      if (command === \"L\" || _abs(relativeX - x) > 0.5 || _abs(relativeY - y) > 0.5) {\n        line(relativeX, relativeY, x, y);\n\n        if (command === \"L\") {\n          i += 2;\n        }\n      }\n\n      relativeX = x;\n      relativeY = y; // \"A\" (arc)\n    } else if (command === \"A\") {\n      flag1 = a[i + 4];\n      flag2 = a[i + 5];\n      difX = a[i + 6];\n      difY = a[i + 7];\n      j = 7;\n\n      if (flag1.length > 1) {\n        // for cases when the flags are merged, like \"a8 8 0 018 8\" (the 0 and 1 flags are WITH the x value of 8, but it could also be \"a8 8 0 01-8 8\" so it may include x or not)\n        if (flag1.length < 3) {\n          difY = difX;\n          difX = flag2;\n          j--;\n        } else {\n          difY = flag2;\n          difX = flag1.substr(2);\n          j -= 2;\n        }\n\n        flag2 = flag1.charAt(1);\n        flag1 = flag1.charAt(0);\n      }\n\n      beziers = arcToSegment(relativeX, relativeY, +a[i + 1], +a[i + 2], +a[i + 3], +flag1, +flag2, (isRelative ? relativeX : 0) + difX * 1, (isRelative ? relativeY : 0) + difY * 1);\n      i += j;\n\n      if (beziers) {\n        for (j = 0; j < beziers.length; j++) {\n          segment.push(beziers[j]);\n        }\n      }\n\n      relativeX = segment[segment.length - 2];\n      relativeY = segment[segment.length - 1];\n    } else {\n      console.log(errorMessage);\n    }\n  }\n\n  i = segment.length;\n\n  if (i < 6) {\n    //in case there's odd SVG like a M0,0 command at the very end.\n    path.pop();\n    i = 0;\n  } else if (segment[0] === segment[i - 2] && segment[1] === segment[i - 1]) {\n    segment.closed = true;\n  }\n\n  path.totalPoints = points + i;\n  return path;\n} //populates the points array in alternating x/y values (like [x, y, x, y...] instead of individual point objects [{x, y}, {x, y}...] to conserve memory and stay in line with how we're handling segment arrays\n\nfunction bezierToPoints(x1, y1, x2, y2, x3, y3, x4, y4, threshold, points, index) {\n  var x12 = (x1 + x2) / 2,\n      y12 = (y1 + y2) / 2,\n      x23 = (x2 + x3) / 2,\n      y23 = (y2 + y3) / 2,\n      x34 = (x3 + x4) / 2,\n      y34 = (y3 + y4) / 2,\n      x123 = (x12 + x23) / 2,\n      y123 = (y12 + y23) / 2,\n      x234 = (x23 + x34) / 2,\n      y234 = (y23 + y34) / 2,\n      x1234 = (x123 + x234) / 2,\n      y1234 = (y123 + y234) / 2,\n      dx = x4 - x1,\n      dy = y4 - y1,\n      d2 = _abs((x2 - x4) * dy - (y2 - y4) * dx),\n      d3 = _abs((x3 - x4) * dy - (y3 - y4) * dx),\n      length;\n\n  if (!points) {\n    points = [x1, y1, x4, y4];\n    index = 2;\n  }\n\n  points.splice(index || points.length - 2, 0, x1234, y1234);\n\n  if ((d2 + d3) * (d2 + d3) > threshold * (dx * dx + dy * dy)) {\n    length = points.length;\n    bezierToPoints(x1, y1, x12, y12, x123, y123, x1234, y1234, threshold, points, index);\n    bezierToPoints(x1234, y1234, x234, y234, x34, y34, x4, y4, threshold, points, index + 2 + (points.length - length));\n  }\n\n  return points;\n}\n/*\nfunction getAngleBetweenPoints(x0, y0, x1, y1, x2, y2) { //angle between 3 points in radians\n\tvar dx1 = x1 - x0,\n\t\tdy1 = y1 - y0,\n\t\tdx2 = x2 - x1,\n\t\tdy2 = y2 - y1,\n\t\tdx3 = x2 - x0,\n\t\tdy3 = y2 - y0,\n\t\ta = dx1 * dx1 + dy1 * dy1,\n\t\tb = dx2 * dx2 + dy2 * dy2,\n\t\tc = dx3 * dx3 + dy3 * dy3;\n\treturn Math.acos( (a + b - c) / _sqrt(4 * a * b) );\n},\n*/\n//pointsToSegment() doesn't handle flat coordinates (where y is always 0) the way we need (the resulting control points are always right on top of the anchors), so this function basically makes the control points go directly up and down, varying in length based on the curviness (more curvy, further control points)\n\nfunction flatPointsToSegment(points, curviness) {\n  if (curviness === void 0) {\n    curviness = 1;\n  }\n\n  var x = points[0],\n      y = 0,\n      segment = [x, y],\n      i = 2;\n\n  for (; i < points.length; i += 2) {\n    segment.push(x, y, points[i], y = (points[i] - x) * curviness / 2, x = points[i], -y);\n  }\n\n  return segment;\n} //points is an array of x/y points, like [x, y, x, y, x, y]\n\nfunction pointsToSegment(points, curviness) {\n  //points = simplifyPoints(points, tolerance);\n  _abs(points[0] - points[2]) < 1e-4 && _abs(points[1] - points[3]) < 1e-4 && (points = points.slice(2)); // if the first two points are super close, dump the first one.\n\n  var l = points.length - 2,\n      x = +points[0],\n      y = +points[1],\n      nextX = +points[2],\n      nextY = +points[3],\n      segment = [x, y, x, y],\n      dx2 = nextX - x,\n      dy2 = nextY - y,\n      closed = Math.abs(points[l] - x) < 0.001 && Math.abs(points[l + 1] - y) < 0.001,\n      prevX,\n      prevY,\n      i,\n      dx1,\n      dy1,\n      r1,\n      r2,\n      r3,\n      tl,\n      mx1,\n      mx2,\n      mxm,\n      my1,\n      my2,\n      mym;\n\n  if (closed) {\n    // if the start and end points are basically on top of each other, close the segment by adding the 2nd point to the end, and the 2nd-to-last point to the beginning (we'll remove them at the end, but this allows the curvature to look perfect)\n    points.push(nextX, nextY);\n    nextX = x;\n    nextY = y;\n    x = points[l - 2];\n    y = points[l - 1];\n    points.unshift(x, y);\n    l += 4;\n  }\n\n  curviness = curviness || curviness === 0 ? +curviness : 1;\n\n  for (i = 2; i < l; i += 2) {\n    prevX = x;\n    prevY = y;\n    x = nextX;\n    y = nextY;\n    nextX = +points[i + 2];\n    nextY = +points[i + 3];\n\n    if (x === nextX && y === nextY) {\n      continue;\n    }\n\n    dx1 = dx2;\n    dy1 = dy2;\n    dx2 = nextX - x;\n    dy2 = nextY - y;\n    r1 = _sqrt(dx1 * dx1 + dy1 * dy1); // r1, r2, and r3 correlate x and y (and z in the future). Basically 2D or 3D hypotenuse\n\n    r2 = _sqrt(dx2 * dx2 + dy2 * dy2);\n    r3 = _sqrt(Math.pow(dx2 / r2 + dx1 / r1, 2) + Math.pow(dy2 / r2 + dy1 / r1, 2));\n    tl = (r1 + r2) * curviness * 0.25 / r3;\n    mx1 = x - (x - prevX) * (r1 ? tl / r1 : 0);\n    mx2 = x + (nextX - x) * (r2 ? tl / r2 : 0);\n    mxm = x - (mx1 + ((mx2 - mx1) * (r1 * 3 / (r1 + r2) + 0.5) / 4 || 0));\n    my1 = y - (y - prevY) * (r1 ? tl / r1 : 0);\n    my2 = y + (nextY - y) * (r2 ? tl / r2 : 0);\n    mym = y - (my1 + ((my2 - my1) * (r1 * 3 / (r1 + r2) + 0.5) / 4 || 0));\n\n    if (x !== prevX || y !== prevY) {\n      segment.push(_round(mx1 + mxm), // first control point\n      _round(my1 + mym), _round(x), // anchor\n      _round(y), _round(mx2 + mxm), // second control point\n      _round(my2 + mym));\n    }\n  }\n\n  x !== nextX || y !== nextY || segment.length < 4 ? segment.push(_round(nextX), _round(nextY), _round(nextX), _round(nextY)) : segment.length -= 2;\n\n  if (segment.length === 2) {\n    // only one point!\n    segment.push(x, y, x, y, x, y);\n  } else if (closed) {\n    segment.splice(0, 6);\n    segment.length = segment.length - 6;\n  }\n\n  return segment;\n} //returns the squared distance between an x/y coordinate and a segment between x1/y1 and x2/y2\n\nfunction pointToSegDist(x, y, x1, y1, x2, y2) {\n  var dx = x2 - x1,\n      dy = y2 - y1,\n      t;\n\n  if (dx || dy) {\n    t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n\n  return Math.pow(x - x1, 2) + Math.pow(y - y1, 2);\n}\n\nfunction simplifyStep(points, first, last, tolerance, simplified) {\n  var maxSqDist = tolerance,\n      firstX = points[first],\n      firstY = points[first + 1],\n      lastX = points[last],\n      lastY = points[last + 1],\n      index,\n      i,\n      d;\n\n  for (i = first + 2; i < last; i += 2) {\n    d = pointToSegDist(points[i], points[i + 1], firstX, firstY, lastX, lastY);\n\n    if (d > maxSqDist) {\n      index = i;\n      maxSqDist = d;\n    }\n  }\n\n  if (maxSqDist > tolerance) {\n    index - first > 2 && simplifyStep(points, first, index, tolerance, simplified);\n    simplified.push(points[index], points[index + 1]);\n    last - index > 2 && simplifyStep(points, index, last, tolerance, simplified);\n  }\n} //points is an array of x/y values like [x, y, x, y, x, y]\n\n\nfunction simplifyPoints(points, tolerance) {\n  var prevX = parseFloat(points[0]),\n      prevY = parseFloat(points[1]),\n      temp = [prevX, prevY],\n      l = points.length - 2,\n      i,\n      x,\n      y,\n      dx,\n      dy,\n      result,\n      last;\n  tolerance = Math.pow(tolerance || 1, 2);\n\n  for (i = 2; i < l; i += 2) {\n    x = parseFloat(points[i]);\n    y = parseFloat(points[i + 1]);\n    dx = prevX - x;\n    dy = prevY - y;\n\n    if (dx * dx + dy * dy > tolerance) {\n      temp.push(x, y);\n      prevX = x;\n      prevY = y;\n    }\n  }\n\n  temp.push(parseFloat(points[l]), parseFloat(points[l + 1]));\n  last = temp.length - 2;\n  result = [temp[0], temp[1]];\n  simplifyStep(temp, 0, last, tolerance, result);\n  result.push(temp[last], temp[last + 1]);\n  return result;\n}\n\nfunction getClosestProgressOnBezier(iterations, px, py, start, end, slices, x0, y0, x1, y1, x2, y2, x3, y3) {\n  var inc = (end - start) / slices,\n      best = 0,\n      t = start,\n      x,\n      y,\n      d,\n      dx,\n      dy,\n      inv;\n  _bestDistance = _largeNum;\n\n  while (t <= end) {\n    inv = 1 - t;\n    x = inv * inv * inv * x0 + 3 * inv * inv * t * x1 + 3 * inv * t * t * x2 + t * t * t * x3;\n    y = inv * inv * inv * y0 + 3 * inv * inv * t * y1 + 3 * inv * t * t * y2 + t * t * t * y3;\n    dx = x - px;\n    dy = y - py;\n    d = dx * dx + dy * dy;\n\n    if (d < _bestDistance) {\n      _bestDistance = d;\n      best = t;\n    }\n\n    t += inc;\n  }\n\n  return iterations > 1 ? getClosestProgressOnBezier(iterations - 1, px, py, Math.max(best - inc, 0), Math.min(best + inc, 1), slices, x0, y0, x1, y1, x2, y2, x3, y3) : best;\n}\n\nfunction getClosestData(rawPath, x, y, slices) {\n  //returns an object with the closest j, i, and t (j is the segment index, i is the index of the point in that segment, and t is the time/progress along that bezier)\n  var closest = {\n    j: 0,\n    i: 0,\n    t: 0\n  },\n      bestDistance = _largeNum,\n      i,\n      j,\n      t,\n      segment;\n\n  for (j = 0; j < rawPath.length; j++) {\n    segment = rawPath[j];\n\n    for (i = 0; i < segment.length; i += 6) {\n      t = getClosestProgressOnBezier(1, x, y, 0, 1, slices || 20, segment[i], segment[i + 1], segment[i + 2], segment[i + 3], segment[i + 4], segment[i + 5], segment[i + 6], segment[i + 7]);\n\n      if (bestDistance > _bestDistance) {\n        bestDistance = _bestDistance;\n        closest.j = j;\n        closest.i = i;\n        closest.t = t;\n      }\n    }\n  }\n\n  return closest;\n} //subdivide a Segment closest to a specific x,y coordinate\n\nfunction subdivideSegmentNear(x, y, segment, slices, iterations) {\n  var l = segment.length,\n      bestDistance = _largeNum,\n      bestT = 0,\n      bestSegmentIndex = 0,\n      t,\n      i;\n  slices = slices || 20;\n  iterations = iterations || 3;\n\n  for (i = 0; i < l; i += 6) {\n    t = getClosestProgressOnBezier(1, x, y, 0, 1, slices, segment[i], segment[i + 1], segment[i + 2], segment[i + 3], segment[i + 4], segment[i + 5], segment[i + 6], segment[i + 7]);\n\n    if (bestDistance > _bestDistance) {\n      bestDistance = _bestDistance;\n      bestT = t;\n      bestSegmentIndex = i;\n    }\n  }\n\n  t = getClosestProgressOnBezier(iterations, x, y, bestT - 0.05, bestT + 0.05, slices, segment[bestSegmentIndex], segment[bestSegmentIndex + 1], segment[bestSegmentIndex + 2], segment[bestSegmentIndex + 3], segment[bestSegmentIndex + 4], segment[bestSegmentIndex + 5], segment[bestSegmentIndex + 6], segment[bestSegmentIndex + 7]);\n  subdivideSegment(segment, bestSegmentIndex, t);\n  return bestSegmentIndex + 6;\n}\n/*\nTakes any of the following and converts it to an all Cubic Bezier SVG data string:\n- A <path> data string like \"M0,0 L2,4 v20,15 H100\"\n- A RawPath, like [[x, y, x, y, x, y, x, y][[x, y, x, y, x, y, x, y]]\n- A Segment, like [x, y, x, y, x, y, x, y]\n\nNote: all numbers are rounded down to the closest 0.001 to minimize memory, maximize speed, and avoid odd numbers like 1e-13\n*/\n\nfunction rawPathToString(rawPath) {\n  if (_isNumber(rawPath[0])) {\n    //in case a segment is passed in instead\n    rawPath = [rawPath];\n  }\n\n  var result = \"\",\n      l = rawPath.length,\n      sl,\n      s,\n      i,\n      segment;\n\n  for (s = 0; s < l; s++) {\n    segment = rawPath[s];\n    result += \"M\" + _round(segment[0]) + \",\" + _round(segment[1]) + \" C\";\n    sl = segment.length;\n\n    for (i = 2; i < sl; i++) {\n      result += _round(segment[i++]) + \",\" + _round(segment[i++]) + \" \" + _round(segment[i++]) + \",\" + _round(segment[i++]) + \" \" + _round(segment[i++]) + \",\" + _round(segment[i]) + \" \";\n    }\n\n    if (segment.closed) {\n      result += \"z\";\n    }\n  }\n\n  return result;\n}\n/*\n// takes a segment with coordinates [x, y, x, y, ...] and converts the control points into angles and lengths [x, y, angle, length, angle, length, x, y, angle, length, ...] so that it animates more cleanly and avoids odd breaks/kinks. For example, if you animate from 1 o'clock to 6 o'clock, it'd just go directly/linearly rather than around. So the length would be very short in the middle of the tween.\nexport function cpCoordsToAngles(segment, copy) {\n\tvar result = copy ? segment.slice(0) : segment,\n\t\tx, y, i;\n\tfor (i = 0; i < segment.length; i+=6) {\n\t\tx = segment[i+2] - segment[i];\n\t\ty = segment[i+3] - segment[i+1];\n\t\tresult[i+2] = Math.atan2(y, x);\n\t\tresult[i+3] = Math.sqrt(x * x + y * y);\n\t\tx = segment[i+6] - segment[i+4];\n\t\ty = segment[i+7] - segment[i+5];\n\t\tresult[i+4] = Math.atan2(y, x);\n\t\tresult[i+5] = Math.sqrt(x * x + y * y);\n\t}\n\treturn result;\n}\n\n// takes a segment that was converted with cpCoordsToAngles() to have angles and lengths instead of coordinates for the control points, and converts it BACK into coordinates.\nexport function cpAnglesToCoords(segment, copy) {\n\tvar result = copy ? segment.slice(0) : segment,\n\t\tlength = segment.length,\n\t\trnd = 1000,\n\t\tangle, l, i, j;\n\tfor (i = 0; i < length; i+=6) {\n\t\tangle = segment[i+2];\n\t\tl = segment[i+3]; //length\n\t\tresult[i+2] = (((segment[i] + Math.cos(angle) * l) * rnd) | 0) / rnd;\n\t\tresult[i+3] = (((segment[i+1] + Math.sin(angle) * l) * rnd) | 0) / rnd;\n\t\tangle = segment[i+4];\n\t\tl = segment[i+5]; //length\n\t\tresult[i+4] = (((segment[i+6] - Math.cos(angle) * l) * rnd) | 0) / rnd;\n\t\tresult[i+5] = (((segment[i+7] - Math.sin(angle) * l) * rnd) | 0) / rnd;\n\t}\n\treturn result;\n}\n\n//adds an \"isSmooth\" array to each segment and populates it with a boolean value indicating whether or not it's smooth (the control points have basically the same slope). For any smooth control points, it converts the coordinates into angle (x, in radians) and length (y) and puts them into the same index value in a smoothData array.\nexport function populateSmoothData(rawPath) {\n\tlet j = rawPath.length,\n\t\tsmooth, segment, x, y, x2, y2, i, l, a, a2, isSmooth, smoothData;\n\twhile (--j > -1) {\n\t\tsegment = rawPath[j];\n\t\tisSmooth = segment.isSmooth = segment.isSmooth || [0, 0, 0, 0];\n\t\tsmoothData = segment.smoothData = segment.smoothData || [0, 0, 0, 0];\n\t\tisSmooth.length = 4;\n\t\tl = segment.length - 2;\n\t\tfor (i = 6; i < l; i += 6) {\n\t\t\tx = segment[i] - segment[i - 2];\n\t\t\ty = segment[i + 1] - segment[i - 1];\n\t\t\tx2 = segment[i + 2] - segment[i];\n\t\t\ty2 = segment[i + 3] - segment[i + 1];\n\t\t\ta = _atan2(y, x);\n\t\t\ta2 = _atan2(y2, x2);\n\t\t\tsmooth = (Math.abs(a - a2) < 0.09);\n\t\t\tif (smooth) {\n\t\t\t\tsmoothData[i - 2] = a;\n\t\t\t\tsmoothData[i + 2] = a2;\n\t\t\t\tsmoothData[i - 1] = _sqrt(x * x + y * y);\n\t\t\t\tsmoothData[i + 3] = _sqrt(x2 * x2 + y2 * y2);\n\t\t\t}\n\t\t\tisSmooth.push(smooth, smooth, 0, 0, smooth, smooth);\n\t\t}\n\t\t//if the first and last points are identical, check to see if there's a smooth transition. We must handle this a bit differently due to their positions in the array.\n\t\tif (segment[l] === segment[0] && segment[l+1] === segment[1]) {\n\t\t\tx = segment[0] - segment[l-2];\n\t\t\ty = segment[1] - segment[l-1];\n\t\t\tx2 = segment[2] - segment[0];\n\t\t\ty2 = segment[3] - segment[1];\n\t\t\ta = _atan2(y, x);\n\t\t\ta2 = _atan2(y2, x2);\n\t\t\tif (Math.abs(a - a2) < 0.09) {\n\t\t\t\tsmoothData[l-2] = a;\n\t\t\t\tsmoothData[2] = a2;\n\t\t\t\tsmoothData[l-1] = _sqrt(x * x + y * y);\n\t\t\t\tsmoothData[3] = _sqrt(x2 * x2 + y2 * y2);\n\t\t\t\tisSmooth[l-2] = isSmooth[l-1] = true; //don't change indexes 2 and 3 because we'll trigger everything from the END, and this will optimize file size a bit.\n\t\t\t}\n\t\t}\n\t}\n\treturn rawPath;\n}\nexport function pointToScreen(svgElement, point) {\n\tif (arguments.length < 2) { //by default, take the first set of coordinates in the path as the point\n\t\tlet rawPath = getRawPath(svgElement);\n\t\tpoint = svgElement.ownerSVGElement.createSVGPoint();\n\t\tpoint.x = rawPath[0][0];\n\t\tpoint.y = rawPath[0][1];\n\t}\n\treturn point.matrixTransform(svgElement.getScreenCTM());\n}\n// takes a <path> and normalizes all of its coordinates to values between 0 and 1\nexport function normalizePath(path) {\n  path = gsap.utils.toArray(path);\n  if (!path[0].hasAttribute(\"d\")) {\n    path = gsap.utils.toArray(path[0].children);\n  }\n  if (path.length > 1) {\n    path.forEach(normalizePath);\n    return path;\n  }\n  let _svgPathExp = /[achlmqstvz]|(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n      _scientific = /[\\+\\-]?\\d*\\.?\\d+e[\\+\\-]?\\d+/ig,\n      d = path[0].getAttribute(\"d\"),\n      a = d.replace(_scientific, m => { let n = +m; return (n < 0.0001 && n > -0.0001) ? 0 : n; }).match(_svgPathExp),\n      nums = a.filter(n => !isNaN(n)).map(n => +n),\n      normalize = gsap.utils.normalize(Math.min(...nums), Math.max(...nums)),\n      finals = a.map(val => isNaN(val) ? val : normalize(+val)),\n      s = \"\",\n      prevWasCommand;\n  finals.forEach((value, i) => {\n    let isCommand = isNaN(value)\n    s += (isCommand && i ? \" \" : prevWasCommand || !i ? \"\" : \",\") + value;\n    prevWasCommand = isCommand;\n  });\n  path[0].setAttribute(\"d\", s);\n}\n*///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gsap/utils/paths.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/gsap/utils/strings.js":
/*!********************************************!*\
  !*** ./node_modules/gsap/utils/strings.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   emojiExp: function() { return /* binding */ emojiExp; },\n/* harmony export */   emojiSafeSplit: function() { return /* binding */ emojiSafeSplit; },\n/* harmony export */   getText: function() { return /* binding */ getText; },\n/* harmony export */   splitInnerHTML: function() { return /* binding */ splitInnerHTML; }\n/* harmony export */ });\n/*!\n * strings: 3.12.7\n * https://gsap.com\n *\n * Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar _trimExp = /(?:^\\s+|\\s+$)/g;\nvar emojiExp = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF](?:[\\u200D\\uFE0F][\\uD800-\\uDBFF][\\uDC00-\\uDFFF]){2,}|\\uD83D\\uDC69(?:\\u200D(?:(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC67|(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC66)|\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2642\\u2640]\\uFE0F|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDD27\\uDCBC\\uDD2C\\uDE80\\uDE92])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC6F\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3C-\\uDD3E\\uDDD6-\\uDDDF])\\u200D[\\u2640\\u2642]\\uFE0F|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF6\\uD83C\\uDDE6|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|(?:\\u26F9|\\uD83C[\\uDFCC\\uDFCB]|\\uD83D\\uDD75)(?:\\uFE0F\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642])\\uFE0F|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2695\\u2696\\u2708]|\\uD83D\\uDC69\\u200D[\\u2695\\u2696\\u2708]|\\uD83D\\uDC68(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708]))\\uFE0F|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83D\\uDC69\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69]))|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67)\\uDB40\\uDC7F|\\uD83D\\uDC68(?:\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92])|(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]))|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDD1-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC68(?:\\u200D(?:(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC67|(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC66)|\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC69\\uDC6E\\uDC70-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3D\\uDD3E\\uDDD1-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])?|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDEEB\\uDEEC\\uDEF4-\\uDEF8]|\\uD83E[\\uDD10-\\uDD3A\\uDD3C-\\uDD3E\\uDD40-\\uDD45\\uDD47-\\uDD4C\\uDD50-\\uDD6B\\uDD80-\\uDD97\\uDDC0\\uDDD0-\\uDDE6])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEF8]|\\uD83E[\\uDD10-\\uDD3A\\uDD3C-\\uDD3E\\uDD40-\\uDD45\\uDD47-\\uDD4C\\uDD50-\\uDD6B\\uDD80-\\uDD97\\uDDC0\\uDDD0-\\uDDE6])\\uFE0F)/;\nfunction getText(e) {\n  var type = e.nodeType,\n      result = \"\";\n\n  if (type === 1 || type === 9 || type === 11) {\n    if (typeof e.textContent === \"string\") {\n      return e.textContent;\n    } else {\n      for (e = e.firstChild; e; e = e.nextSibling) {\n        result += getText(e);\n      }\n    }\n  } else if (type === 3 || type === 4) {\n    return e.nodeValue;\n  }\n\n  return result;\n}\nfunction splitInnerHTML(element, delimiter, trim, preserveSpaces, unescapedCharCodes) {\n  var node = element.firstChild,\n      result = [],\n      s;\n\n  while (node) {\n    if (node.nodeType === 3) {\n      s = (node.nodeValue + \"\").replace(/^\\n+/g, \"\");\n\n      if (!preserveSpaces) {\n        s = s.replace(/\\s+/g, \" \");\n      }\n\n      result.push.apply(result, emojiSafeSplit(s, delimiter, trim, preserveSpaces, unescapedCharCodes));\n    } else if ((node.nodeName + \"\").toLowerCase() === \"br\") {\n      result[result.length - 1] += \"<br>\";\n    } else {\n      result.push(node.outerHTML);\n    }\n\n    node = node.nextSibling;\n  }\n\n  if (!unescapedCharCodes) {\n    s = result.length;\n\n    while (s--) {\n      result[s] === \"&\" && result.splice(s, 1, \"&amp;\");\n    }\n  }\n\n  return result;\n}\n/*\n//smaller kb version that only handles the simpler emoji's, which is often perfectly adequate.\n\nlet _emoji = \"[\\uE000-\\uF8FF]|\\uD83C[\\uDC00-\\uDFFF]|\\uD83D[\\uDC00-\\uDFFF]|[\\u2694-\\u2697]|\\uD83E[\\uDD10-\\uDD5D]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]\",\n\t_emojiExp = new RegExp(_emoji),\n\t_emojiAndCharsExp = new RegExp(_emoji + \"|.\", \"g\"),\n\t_emojiSafeSplit = (text, delimiter, trim) => {\n\t\tif (trim) {\n\t\t\ttext = text.replace(_trimExp, \"\");\n\t\t}\n\t\treturn ((delimiter === \"\" || !delimiter) && _emojiExp.test(text)) ? text.match(_emojiAndCharsExp) : text.split(delimiter || \"\");\n\t};\n */\n\nfunction emojiSafeSplit(text, delimiter, trim, preserveSpaces, unescapedCharCodes) {\n  text += \"\"; // make sure it's cast as a string. Someone may pass in a number.\n\n  trim && (text = text.trim ? text.trim() : text.replace(_trimExp, \"\")); // IE9 and earlier compatibility\n\n  if (delimiter && delimiter !== \"\") {\n    return text.replace(/>/g, \"&gt;\").replace(/</g, \"&lt;\").split(delimiter);\n  }\n\n  var result = [],\n      l = text.length,\n      i = 0,\n      j,\n      character;\n\n  for (; i < l; i++) {\n    character = text.charAt(i);\n\n    if (character.charCodeAt(0) >= 0xD800 && character.charCodeAt(0) <= 0xDBFF || text.charCodeAt(i + 1) >= 0xFE00 && text.charCodeAt(i + 1) <= 0xFE0F) {\n      //special emoji characters use 2 or 4 unicode characters that we must keep together.\n      j = ((text.substr(i, 12).split(emojiExp) || [])[1] || \"\").length || 2;\n      character = text.substr(i, j);\n      result.emoji = 1;\n      i += j - 1;\n    }\n\n    result.push(unescapedCharCodes ? character : character === \">\" ? \"&gt;\" : character === \"<\" ? \"&lt;\" : preserveSpaces && character === \" \" && (text.charAt(i - 1) === \" \" || text.charAt(i + 1) === \" \") ? \"&nbsp;\" : character);\n  }\n\n  return result;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nc2FwL3V0aWxzL3N0cmluZ3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ08sZ0dBQWdHLEdBQUc7QUFDbkc7QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTiw2QkFBNkIsR0FBRztBQUNoQztBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1AsY0FBYzs7QUFFZCx5RUFBeUU7O0FBRXpFO0FBQ0EsbUNBQW1DLHNCQUFzQjtBQUN6RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVMsT0FBTztBQUNoQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwRUFBMEUsNkJBQTZCLCtHQUErRztBQUN0Tjs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9nc2FwL3V0aWxzL3N0cmluZ3MuanM/MzkwNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIHN0cmluZ3M6IDMuMTIuN1xuICogaHR0cHM6Ly9nc2FwLmNvbVxuICpcbiAqIENvcHlyaWdodCAyMDA4LTIwMjUsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3NhcC5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR1NBUCBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbnZhciBfdHJpbUV4cCA9IC8oPzpeXFxzK3xcXHMrJCkvZztcbmV4cG9ydCB2YXIgZW1vamlFeHAgPSAvKFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl0oPzpbXFx1MjAwRFxcdUZFMEZdW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXSl7Mix9fFxcdUQ4M0RcXHVEQzY5KD86XFx1MjAwRCg/Oig/OlxcdUQ4M0RcXHVEQzY5XFx1MjAwRCk/XFx1RDgzRFxcdURDNjd8KD86XFx1RDgzRFxcdURDNjlcXHUyMDBEKT9cXHVEODNEXFx1REM2Nil8XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKXxcXHVEODNEXFx1REM2OVxcdTIwMEQoPzpcXHVEODNEXFx1REM2OVxcdTIwMEQpP1xcdUQ4M0RcXHVEQzY2XFx1MjAwRFxcdUQ4M0RcXHVEQzY2fFxcdUQ4M0RcXHVEQzY5XFx1MjAwRCg/OlxcdUQ4M0RcXHVEQzY5XFx1MjAwRCk/XFx1RDgzRFxcdURDNjdcXHUyMDBEKD86XFx1RDgzRFtcXHVEQzY2XFx1REM2N10pfFxcdUQ4M0NcXHVERkYzXFx1RkUwRlxcdTIwMERcXHVEODNDXFx1REYwOHwoPzpcXHVEODNDW1xcdURGQzNcXHVERkM0XFx1REZDQV18XFx1RDgzRFtcXHVEQzZFXFx1REM3MVxcdURDNzNcXHVEQzc3XFx1REM4MVxcdURDODJcXHVEQzg2XFx1REM4N1xcdURFNDUtXFx1REU0N1xcdURFNEJcXHVERTREXFx1REU0RVxcdURFQTNcXHVERUI0LVxcdURFQjZdfFxcdUQ4M0VbXFx1REQyNlxcdUREMzctXFx1REQzOVxcdUREM0RcXHVERDNFXFx1RERENi1cXHVEREREXSkoPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pXFx1MjAwRFtcXHUyNjQyXFx1MjY0MF1cXHVGRTBGfFxcdUQ4M0RcXHVEQzY5KD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKVxcdTIwMEQoPzpcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdUREMjdcXHVEQ0JDXFx1REQyQ1xcdURFODBcXHVERTkyXSl8KD86XFx1RDgzQ1tcXHVERkMzXFx1REZDNFxcdURGQ0FdfFxcdUQ4M0RbXFx1REM2RVxcdURDNkZcXHVEQzcxXFx1REM3M1xcdURDNzdcXHVEQzgxXFx1REM4MlxcdURDODZcXHVEQzg3XFx1REU0NS1cXHVERTQ3XFx1REU0QlxcdURFNERcXHVERTRFXFx1REVBM1xcdURFQjQtXFx1REVCNl18XFx1RDgzRVtcXHVERDI2XFx1REQzNy1cXHVERDM5XFx1REQzQy1cXHVERDNFXFx1RERENi1cXHVERERGXSlcXHUyMDBEW1xcdTI2NDBcXHUyNjQyXVxcdUZFMEZ8XFx1RDgzQ1xcdURERkRcXHVEODNDXFx1RERGMHxcXHVEODNDXFx1RERGNlxcdUQ4M0NcXHVEREU2fFxcdUQ4M0NcXHVEREY0XFx1RDgzQ1xcdURERjJ8XFx1RDgzQ1xcdURERTkoPzpcXHVEODNDW1xcdURERUFcXHVEREVDXFx1RERFRlxcdURERjBcXHVEREYyXFx1RERGNFxcdURERkZdKXxcXHVEODNDXFx1RERGNyg/OlxcdUQ4M0NbXFx1RERFQVxcdURERjRcXHVEREY4XFx1RERGQVxcdURERkNdKXxcXHVEODNDXFx1RERFOCg/OlxcdUQ4M0NbXFx1RERFNlxcdURERThcXHVEREU5XFx1RERFQi1cXHVEREVFXFx1RERGMC1cXHVEREY1XFx1RERGN1xcdURERkEtXFx1RERGRl0pfCg/OlxcdTI2Rjl8XFx1RDgzQ1tcXHVERkNDXFx1REZDQl18XFx1RDgzRFxcdURENzUpKD86XFx1RkUwRlxcdTIwMERbXFx1MjY0MFxcdTI2NDJdfCg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSlcXHUyMDBEW1xcdTI2NDBcXHUyNjQyXSlcXHVGRTBGfCg/OlxcdUQ4M0RcXHVEQzQxXFx1RkUwRlxcdTIwMERcXHVEODNEXFx1RERFOHxcXHVEODNEXFx1REM2OSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSlcXHUyMDBEW1xcdTI2OTVcXHUyNjk2XFx1MjcwOF18XFx1RDgzRFxcdURDNjlcXHUyMDBEW1xcdTI2OTVcXHUyNjk2XFx1MjcwOF18XFx1RDgzRFxcdURDNjgoPzooPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pXFx1MjAwRFtcXHUyNjk1XFx1MjY5NlxcdTI3MDhdfFxcdTIwMERbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XSkpXFx1RkUwRnxcXHVEODNDXFx1RERGMig/OlxcdUQ4M0NbXFx1RERFNlxcdURERTgtXFx1RERFRFxcdURERjAtXFx1RERGRl0pfFxcdUQ4M0RcXHVEQzY5XFx1MjAwRCg/OlxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjkzXFx1REZBNFxcdURGQThcXHVERkVCXFx1REZFRF18XFx1RDgzRFtcXHVEQ0JCXFx1RENCQ1xcdUREMjdcXHVERDJDXFx1REU4MFxcdURFOTJdfFxcdTI3NjRcXHVGRTBGXFx1MjAwRCg/OlxcdUQ4M0RcXHVEQzhCXFx1MjAwRCg/OlxcdUQ4M0RbXFx1REM2OFxcdURDNjldKXxcXHVEODNEW1xcdURDNjhcXHVEQzY5XSkpfFxcdUQ4M0NcXHVEREYxKD86XFx1RDgzQ1tcXHVEREU2LVxcdURERThcXHVEREVFXFx1RERGMFxcdURERjctXFx1RERGQlxcdURERkVdKXxcXHVEODNDXFx1RERFRig/OlxcdUQ4M0NbXFx1RERFQVxcdURERjJcXHVEREY0XFx1RERGNV0pfFxcdUQ4M0NcXHVEREVEKD86XFx1RDgzQ1tcXHVEREYwXFx1RERGMlxcdURERjNcXHVEREY3XFx1RERGOVxcdURERkFdKXxcXHVEODNDXFx1RERFQig/OlxcdUQ4M0NbXFx1RERFRS1cXHVEREYwXFx1RERGMlxcdURERjRcXHVEREY3XSl8WyNcXCowLTldXFx1RkUwRlxcdTIwRTN8XFx1RDgzQ1xcdURERTcoPzpcXHVEODNDW1xcdURERTZcXHVEREU3XFx1RERFOS1cXHVEREVGXFx1RERGMS1cXHVEREY0XFx1RERGNi1cXHVEREY5XFx1RERGQlxcdURERkNcXHVEREZFXFx1RERGRl0pfFxcdUQ4M0NcXHVEREU2KD86XFx1RDgzQ1tcXHVEREU4LVxcdURERUNcXHVEREVFXFx1RERGMVxcdURERjJcXHVEREY0XFx1RERGNi1cXHVEREZBXFx1RERGQ1xcdURERkRcXHVEREZGXSl8XFx1RDgzQ1xcdURERkYoPzpcXHVEODNDW1xcdURERTZcXHVEREYyXFx1RERGQ10pfFxcdUQ4M0NcXHVEREY1KD86XFx1RDgzQ1tcXHVEREU2XFx1RERFQS1cXHVEREVEXFx1RERGMC1cXHVEREYzXFx1RERGNy1cXHVEREY5XFx1RERGQ1xcdURERkVdKXxcXHVEODNDXFx1RERGQig/OlxcdUQ4M0NbXFx1RERFNlxcdURERThcXHVEREVBXFx1RERFQ1xcdURERUVcXHVEREYzXFx1RERGQV0pfFxcdUQ4M0NcXHVEREYzKD86XFx1RDgzQ1tcXHVEREU2XFx1RERFOFxcdURERUEtXFx1RERFQ1xcdURERUVcXHVEREYxXFx1RERGNFxcdURERjVcXHVEREY3XFx1RERGQVxcdURERkZdKXxcXHVEODNDXFx1REZGNFxcdURCNDBcXHVEQzY3XFx1REI0MFxcdURDNjIoPzpcXHVEQjQwXFx1REM3N1xcdURCNDBcXHVEQzZDXFx1REI0MFxcdURDNzN8XFx1REI0MFxcdURDNzNcXHVEQjQwXFx1REM2M1xcdURCNDBcXHVEQzc0fFxcdURCNDBcXHVEQzY1XFx1REI0MFxcdURDNkVcXHVEQjQwXFx1REM2NylcXHVEQjQwXFx1REM3RnxcXHVEODNEXFx1REM2OCg/OlxcdTIwMEQoPzpcXHUyNzY0XFx1RkUwRlxcdTIwMEQoPzpcXHVEODNEXFx1REM4QlxcdTIwMEQpP1xcdUQ4M0RcXHVEQzY4fCg/Oig/OlxcdUQ4M0RbXFx1REM2OFxcdURDNjldKVxcdTIwMEQpP1xcdUQ4M0RcXHVEQzY2XFx1MjAwRFxcdUQ4M0RcXHVEQzY2fCg/Oig/OlxcdUQ4M0RbXFx1REM2OFxcdURDNjldKVxcdTIwMEQpP1xcdUQ4M0RcXHVEQzY3XFx1MjAwRCg/OlxcdUQ4M0RbXFx1REM2NlxcdURDNjddKXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXSl8KD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKVxcdTIwMEQoPzpcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXSkpfFxcdUQ4M0NcXHVEREY4KD86XFx1RDgzQ1tcXHVEREU2LVxcdURERUFcXHVEREVDLVxcdURERjRcXHVEREY3LVxcdURERjlcXHVEREZCXFx1RERGRC1cXHVEREZGXSl8XFx1RDgzQ1xcdURERjAoPzpcXHVEODNDW1xcdURERUFcXHVEREVDLVxcdURERUVcXHVEREYyXFx1RERGM1xcdURERjVcXHVEREY3XFx1RERGQ1xcdURERkVcXHVEREZGXSl8XFx1RDgzQ1xcdURERkUoPzpcXHVEODNDW1xcdURERUFcXHVEREY5XSl8XFx1RDgzQ1xcdURERUUoPzpcXHVEODNDW1xcdURERTgtXFx1RERFQVxcdURERjEtXFx1RERGNFxcdURERjYtXFx1RERGOV0pfFxcdUQ4M0NcXHVEREY5KD86XFx1RDgzQ1tcXHVEREU2XFx1RERFOFxcdURERTlcXHVEREVCLVxcdURERURcXHVEREVGLVxcdURERjRcXHVEREY3XFx1RERGOVxcdURERkJcXHVEREZDXFx1RERGRl0pfFxcdUQ4M0NcXHVEREVDKD86XFx1RDgzQ1tcXHVEREU2XFx1RERFN1xcdURERTktXFx1RERFRVxcdURERjEtXFx1RERGM1xcdURERjUtXFx1RERGQVxcdURERkNcXHVEREZFXSl8XFx1RDgzQ1xcdURERkEoPzpcXHVEODNDW1xcdURERTZcXHVEREVDXFx1RERGMlxcdURERjNcXHVEREY4XFx1RERGRVxcdURERkZdKXxcXHVEODNDXFx1RERFQSg/OlxcdUQ4M0NbXFx1RERFNlxcdURERThcXHVEREVBXFx1RERFQ1xcdURERURcXHVEREY3LVxcdURERkFdKXxcXHVEODNDXFx1RERGQyg/OlxcdUQ4M0NbXFx1RERFQlxcdURERjhdKXwoPzpcXHUyNkY5fFxcdUQ4M0NbXFx1REZDQlxcdURGQ0NdfFxcdUQ4M0RcXHVERDc1KSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSl8KD86XFx1RDgzQ1tcXHVERkMzXFx1REZDNFxcdURGQ0FdfFxcdUQ4M0RbXFx1REM2RVxcdURDNzFcXHVEQzczXFx1REM3N1xcdURDODFcXHVEQzgyXFx1REM4NlxcdURDODdcXHVERTQ1LVxcdURFNDdcXHVERTRCXFx1REU0RFxcdURFNEVcXHVERUEzXFx1REVCNC1cXHVERUI2XXxcXHVEODNFW1xcdUREMjZcXHVERDM3LVxcdUREMzlcXHVERDNEXFx1REQzRVxcdURERDYtXFx1RERERF0pKD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKXwoPzpbXFx1MjYxRFxcdTI3MEEtXFx1MjcwRF18XFx1RDgzQ1tcXHVERjg1XFx1REZDMlxcdURGQzddfFxcdUQ4M0RbXFx1REM0MlxcdURDNDNcXHVEQzQ2LVxcdURDNTBcXHVEQzY2XFx1REM2N1xcdURDNzBcXHVEQzcyXFx1REM3NC1cXHVEQzc2XFx1REM3OFxcdURDN0NcXHVEQzgzXFx1REM4NVxcdURDQUFcXHVERDc0XFx1REQ3QVxcdUREOTBcXHVERDk1XFx1REQ5NlxcdURFNENcXHVERTRGXFx1REVDMFxcdURFQ0NdfFxcdUQ4M0VbXFx1REQxOC1cXHVERDFDXFx1REQxRVxcdUREMUZcXHVERDMwLVxcdUREMzZcXHVEREQxLVxcdURERDVdKSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSl8XFx1RDgzRFxcdURDNjgoPzpcXHUyMDBEKD86KD86KD86XFx1RDgzRFtcXHVEQzY4XFx1REM2OV0pXFx1MjAwRCk/XFx1RDgzRFxcdURDNjd8KD86KD86XFx1RDgzRFtcXHVEQzY4XFx1REM2OV0pXFx1MjAwRCk/XFx1RDgzRFxcdURDNjYpfFxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSl8KD86W1xcdTI2MURcXHUyNkY5XFx1MjcwQS1cXHUyNzBEXXxcXHVEODNDW1xcdURGODVcXHVERkMyLVxcdURGQzRcXHVERkM3XFx1REZDQS1cXHVERkNDXXxcXHVEODNEW1xcdURDNDJcXHVEQzQzXFx1REM0Ni1cXHVEQzUwXFx1REM2Ni1cXHVEQzY5XFx1REM2RVxcdURDNzAtXFx1REM3OFxcdURDN0NcXHVEQzgxLVxcdURDODNcXHVEQzg1LVxcdURDODdcXHVEQ0FBXFx1REQ3NFxcdURENzVcXHVERDdBXFx1REQ5MFxcdUREOTVcXHVERDk2XFx1REU0NS1cXHVERTQ3XFx1REU0Qi1cXHVERTRGXFx1REVBM1xcdURFQjQtXFx1REVCNlxcdURFQzBcXHVERUNDXXxcXHVEODNFW1xcdUREMTgtXFx1REQxQ1xcdUREMUVcXHVERDFGXFx1REQyNlxcdUREMzAtXFx1REQzOVxcdUREM0RcXHVERDNFXFx1REREMS1cXHVEREREXSkoPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pP3woPzpbXFx1MjMxQVxcdTIzMUJcXHUyM0U5LVxcdTIzRUNcXHUyM0YwXFx1MjNGM1xcdTI1RkRcXHUyNUZFXFx1MjYxNFxcdTI2MTVcXHUyNjQ4LVxcdTI2NTNcXHUyNjdGXFx1MjY5M1xcdTI2QTFcXHUyNkFBXFx1MjZBQlxcdTI2QkRcXHUyNkJFXFx1MjZDNFxcdTI2QzVcXHUyNkNFXFx1MjZENFxcdTI2RUFcXHUyNkYyXFx1MjZGM1xcdTI2RjVcXHUyNkZBXFx1MjZGRFxcdTI3MDVcXHUyNzBBXFx1MjcwQlxcdTI3MjhcXHUyNzRDXFx1Mjc0RVxcdTI3NTMtXFx1Mjc1NVxcdTI3NTdcXHUyNzk1LVxcdTI3OTdcXHUyN0IwXFx1MjdCRlxcdTJCMUJcXHUyQjFDXFx1MkI1MFxcdTJCNTVdfFxcdUQ4M0NbXFx1REMwNFxcdURDQ0ZcXHVERDhFXFx1REQ5MS1cXHVERDlBXFx1RERFNi1cXHVEREZGXFx1REUwMVxcdURFMUFcXHVERTJGXFx1REUzMi1cXHVERTM2XFx1REUzOC1cXHVERTNBXFx1REU1MFxcdURFNTFcXHVERjAwLVxcdURGMjBcXHVERjJELVxcdURGMzVcXHVERjM3LVxcdURGN0NcXHVERjdFLVxcdURGOTNcXHVERkEwLVxcdURGQ0FcXHVERkNGLVxcdURGRDNcXHVERkUwLVxcdURGRjBcXHVERkY0XFx1REZGOC1cXHVERkZGXXxcXHVEODNEW1xcdURDMDAtXFx1REMzRVxcdURDNDBcXHVEQzQyLVxcdURDRkNcXHVEQ0ZGLVxcdUREM0RcXHVERDRCLVxcdURENEVcXHVERDUwLVxcdURENjdcXHVERDdBXFx1REQ5NVxcdUREOTZcXHVEREE0XFx1RERGQi1cXHVERTRGXFx1REU4MC1cXHVERUM1XFx1REVDQ1xcdURFRDAtXFx1REVEMlxcdURFRUJcXHVERUVDXFx1REVGNC1cXHVERUY4XXxcXHVEODNFW1xcdUREMTAtXFx1REQzQVxcdUREM0MtXFx1REQzRVxcdURENDAtXFx1REQ0NVxcdURENDctXFx1REQ0Q1xcdURENTAtXFx1REQ2QlxcdUREODAtXFx1REQ5N1xcdUREQzBcXHVEREQwLVxcdURERTZdKXwoPzpbI1xcKjAtOVxceEE5XFx4QUVcXHUyMDNDXFx1MjA0OVxcdTIxMjJcXHUyMTM5XFx1MjE5NC1cXHUyMTk5XFx1MjFBOVxcdTIxQUFcXHUyMzFBXFx1MjMxQlxcdTIzMjhcXHUyM0NGXFx1MjNFOS1cXHUyM0YzXFx1MjNGOC1cXHUyM0ZBXFx1MjRDMlxcdTI1QUFcXHUyNUFCXFx1MjVCNlxcdTI1QzBcXHUyNUZCLVxcdTI1RkVcXHUyNjAwLVxcdTI2MDRcXHUyNjBFXFx1MjYxMVxcdTI2MTRcXHUyNjE1XFx1MjYxOFxcdTI2MURcXHUyNjIwXFx1MjYyMlxcdTI2MjNcXHUyNjI2XFx1MjYyQVxcdTI2MkVcXHUyNjJGXFx1MjYzOC1cXHUyNjNBXFx1MjY0MFxcdTI2NDJcXHUyNjQ4LVxcdTI2NTNcXHUyNjYwXFx1MjY2M1xcdTI2NjVcXHUyNjY2XFx1MjY2OFxcdTI2N0JcXHUyNjdGXFx1MjY5Mi1cXHUyNjk3XFx1MjY5OVxcdTI2OUJcXHUyNjlDXFx1MjZBMFxcdTI2QTFcXHUyNkFBXFx1MjZBQlxcdTI2QjBcXHUyNkIxXFx1MjZCRFxcdTI2QkVcXHUyNkM0XFx1MjZDNVxcdTI2QzhcXHUyNkNFXFx1MjZDRlxcdTI2RDFcXHUyNkQzXFx1MjZENFxcdTI2RTlcXHUyNkVBXFx1MjZGMC1cXHUyNkY1XFx1MjZGNy1cXHUyNkZBXFx1MjZGRFxcdTI3MDJcXHUyNzA1XFx1MjcwOC1cXHUyNzBEXFx1MjcwRlxcdTI3MTJcXHUyNzE0XFx1MjcxNlxcdTI3MURcXHUyNzIxXFx1MjcyOFxcdTI3MzNcXHUyNzM0XFx1Mjc0NFxcdTI3NDdcXHUyNzRDXFx1Mjc0RVxcdTI3NTMtXFx1Mjc1NVxcdTI3NTdcXHUyNzYzXFx1Mjc2NFxcdTI3OTUtXFx1Mjc5N1xcdTI3QTFcXHUyN0IwXFx1MjdCRlxcdTI5MzRcXHUyOTM1XFx1MkIwNS1cXHUyQjA3XFx1MkIxQlxcdTJCMUNcXHUyQjUwXFx1MkI1NVxcdTMwMzBcXHUzMDNEXFx1MzI5N1xcdTMyOTldfFxcdUQ4M0NbXFx1REMwNFxcdURDQ0ZcXHVERDcwXFx1REQ3MVxcdUREN0VcXHVERDdGXFx1REQ4RVxcdUREOTEtXFx1REQ5QVxcdURERTYtXFx1RERGRlxcdURFMDFcXHVERTAyXFx1REUxQVxcdURFMkZcXHVERTMyLVxcdURFM0FcXHVERTUwXFx1REU1MVxcdURGMDAtXFx1REYyMVxcdURGMjQtXFx1REY5M1xcdURGOTZcXHVERjk3XFx1REY5OS1cXHVERjlCXFx1REY5RS1cXHVERkYwXFx1REZGMy1cXHVERkY1XFx1REZGNy1cXHVERkZGXXxcXHVEODNEW1xcdURDMDAtXFx1RENGRFxcdURDRkYtXFx1REQzRFxcdURENDktXFx1REQ0RVxcdURENTAtXFx1REQ2N1xcdURENkZcXHVERDcwXFx1REQ3My1cXHVERDdBXFx1REQ4N1xcdUREOEEtXFx1REQ4RFxcdUREOTBcXHVERDk1XFx1REQ5NlxcdUREQTRcXHVEREE1XFx1RERBOFxcdUREQjFcXHVEREIyXFx1RERCQ1xcdUREQzItXFx1RERDNFxcdURERDEtXFx1REREM1xcdUREREMtXFx1RERERVxcdURERTFcXHVEREUzXFx1RERFOFxcdURERUZcXHVEREYzXFx1RERGQS1cXHVERTRGXFx1REU4MC1cXHVERUM1XFx1REVDQi1cXHVERUQyXFx1REVFMC1cXHVERUU1XFx1REVFOVxcdURFRUJcXHVERUVDXFx1REVGMFxcdURFRjMtXFx1REVGOF18XFx1RDgzRVtcXHVERDEwLVxcdUREM0FcXHVERDNDLVxcdUREM0VcXHVERDQwLVxcdURENDVcXHVERDQ3LVxcdURENENcXHVERDUwLVxcdURENkJcXHVERDgwLVxcdUREOTdcXHVEREMwXFx1REREMC1cXHVEREU2XSlcXHVGRTBGKS87XG5leHBvcnQgZnVuY3Rpb24gZ2V0VGV4dChlKSB7XG4gIHZhciB0eXBlID0gZS5ub2RlVHlwZSxcbiAgICAgIHJlc3VsdCA9IFwiXCI7XG5cbiAgaWYgKHR5cGUgPT09IDEgfHwgdHlwZSA9PT0gOSB8fCB0eXBlID09PSAxMSkge1xuICAgIGlmICh0eXBlb2YgZS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIGUudGV4dENvbnRlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoZSA9IGUuZmlyc3RDaGlsZDsgZTsgZSA9IGUubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgcmVzdWx0ICs9IGdldFRleHQoZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGUgPT09IDMgfHwgdHlwZSA9PT0gNCkge1xuICAgIHJldHVybiBlLm5vZGVWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gc3BsaXRJbm5lckhUTUwoZWxlbWVudCwgZGVsaW1pdGVyLCB0cmltLCBwcmVzZXJ2ZVNwYWNlcywgdW5lc2NhcGVkQ2hhckNvZGVzKSB7XG4gIHZhciBub2RlID0gZWxlbWVudC5maXJzdENoaWxkLFxuICAgICAgcmVzdWx0ID0gW10sXG4gICAgICBzO1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgIHMgPSAobm9kZS5ub2RlVmFsdWUgKyBcIlwiKS5yZXBsYWNlKC9eXFxuKy9nLCBcIlwiKTtcblxuICAgICAgaWYgKCFwcmVzZXJ2ZVNwYWNlcykge1xuICAgICAgICBzID0gcy5yZXBsYWNlKC9cXHMrL2csIFwiIFwiKTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0LnB1c2guYXBwbHkocmVzdWx0LCBlbW9qaVNhZmVTcGxpdChzLCBkZWxpbWl0ZXIsIHRyaW0sIHByZXNlcnZlU3BhY2VzLCB1bmVzY2FwZWRDaGFyQ29kZXMpKTtcbiAgICB9IGVsc2UgaWYgKChub2RlLm5vZGVOYW1lICsgXCJcIikudG9Mb3dlckNhc2UoKSA9PT0gXCJiclwiKSB7XG4gICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdICs9IFwiPGJyPlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucHVzaChub2RlLm91dGVySFRNTCk7XG4gICAgfVxuXG4gICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gIH1cblxuICBpZiAoIXVuZXNjYXBlZENoYXJDb2Rlcykge1xuICAgIHMgPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgd2hpbGUgKHMtLSkge1xuICAgICAgcmVzdWx0W3NdID09PSBcIiZcIiAmJiByZXN1bHQuc3BsaWNlKHMsIDEsIFwiJmFtcDtcIik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qXG4vL3NtYWxsZXIga2IgdmVyc2lvbiB0aGF0IG9ubHkgaGFuZGxlcyB0aGUgc2ltcGxlciBlbW9qaSdzLCB3aGljaCBpcyBvZnRlbiBwZXJmZWN0bHkgYWRlcXVhdGUuXG5cbmxldCBfZW1vamkgPSBcIltcXHVFMDAwLVxcdUY4RkZdfFxcdUQ4M0NbXFx1REMwMC1cXHVERkZGXXxcXHVEODNEW1xcdURDMDAtXFx1REZGRl18W1xcdTI2OTQtXFx1MjY5N118XFx1RDgzRVtcXHVERDEwLVxcdURENURdfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl1cIixcblx0X2Vtb2ppRXhwID0gbmV3IFJlZ0V4cChfZW1vamkpLFxuXHRfZW1vamlBbmRDaGFyc0V4cCA9IG5ldyBSZWdFeHAoX2Vtb2ppICsgXCJ8LlwiLCBcImdcIiksXG5cdF9lbW9qaVNhZmVTcGxpdCA9ICh0ZXh0LCBkZWxpbWl0ZXIsIHRyaW0pID0+IHtcblx0XHRpZiAodHJpbSkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZShfdHJpbUV4cCwgXCJcIik7XG5cdFx0fVxuXHRcdHJldHVybiAoKGRlbGltaXRlciA9PT0gXCJcIiB8fCAhZGVsaW1pdGVyKSAmJiBfZW1vamlFeHAudGVzdCh0ZXh0KSkgPyB0ZXh0Lm1hdGNoKF9lbW9qaUFuZENoYXJzRXhwKSA6IHRleHQuc3BsaXQoZGVsaW1pdGVyIHx8IFwiXCIpO1xuXHR9O1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlbW9qaVNhZmVTcGxpdCh0ZXh0LCBkZWxpbWl0ZXIsIHRyaW0sIHByZXNlcnZlU3BhY2VzLCB1bmVzY2FwZWRDaGFyQ29kZXMpIHtcbiAgdGV4dCArPSBcIlwiOyAvLyBtYWtlIHN1cmUgaXQncyBjYXN0IGFzIGEgc3RyaW5nLiBTb21lb25lIG1heSBwYXNzIGluIGEgbnVtYmVyLlxuXG4gIHRyaW0gJiYgKHRleHQgPSB0ZXh0LnRyaW0gPyB0ZXh0LnRyaW0oKSA6IHRleHQucmVwbGFjZShfdHJpbUV4cCwgXCJcIikpOyAvLyBJRTkgYW5kIGVhcmxpZXIgY29tcGF0aWJpbGl0eVxuXG4gIGlmIChkZWxpbWl0ZXIgJiYgZGVsaW1pdGVyICE9PSBcIlwiKSB7XG4gICAgcmV0dXJuIHRleHQucmVwbGFjZSgvPi9nLCBcIiZndDtcIikucmVwbGFjZSgvPC9nLCBcIiZsdDtcIikuc3BsaXQoZGVsaW1pdGVyKTtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSBbXSxcbiAgICAgIGwgPSB0ZXh0Lmxlbmd0aCxcbiAgICAgIGkgPSAwLFxuICAgICAgaixcbiAgICAgIGNoYXJhY3RlcjtcblxuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIGNoYXJhY3RlciA9IHRleHQuY2hhckF0KGkpO1xuXG4gICAgaWYgKGNoYXJhY3Rlci5jaGFyQ29kZUF0KDApID49IDB4RDgwMCAmJiBjaGFyYWN0ZXIuY2hhckNvZGVBdCgwKSA8PSAweERCRkYgfHwgdGV4dC5jaGFyQ29kZUF0KGkgKyAxKSA+PSAweEZFMDAgJiYgdGV4dC5jaGFyQ29kZUF0KGkgKyAxKSA8PSAweEZFMEYpIHtcbiAgICAgIC8vc3BlY2lhbCBlbW9qaSBjaGFyYWN0ZXJzIHVzZSAyIG9yIDQgdW5pY29kZSBjaGFyYWN0ZXJzIHRoYXQgd2UgbXVzdCBrZWVwIHRvZ2V0aGVyLlxuICAgICAgaiA9ICgodGV4dC5zdWJzdHIoaSwgMTIpLnNwbGl0KGVtb2ppRXhwKSB8fCBbXSlbMV0gfHwgXCJcIikubGVuZ3RoIHx8IDI7XG4gICAgICBjaGFyYWN0ZXIgPSB0ZXh0LnN1YnN0cihpLCBqKTtcbiAgICAgIHJlc3VsdC5lbW9qaSA9IDE7XG4gICAgICBpICs9IGogLSAxO1xuICAgIH1cblxuICAgIHJlc3VsdC5wdXNoKHVuZXNjYXBlZENoYXJDb2RlcyA/IGNoYXJhY3RlciA6IGNoYXJhY3RlciA9PT0gXCI+XCIgPyBcIiZndDtcIiA6IGNoYXJhY3RlciA9PT0gXCI8XCIgPyBcIiZsdDtcIiA6IHByZXNlcnZlU3BhY2VzICYmIGNoYXJhY3RlciA9PT0gXCIgXCIgJiYgKHRleHQuY2hhckF0KGkgLSAxKSA9PT0gXCIgXCIgfHwgdGV4dC5jaGFyQXQoaSArIDEpID09PSBcIiBcIikgPyBcIiZuYnNwO1wiIDogY2hhcmFjdGVyKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/gsap/utils/strings.js\n"));

/***/ })

}]);